
_programs/sma_free_rtos/out/sma_free_rtos.elf:     file format elf32-littlearm
_programs/sma_free_rtos/out/sma_free_rtos.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0012e5

Program Header:
0x70000001 off    0x00016d14 vaddr 0x1a006d14 paddr 0x1a006d14 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002da4 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00006d1c memsz 0x00006d1c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a006d1c align 2**16
         filesz 0x000000b4 memsz 0x000000b4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006d10  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  10000000  1a006d1c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200b4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200b4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200b4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200b4  2**2
                  CONTENTS
  6 .bss          00002cf0  100000b4  100000b4  000000b4  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200b4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200b4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200b4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200b4  2**2
                  CONTENTS
 11 .init_array   00000004  1a006d10  1a006d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a006d14  1a006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200b4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200b4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200b4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200b4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200b4  2**2
                  CONTENTS
 18 .noinit       00000000  10002da4  10002da4  000200b4  2**2
                  CONTENTS
 19 .debug_info   0003f7e3  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00007dc2  00000000  00000000  0005f897  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0001007b  00000000  00000000  00067659  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 000012b8  00000000  00000000  000776d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001470  00000000  00000000  0007898c  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00013880  00000000  00000000  00079dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00022ecd  00000000  00000000  0008d67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00031466  00000000  00000000  000b0549  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000e19af  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000e1a17  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000039cc  00000000  00000000  000e1a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000b4 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a006d10 l    d  .init_array	00000000 .init_array
1a006d14 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002da4 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 receiverTask.c
100000b4 l     O .bss	0000000a uartBuff.14398
00000000 l    df *ABS*	00000000 bme280Task.c
00000000 l    df *ABS*	00000000 am2301Task.c
00000000 l    df *ABS*	00000000 sma.c
00000000 l    df *ABS*	00000000 senderTask2.c
00000000 l    df *ABS*	00000000 sapi_bme280.c
1a000598 l     F .text	00000016 fill_filter_settings
1a0005ae l     F .text	00000012 fill_standby_settings
1a0005c0 l     F .text	00000016 fill_osr_press_settings
1a0005d6 l     F .text	00000012 fill_osr_temp_settings
1a0005e8 l     F .text	00000026 parse_device_settings
1a000610 l     F .text	00000108 compensate_temperature
1a000718 l     F .text	00000250 compensate_pressure
1a000968 l     F .text	00000178 compensate_humidity
1a000ae0 l     F .text	00000020 interleave_reg_addr
1a000b00 l     F .text	00000080 parse_temp_press_calib_data
1a000b80 l     F .text	00000040 parse_humidity_calib_data
1a000bc0 l     F .text	0000000c are_settings_changed
1a000bcc l     F .text	0000002a null_ptr_check
1a000d88 l     F .text	00000052 get_calib_data
1a000e66 l     F .text	0000005c set_osr_humidity_settings
1a000ec2 l     F .text	0000005c set_osr_press_temp_settings
1a000f1e l     F .text	0000002e set_osr_settings
1a000f4c l     F .text	0000005c set_filter_standby_settings
1a000fa8 l     F .text	00000026 reload_device_settings
1a000fce l     F .text	0000004c write_power_mode
1a0010e8 l     F .text	0000003c put_device_to_sleep
100000c0 l     O .bss	0000000a uartBuff.14460
00000000 l    df *ABS*	00000000 system.c
100000cc l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_4.c
1a001438 l     F .text	00000064 prvHeapInit
100000d4 l     O .bss	00002000 ucHeap
1a00149c l     F .text	00000058 prvInsertBlockIntoFreeList
100000d0 l     O .bss	00000004 pxEnd
100020d4 l     O .bss	00000004 xBlockAllocatedBit
100020d8 l     O .bss	00000004 xFreeBytesRemaining
100020dc l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100020e0 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a001680 l     F .text	0000001e prvIsQueueFull
1a00169e l     F .text	0000001a prvIsQueueEmpty
1a0016b8 l     F .text	00000076 prvCopyDataToQueue
1a00172e l     F .text	00000024 prvCopyDataFromQueue
1a001752 l     F .text	0000006e prvUnlockQueue
1a001844 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020e8 l     O .bss	00000190 uxIdleTaskStack.10813
10002278 l     O .bss	00000640 uxTimerTaskStack.10820
100028b8 l     O .bss	00000060 xIdleTaskTCB.10812
10002918 l     O .bss	00000060 xTimerTaskTCB.10819
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001eb8 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001ee4 l     F .text	00000090 prvInitialiseNewTask
1a001f74 l     F .text	00000068 prvInitialiseTaskLists
1a001fdc l     F .text	000000ac prvAddNewTaskToReadyList
1a002088 l     F .text	00000038 prvDeleteTCB
1a0020c0 l     F .text	0000004c prvCheckTasksWaitingTermination
1a00210c l     F .text	00000028 prvIdleTask
1a002134 l     F .text	00000098 prvAddCurrentTaskToDelayedList
1000297c l     O .bss	00000004 pxDelayedTaskList
10002980 l     O .bss	00000004 pxOverflowDelayedTaskList
10002984 l     O .bss	0000008c pxReadyTasksLists
10002a10 l     O .bss	00000004 uxCurrentNumberOfTasks
10002a14 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002a18 l     O .bss	00000004 uxPendedTicks
10002a1c l     O .bss	00000004 uxSchedulerSuspended
10002a20 l     O .bss	00000004 uxTaskNumber
10002a24 l     O .bss	00000004 uxTopReadyPriority
10002a28 l     O .bss	00000014 xDelayedTaskList1
10002a3c l     O .bss	00000014 xDelayedTaskList2
10002a50 l     O .bss	00000004 xNextTaskUnblockTime
10002a54 l     O .bss	00000004 xNumOfOverflows
10002a58 l     O .bss	00000014 xPendingReadyList
10002a6c l     O .bss	00000004 xSchedulerRunning
10002a70 l     O .bss	00000014 xSuspendedTaskList
10002a84 l     O .bss	00000014 xTasksWaitingTermination
10002a98 l     O .bss	00000004 xTickCount
10002a9c l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a002914 l     F .text	00000020 prvGetNextExpireTime
1a002934 l     F .text	00000048 prvInsertTimerInActiveList
1a00297c l     F .text	00000070 prvCheckForValidListAndQueue
1a002d30 l     F .text	00000016 prvTimerTask
1a002abc l     F .text	00000078 prvSwitchTimerLists
1a002b34 l     F .text	0000002c prvSampleTimeNow
1a002b60 l     F .text	00000060 prvProcessExpiredTimer
1a002bc0 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002c34 l     F .text	000000fc prvProcessReceivedCommands
10002aa0 l     O .bss	00000004 pxCurrentTimerList
10002aa4 l     O .bss	00000004 pxOverflowTimerList
10002aa8 l     O .bss	000000a0 ucStaticTimerQueueStorage.11914
10002b48 l     O .bss	00000014 xActiveTimerList1
10002b5c l     O .bss	00000014 xActiveTimerList2
10002b70 l     O .bss	00000004 xLastTime.11863
10002b74 l     O .bss	00000050 xStaticTimerQueue.11913
10002bc4 l     O .bss	00000004 xTimerQueue
10002bc8 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002d48 l     F .text	00000040 prvTaskExitError
1a002d88 l     F .text	00000022 prvPortStartFirstTask
1a002db0 l     F .text	0000000e vPortEnableVFP
1a002e10 l       .text	00000000 pxCurrentTCBConst2
1a002f10 l       .text	00000000 pxCurrentTCBConst
10002bcc l     O .bss	00000001 ucMaxSysCallPriority
10002bd0 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 conio.c
10002bd4 l     O .bss	00000004 keyIdx
1a00696c l     O .text	00000004 keys
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 supporting_functions.c
00000000 l    df *ABS*	00000000 board.c
1a003178 l     F .text	00000044 Board_LED_Init
1a0031bc l     F .text	00000040 Board_TEC_Init
1a0031fc l     F .text	00000040 Board_GPIO_Init
1a00323c l     F .text	00000030 Board_ADC_Init
1a00326c l     F .text	00000038 Board_SPI_Init
1a0032a4 l     F .text	00000024 Board_I2C_Init
1a006978 l     O .text	00000008 GpioButtons
1a006980 l     O .text	0000000c GpioLeds
1a00698c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0069a4 l     O .text	00000004 InitClkStates
1a0069a8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003418 l     F .text	0000002c Chip_UART_GetIndex
1a006a1c l     O .text	00000008 UART_BClock
1a006a24 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0035b4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0035c8 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a00367c l     F .text	000000a0 pll_calc_divs
1a00371c l     F .text	0000010c pll_get_frac
1a003828 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003a9c l     F .text	00000022 Chip_Clock_GetDivRate
10002bdc l     O .bss	00000008 audio_usb_pll_freq
1a006a38 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a006aa4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000008 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0040f4 l     F .text	00000014 Chip_SSP_GetClockIndex
1a004108 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000040 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a006aec l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a0042e0 l     F .text	00000030 i2cHardwareInit
1a004310 l     F .text	00000040 i2cHardwareRead
1a004350 l     F .text	00000040 i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0043e0 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002be4 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_convert.c
1a006c20 l     O .text	00000058 rounders
00000000 l    df *ABS*	00000000 sapi_dht11.c
1a0048e0 l     F .text	00000024 dht11_TimeOutReset
1a004904 l     F .text	00000020 dht11_TimeOutCheck
1a004924 l     F .text	000000a0 dht11_ProcessData
1a0049c4 l     F .text	00000014 dht11_GPIO_High
1a0049d8 l     F .text	00000020 dht11_GPIO_Low
1a0049f8 l     F .text	00000014 dht11_GPIO_Read
1a004a0c l     F .text	000000dc dht11_StartRead
10002be8 l     O .bss	00000004 dht11Pin
10002bec l     O .bss	00000005 dht11_byte
10002bf4 l     O .bss	00000148 dht11_ticks_array
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0059ac l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a006164 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
10000054 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a006d14 l       .init_array	00000000 __init_array_end
1a006d10 l       .bss_RAM5	00000000 __preinit_array_end
1a006d10 l       .init_array	00000000 __init_array_start
1a006d10 l       .bss_RAM5	00000000 __preinit_array_start
1a0038c0 g     F .text	0000001c Chip_Clock_GetDividerSource
1a001384 g     F .text	00000012 _isatty_r
1a003d1c g     F .text	0000000e Chip_I2CM_Xfer
1a001080 g     F .text	00000068 bme280Init
1a0053d4 g     F .text	00000012 .hidden __aeabi_dcmple
1a005d90 g     F .text	000000dc _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a005310 g     F .text	0000007a .hidden __cmpdf2
1a004390 g     F .text	0000000e i2cInit
1a001396 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a005310 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
10002d90 g     O .bss	00000004 dht11_timeout
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002e7c g     F .text	0000002c vPortExitCritical
10002d94 g     O .bss	00000004 dht11_timeout_max
1a004e80 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a005d60 g     F .text	00000030 printf
1a00335e g     F .text	00000008 __stdio_init
10002d98 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a005ed6 g     F .text	00000024 __sseek
1a005a5c g     F .text	00000070 __sinit
10000004 g     O .data	00000004 xKeyPressesStopApplication
1a005f04 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001d44 g     F .text	00000052 vQueueWaitForMessageRestricted
1a003ec8 g     F .text	00000120 handleMasterXferState
1a005a00 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a00366e g     F .text	0000000c Chip_ADC_SetResolution
1a006158 g     F .text	0000000c __malloc_unlock
1a002f14 g     F .text	0000002c SysTick_Handler
1a003498 g     F .text	00000040 Chip_UART_SetBaud
10002d99 g     O .bss	00000001 __lock___arc4random_mutex
1a0012e2  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a003300 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a002eb0 g     F .text	00000064 PendSV_Handler
1a001ac8 g     F .text	000000ce xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a006d1c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a005300 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a00439e g     F .text	00000028 i2cRead
10002978 g     O .bss	00000004 pxCurrentTCB
1a00137a g     F .text	0000000a _fstat_r
53ff65aa g       *ABS*	00000000 __valid_user_code_checksum
1a006d1c g       .ARM.exidx	00000000 _etext
1a00539c g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a002798 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a003b3e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002f78 g     F .text	00000110 xPortStartScheduler
1a002338 g     F .text	00000024 vTaskEndScheduler
1a005be2 g     F .text	0000001c memcpy
1a0026a4 g     F .text	00000030 vTaskPlaceOnEventList
1a00538c g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0059f4 g     F .text	0000000c _cleanup_r
1a004e08 g     F .text	00000022 .hidden __floatsidf
1a002f40  w    F .text	00000038 vPortSetupTimerInterrupt
1a004074 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a005308 g     F .text	00000082 .hidden __ltdf2
1a005500 g     F .text	00000000 .hidden __aeabi_uldivmod
10002da4 g       .noinit	00000000 _noinit
1a005e6c g     F .text	00000010 puts
1a001610 g     F .text	00000070 vPortFree
1a0042be g     F .text	00000016 uartWriteString
10002d88 g     O .bss	00000004 SystemCoreClock
1a000cf6 g     F .text	00000056 bme280I2cWrite
1a003444 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a003088 g     F .text	0000005c vPortValidateInterruptPriority
1a004af8 g     F .text	0000006c dht11Read
1a0011de g     F .text	00000036 bme280ParseSensorData
1a000180  w    F .text	00000002 UsageFault_Handler
1a003bbc g     F .text	0000004c Chip_Clock_GetRate
1a001db2 g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0033a0 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a004de8 g     F .text	0000001e .hidden __aeabi_ui2d
1a004044 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a005530 g     F .text	000002d0 .hidden __udivmoddi4
1a004b64 g     F .text	00000000 .hidden __aeabi_drsub
1a001418 g     F .text	00000020 _sbrk_r
1a006974 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0013a0 g     F .text	0000004e _read_r
1a001dac g     F .text	00000006 vListInitialiseItem
1a0053c0 g     F .text	00000012 .hidden __aeabi_dcmplt
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a001b98 g     F .text	0000015c xQueueReceive
10002d48 g     O .bss	00000040 xQueueRegistry
1a005988 g     F .text	00000024 fflush
1a004e2c g     F .text	00000042 .hidden __extendsfdf2
1a005130 g     F .text	000001d0 .hidden __aeabi_ddiv
1a001e3c g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a004b70 g     F .text	00000276 .hidden __adddf3
1a001124 g     F .text	00000074 bme280SetSensorSettings
1a006d14 g       .ARM.exidx	00000000 __exidx_start
10002d9a g     O .bss	00000001 __lock___env_recursive_mutex
1a004edc g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10002d9b g     O .bss	00000001 __lock___sinit_recursive_mutex
1a006cd8 g     O .text	00000004 _global_impure_ptr
1a005b94 g     F .text	00000048 __libc_init_array
1a000bf8 g     F .text	000000c8 bme280PrintSensorData
1a001214 g     F .text	00000072 bme280CompensateData
1a004de8 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0014f4 g     F .text	0000011c pvPortMalloc
1a00331c g     F .text	00000030 Board_Init
1a00136e  w    F .text	00000002 _init
1a002e14 g     F .text	00000024 vPortEndScheduler
1a001d96 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a005460 g     F .text	0000009e .hidden __aeabi_d2f
1a00236c g     F .text	0000000c xTaskGetTickCount
1a001948 g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002da4 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a0012e4 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a003d2a g     F .text	00000024 Chip_I2CM_XferBlocking
1a004768 g     F .text	00000178 floatToString
1a00400c g     F .text	00000038 Chip_I2C_SetClockRate
1a005410 g     F .text	0000004e .hidden __fixdfsi
1a002860 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a003874 g     F .text	0000004c Chip_Clock_EnableCrystal
10002d9c g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00270c g     F .text	0000008c xTaskRemoveFromEventList
1a001e80  w    F .text	0000001c vApplicationMallocFailedHook
1a004b70 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a005308 g     F .text	00000082 .hidden __ledf2
1a004e70 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a006c78 g     O .text	00000020 __sf_fake_stderr
1a003fe8 g     F .text	00000024 Chip_I2C_Init
1a005be0 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a003a30 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a006b34 g     O .text	000000e6 gpioPinsInit
1a001e54  w    F .text	0000002c vAssertCalled
1a0042a4 g     F .text	0000001a uartWriteByte
1a004120 g     F .text	00000012 Chip_SSP_SetClockRate
1a0053fc g     F .text	00000012 .hidden __aeabi_dcmpgt
1a004692 g     F .text	00000016 gpioToggle
1a006192 g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a003130 g     F .text	00000048 vPrintString
1a005a2c g     F .text	0000000c __sfp_lock_acquire
1a006720 g     F .text	00000000 memchr
1a0027b0 g     F .text	00000084 xTaskCheckForTimeOut
1a005c10 g     F .text	0000009c _free_r
1a003b18 g     F .text	00000026 Chip_Clock_GetBaseClock
1a000cc0 g     F .text	00000008 bme280Delay_ms
1a0053e8 g     F .text	00000012 .hidden __aeabi_dcmpge
1a004ae8 g     F .text	00000010 dht11Init
100000b4 g       .bss	00000000 _bss
1a00044c g     F .text	0000006c am2301Task
1a00363c g     F .text	00000032 Chip_ADC_SetSampleRate
1a004b6c g     F .text	0000027a .hidden __aeabi_dsub
10002bd8 g     O .bss	00000004 freeRtosInterruptCallback
1a00235c g     F .text	00000010 vTaskSuspendAll
1a004e70 g     F .text	0000006a .hidden __floatundidf
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a004132 g     F .text	0000003e Chip_SSP_SetBitRate
1a001dfc g     F .text	00000026 uxListRemove
1a003d4e g     F .text	00000002 Chip_GPIO_Init
1a000560 g     F .text	00000038 vSenderTask2
1a0069a0 g     O .text	00000004 OscRateIn
1a004228 g     F .text	0000007c uartInit
1a0021cc g     F .text	00000072 xTaskCreateStatic
10002da4 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0025d8 g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a001866 g     F .text	00000092 xQueueGenericCreateStatic
1a0026d4 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
10002d44 g     O .bss	00000004 xQueue
1a001370 g     F .text	0000000a _close_r
1a004e08 g     F .text	00000022 .hidden __aeabi_i2d
1a004414 g     F .text	000001ac gpioInit
1a001e24 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a002a50 g     F .text	0000006c xTimerGenericCommand
1a005fa8 g     F .text	000000dc __swsetup_r
1a001e9c  w    F .text	0000001c vApplicationStackOverflowHook
1a005800  w    F .text	00000002 .hidden __aeabi_ldiv0
1a005130 g     F .text	000001d0 .hidden __divdf3
1a005acc g     F .text	0000008c __sfp
1a005a50 g     F .text	0000000c __sinit_lock_release
1a0030e4 g     F .text	0000002c _kbhit
1a004edc g     F .text	00000254 .hidden __muldf3
1a005e7c g     F .text	00000022 __sread
1a0046a8 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a00614c g     F .text	0000000c __malloc_lock
1a0032ec g     F .text	00000014 Board_UARTPutChar
1a0040a4 g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a005910 g     F .text	00000078 _fflush_r
1a006c98 g     O .text	00000020 __sf_fake_stdin
1a0038dc g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a005bde g     F .text	00000002 __retarget_lock_acquire_recursive
1a005bfe g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0004b8 g     F .text	000000a8 main
1a005bdc g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001dc8 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002df0 g     F .text	00000024 SVC_Handler
1a005efa g     F .text	00000008 __sclose
1a0029ec g     F .text	00000064 xTimerCreateTimerTask
1a005460 g     F .text	0000009e .hidden __truncdfsf2
1a005cac g     F .text	000000b4 _malloc_r
1a004e80 g     F .text	0000005a .hidden __aeabi_l2d
1a0041fc g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a003b4c g     F .text	0000003c Chip_Clock_EnableOpts
1a003356 g     F .text	00000008 __stdio_getchar
1a000cc8 g     F .text	0000002e bme280I2cRead
1a0018f8 g     F .text	0000004e xQueueGenericCreate
1a0038f8 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000dda g     F .text	0000008c bme280SetRegs
1a0039b0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0041a8 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a00101a g     F .text	0000002c bme280GetSensorMode
1a004730 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a005310 g     F .text	0000007a .hidden __nedf2
1a0045c0 g     F .text	0000006a gpioWrite
1a00136c  w    F .text	00000002 _fini
1a005d60 g     F .text	00000030 iprintf
1a002490 g     F .text	000000fc xTaskResumeAll
1a0022a4 g     F .text	00000094 vTaskStartScheduler
1a0035fc g     F .text	00000040 Chip_ADC_Init
10002d8c g     O .bss	00000004 g_pUsbApi
1a003368 g     F .text	00000038 Board_SetupMuxing
1a0034d8 g     F .text	000000dc Chip_UART_SetBaudFDR
1a0042d4 g     F .text	0000000a tickRead
1a0013ee g     F .text	00000028 _write_r
10000048 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a006408 g     F .text	000000ea _printf_common
10000050 g     O .data	00000004 _impure_ptr
1a005804 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000d4c g     F .text	0000003c bme280GetRegs
1a004214 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a003c1c g     F .text	00000100 Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
1a002834 g     F .text	0000000c vTaskMissedYield
10002da4 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000374 g     F .text	000000d8 bme280Task
1a004170 g     F .text	00000038 Chip_SSP_Init
1a0040bc g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a001cf4 g     F .text	00000026 uxQueueMessagesWaiting
1a001d1c g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a002378 g     F .text	00000118 xTaskIncrementTick
1a001046 g     F .text	0000003a bme280SoftReset
1a006084 g     F .text	00000048 __swhatbuf_r
1a003110 g     F .text	00000020 DAC_IRQHandler
1a0043c6 g     F .text	00000018 i2cWrite
1a0032c8 g     F .text	00000024 Board_Debug_Init
1a0053ac g     F .text	00000012 .hidden __aeabi_dcmpeq
1a00334c g     F .text	0000000a __stdio_putchar
1a0017c0 g     F .text	00000084 xQueueGenericReset
100000b4 g       .data	00000000 _edata
1a003ea8 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10002d9d g     O .bss	00000001 __lock___at_quick_exit_mutex
1a00223e g     F .text	00000066 xTaskCreate
1a003d50 g     F .text	00000158 Chip_SetupCoreClock
1a005e9e g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a0061b8 g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a005b58 g     F .text	0000003c _fwalk_reent
1a003c08 g     F .text	00000014 SystemCoreClockUpdate
1a005410 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a00258c g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a005a38 g     F .text	0000000c __sfp_lock_release
1a006cb8 g     O .text	00000020 __sf_fake_stdout
1a002840 g     F .text	00000020 xTaskGetSchedulerState
1a005800  w    F .text	00000002 .hidden __aeabi_idiv0
1a000300 g     F .text	00000074 vReceiverTask
1a00017e  w    F .text	00000002 BusFault_Handler
10002d9e g     O .bss	00000001 __lock___dd_hash_mutex
1a0060cc g     F .text	00000080 __smakebuf_r
10002d9f g     O .bss	00000001 __lock___tz_mutex
1a002dc4 g     F .text	0000002c pxPortInitialiseStack
1a0064f4 g     F .text	00000228 _printf_i
1a003b88 g     F .text	00000034 Chip_Clock_Enable
1a00539c g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a005300 g     F .text	0000008a .hidden __gedf2
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002d40 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00462a g     F .text	00000068 gpioRead
1a004e2c g     F .text	00000042 .hidden __aeabi_f2d
1a0046c4 g     F .text	0000006c boardInit
1a002e38 g     F .text	00000044 vPortEnterCritical
10002d3c g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a004b6c g     F .text	0000027a .hidden __subdf3
1a0061b8 g     F .text	00000250 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001286 g     F .text	0000005c bme280GetSensorData
1a003ac0 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0041e0 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10002da0 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a001198 g     F .text	00000046 bme280SetSensorMode
1a005a44 g     F .text	0000000c __sinit_lock_acquire
1a00340c g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 e5 12 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a aa 65 ff 53     }............e.S
	...
1a00002c:	f1 2d 00 1a 85 01 00 1a 00 00 00 00 b1 2e 00 1a     .-..............
1a00003c:	15 2f 00 1a                                         ./..

1a000040 <g_pfnVendorVectors>:
1a000040:	11 31 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .1..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	a9 46 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .F..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a006d1c 	.word	0x1a006d1c
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000b4 	.word	0x000000b4
1a000120:	1a006d1c 	.word	0x1a006d1c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a006d1c 	.word	0x1a006d1c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a006d1c 	.word	0x1a006d1c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a006d1c 	.word	0x1a006d1c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000b4 	.word	0x100000b4
1a000154:	00002cf0 	.word	0x00002cf0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <vReceiverTask>:
#include "sma.h"

void vReceiverTask( void *pvParameters )
{
1a000300:	b510      	push	{r4, lr}
1a000302:	b082      	sub	sp, #8
1a000304:	e006      	b.n	1a000314 <vReceiverTask+0x14>
   /* This task is also defined within an infinite loop. */
   for( ;; ) {
      /* As this task unblocks immediately that data is written to the queue this
      call should always find the queue empty. */
      if( uxQueueMessagesWaiting( xQueue ) != 0 ) {
         vPrintString( "Queue should have been empty!\r\n" );
1a000306:	4815      	ldr	r0, [pc, #84]	; (1a00035c <vReceiverTask+0x5c>)
1a000308:	f002 ff12 	bl	1a003130 <vPrintString>
1a00030c:	e008      	b.n	1a000320 <vReceiverTask+0x20>

      } else {
         /* We did not receive anything from the queue even after waiting for 100ms.
         This must be an error as the sending tasks are free running and will be
         continuously writing to the queue. */
         vPrintString( "Could not receive from the queue.\r\n" );
1a00030e:	4814      	ldr	r0, [pc, #80]	; (1a000360 <vReceiverTask+0x60>)
1a000310:	f002 ff0e 	bl	1a003130 <vPrintString>
      if( uxQueueMessagesWaiting( xQueue ) != 0 ) {
1a000314:	4b13      	ldr	r3, [pc, #76]	; (1a000364 <vReceiverTask+0x64>)
1a000316:	6818      	ldr	r0, [r3, #0]
1a000318:	f001 fcec 	bl	1a001cf4 <uxQueueMessagesWaiting>
1a00031c:	2800      	cmp	r0, #0
1a00031e:	d1f2      	bne.n	1a000306 <vReceiverTask+0x6>
      xStatus = xQueueReceive( xQueue, &lReceivedValue, xTicksToWait );
1a000320:	f640 0202 	movw	r2, #2050	; 0x802
1a000324:	a901      	add	r1, sp, #4
1a000326:	4b0f      	ldr	r3, [pc, #60]	; (1a000364 <vReceiverTask+0x64>)
1a000328:	6818      	ldr	r0, [r3, #0]
1a00032a:	f001 fc35 	bl	1a001b98 <xQueueReceive>
      if( xStatus == pdPASS ) {
1a00032e:	2801      	cmp	r0, #1
1a000330:	d1ed      	bne.n	1a00030e <vReceiverTask+0xe>
    	  uartWriteString( UART_USB, "Temperatura: " );
1a000332:	490d      	ldr	r1, [pc, #52]	; (1a000368 <vReceiverTask+0x68>)
1a000334:	2003      	movs	r0, #3
1a000336:	f003 ffc2 	bl	1a0042be <uartWriteString>
    	  floatToString( lReceivedValue, uartBuff, 1 );
1a00033a:	4c0c      	ldr	r4, [pc, #48]	; (1a00036c <vReceiverTask+0x6c>)
1a00033c:	2101      	movs	r1, #1
1a00033e:	4620      	mov	r0, r4
1a000340:	ed9d 0a01 	vldr	s0, [sp, #4]
1a000344:	f004 fa10 	bl	1a004768 <floatToString>
    	  uartWriteString( UART_USB, uartBuff);
1a000348:	4621      	mov	r1, r4
1a00034a:	2003      	movs	r0, #3
1a00034c:	f003 ffb7 	bl	1a0042be <uartWriteString>
    	  uartWriteString( UART_USB, " grados C\r\n" );
1a000350:	4907      	ldr	r1, [pc, #28]	; (1a000370 <vReceiverTask+0x70>)
1a000352:	2003      	movs	r0, #3
1a000354:	f003 ffb3 	bl	1a0042be <uartWriteString>
1a000358:	e7dc      	b.n	1a000314 <vReceiverTask+0x14>
1a00035a:	bf00      	nop
1a00035c:	1a0067c0 	.word	0x1a0067c0
1a000360:	1a0067fc 	.word	0x1a0067fc
1a000364:	10002d44 	.word	0x10002d44
1a000368:	1a0067e0 	.word	0x1a0067e0
1a00036c:	100000b4 	.word	0x100000b4
1a000370:	1a0067f0 	.word	0x1a0067f0

1a000374 <bme280Task>:
/*=====[Inclusions of function dependencies]=================================*/
#include "sma.h"
#include "sapi_bme280.h" // tested on GY-BME/P280
#include "sapi.h"		// <= sAPI header

void bme280Task(void *pvParameters) {
1a000374:	b500      	push	{lr}
1a000376:	b099      	sub	sp, #100	; 0x64
	struct bme280_dev dev;
	int8_t rslt = BME280_OK;
	uint8_t settings_sel;
	struct bme280_data comp_data;

	dev.dev_id = BME280_I2C_ADDR_PRIM;
1a000378:	2376      	movs	r3, #118	; 0x76
1a00037a:	f88d 301d 	strb.w	r3, [sp, #29]
	dev.intf = BME280_I2C_INTF;
1a00037e:	2301      	movs	r3, #1
1a000380:	f88d 301e 	strb.w	r3, [sp, #30]
	dev.read = bme280I2cRead;
1a000384:	4b2b      	ldr	r3, [pc, #172]	; (1a000434 <bme280Task+0xc0>)
1a000386:	9308      	str	r3, [sp, #32]
	dev.write = bme280I2cWrite;
1a000388:	4b2b      	ldr	r3, [pc, #172]	; (1a000438 <bme280Task+0xc4>)
1a00038a:	9309      	str	r3, [sp, #36]	; 0x24
	dev.delay_ms = bme280Delay_ms;
1a00038c:	4b2b      	ldr	r3, [pc, #172]	; (1a00043c <bme280Task+0xc8>)
1a00038e:	930a      	str	r3, [sp, #40]	; 0x28

	// ----- bme sensor init -----------------------------------
	rslt = bme280Init(&dev);
1a000390:	a807      	add	r0, sp, #28
1a000392:	f000 fe75 	bl	1a001080 <bme280Init>
	if (rslt != BME280_OK) {
1a000396:	b318      	cbz	r0, 1a0003e0 <bme280Task+0x6c>
		gpioWrite(LED3, ON);
1a000398:	2101      	movs	r1, #1
1a00039a:	202d      	movs	r0, #45	; 0x2d
1a00039c:	f004 f910 	bl	1a0045c0 <gpioWrite>
		vTaskDelay(500 / portTICK_RATE_MS);
1a0003a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a0003a4:	f002 f8f2 	bl	1a00258c <vTaskDelay>
		gpioWrite(LED3, OFF);
1a0003a8:	2100      	movs	r1, #0
1a0003aa:	202d      	movs	r0, #45	; 0x2d
1a0003ac:	f004 f908 	bl	1a0045c0 <gpioWrite>
		gpioWrite(LED3, OFF);
	}

	// ----- bme280 sensor setup---------------------------------
	/* Recommended mode operation: Indoor navigation */
	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
1a0003b0:	2301      	movs	r3, #1
1a0003b2:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
	dev.settings.osr_p = BME280_OVERSAMPLING_1X;
1a0003b6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
	dev.settings.osr_t = BME280_OVERSAMPLING_16X;
1a0003ba:	2205      	movs	r2, #5
1a0003bc:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
	dev.settings.filter = BME280_FILTER_COEFF_16;
1a0003c0:	2204      	movs	r2, #4
1a0003c2:	f88d 2057 	strb.w	r2, [sp, #87]	; 0x57
	dev.settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
1a0003c6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	settings_sel |= BME280_OSR_TEMP_SEL;
	settings_sel |= BME280_OSR_HUM_SEL;
	settings_sel |= BME280_STANDBY_SEL;
	settings_sel |= BME280_FILTER_SEL;

	rslt = bme280SetSensorSettings(settings_sel, &dev);
1a0003ca:	a907      	add	r1, sp, #28
1a0003cc:	201f      	movs	r0, #31
1a0003ce:	f000 fea9 	bl	1a001124 <bme280SetSensorSettings>
	rslt = bme280SetSensorMode(BME280_NORMAL_MODE, &dev);
1a0003d2:	a907      	add	r1, sp, #28
1a0003d4:	2003      	movs	r0, #3
1a0003d6:	f000 fedf 	bl	1a001198 <bme280SetSensorMode>

	//real32_t dato = 5000;

	lValueToSend = 5000;
1a0003da:	4b19      	ldr	r3, [pc, #100]	; (1a000440 <bme280Task+0xcc>)
1a0003dc:	9317      	str	r3, [sp, #92]	; 0x5c
1a0003de:	e00f      	b.n	1a000400 <bme280Task+0x8c>
		gpioWrite(LED3, ON);
1a0003e0:	2101      	movs	r1, #1
1a0003e2:	202d      	movs	r0, #45	; 0x2d
1a0003e4:	f004 f8ec 	bl	1a0045c0 <gpioWrite>
		vTaskDelay(2000 / portTICK_RATE_MS);
1a0003e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
1a0003ec:	f002 f8ce 	bl	1a00258c <vTaskDelay>
		gpioWrite(LED3, OFF);
1a0003f0:	2100      	movs	r1, #0
1a0003f2:	202d      	movs	r0, #45	; 0x2d
1a0003f4:	f004 f8e4 	bl	1a0045c0 <gpioWrite>
1a0003f8:	e7da      	b.n	1a0003b0 <bme280Task+0x3c>
		xStatus = xQueueSendToBack(xQueue, &lValueToSend, 0);

		if (xStatus != pdPASS) {
			/* We could not write to the queue because it was full � this must
			 be an error as the queue should never contain more than one item! */
			vPrintString("Could not send to the queue.\r\n");
1a0003fa:	4812      	ldr	r0, [pc, #72]	; (1a000444 <bme280Task+0xd0>)
1a0003fc:	f002 fe98 	bl	1a003130 <vPrintString>
		dev.delay_ms(2750);
1a000400:	f640 20be 	movw	r0, #2750	; 0xabe
1a000404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a000406:	4798      	blx	r3
		rslt = bme280GetSensorData(BME280_ALL, &comp_data, &dev);
1a000408:	aa07      	add	r2, sp, #28
1a00040a:	4669      	mov	r1, sp
1a00040c:	2007      	movs	r0, #7
1a00040e:	f000 ff3a 	bl	1a001286 <bme280GetSensorData>
		bme280PrintSensorData(&comp_data);
1a000412:	4668      	mov	r0, sp
1a000414:	f000 fbf0 	bl	1a000bf8 <bme280PrintSensorData>
		gpioToggle(LED3);
1a000418:	202d      	movs	r0, #45	; 0x2d
1a00041a:	f004 f93a 	bl	1a004692 <gpioToggle>
		xStatus = xQueueSendToBack(xQueue, &lValueToSend, 0);
1a00041e:	2300      	movs	r3, #0
1a000420:	461a      	mov	r2, r3
1a000422:	a917      	add	r1, sp, #92	; 0x5c
1a000424:	4808      	ldr	r0, [pc, #32]	; (1a000448 <bme280Task+0xd4>)
1a000426:	6800      	ldr	r0, [r0, #0]
1a000428:	f001 fa8e 	bl	1a001948 <xQueueGenericSend>
		if (xStatus != pdPASS) {
1a00042c:	2801      	cmp	r0, #1
1a00042e:	d0e7      	beq.n	1a000400 <bme280Task+0x8c>
1a000430:	e7e3      	b.n	1a0003fa <bme280Task+0x86>
1a000432:	bf00      	nop
1a000434:	1a000cc9 	.word	0x1a000cc9
1a000438:	1a000cf7 	.word	0x1a000cf7
1a00043c:	1a000cc1 	.word	0x1a000cc1
1a000440:	459c4000 	.word	0x459c4000
1a000444:	1a006820 	.word	0x1a006820
1a000448:	10002d44 	.word	0x10002d44

1a00044c <am2301Task>:
#include "sma.h"

void am2301Task( void *pvParameters )
{
1a00044c:	b500      	push	{lr}
1a00044e:	b085      	sub	sp, #20
   real32_t lValueToSend;
   BaseType_t xStatus;

   dht11Init( GPIO1 ); // Inicializo el sensor DHT11
1a000450:	200f      	movs	r0, #15
1a000452:	f004 fb49 	bl	1a004ae8 <dht11Init>

   real32_t humidity = 0, temperature = 0;
1a000456:	2300      	movs	r3, #0
1a000458:	9302      	str	r3, [sp, #8]
1a00045a:	9301      	str	r3, [sp, #4]
1a00045c:	e006      	b.n	1a00046c <am2301Task+0x20>
	      xStatus = xQueueSendToBack( xQueue, &lValueToSend, 0 );

	      if( xStatus != pdPASS ) {
	    	  /* We could not write to the queue because it was full � this must
         	 be an error as the queue should never contain more than one item! */
	    	  vPrintString( "Could not send to the queue.\r\n" );
1a00045e:	4814      	ldr	r0, [pc, #80]	; (1a0004b0 <am2301Task+0x64>)
1a000460:	f002 fe66 	bl	1a003130 <vPrintString>
	   }
	   else {
    	  gpioWrite( LEDG, OFF );
    	  gpioWrite( LEDR, ON );
	   }
	   vTaskDelay( 1000 / portTICK_RATE_MS );
1a000464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000468:	f002 f890 	bl	1a00258c <vTaskDelay>
	   if( dht11Read(&humidity, &temperature) ) {
1a00046c:	a901      	add	r1, sp, #4
1a00046e:	a802      	add	r0, sp, #8
1a000470:	f004 fb42 	bl	1a004af8 <dht11Read>
1a000474:	b198      	cbz	r0, 1a00049e <am2301Task+0x52>
	   	   gpioWrite( LEDG, ON );
1a000476:	2101      	movs	r1, #1
1a000478:	2029      	movs	r0, #41	; 0x29
1a00047a:	f004 f8a1 	bl	1a0045c0 <gpioWrite>
	   	   gpioWrite( LEDR, OFF );
1a00047e:	2100      	movs	r1, #0
1a000480:	2028      	movs	r0, #40	; 0x28
1a000482:	f004 f89d 	bl	1a0045c0 <gpioWrite>
	      lValueToSend = temperature;
1a000486:	9b01      	ldr	r3, [sp, #4]
1a000488:	9303      	str	r3, [sp, #12]
	      xStatus = xQueueSendToBack( xQueue, &lValueToSend, 0 );
1a00048a:	2300      	movs	r3, #0
1a00048c:	461a      	mov	r2, r3
1a00048e:	a903      	add	r1, sp, #12
1a000490:	4808      	ldr	r0, [pc, #32]	; (1a0004b4 <am2301Task+0x68>)
1a000492:	6800      	ldr	r0, [r0, #0]
1a000494:	f001 fa58 	bl	1a001948 <xQueueGenericSend>
	      if( xStatus != pdPASS ) {
1a000498:	2801      	cmp	r0, #1
1a00049a:	d1e0      	bne.n	1a00045e <am2301Task+0x12>
1a00049c:	e7e2      	b.n	1a000464 <am2301Task+0x18>
    	  gpioWrite( LEDG, OFF );
1a00049e:	2100      	movs	r1, #0
1a0004a0:	2029      	movs	r0, #41	; 0x29
1a0004a2:	f004 f88d 	bl	1a0045c0 <gpioWrite>
    	  gpioWrite( LEDR, ON );
1a0004a6:	2101      	movs	r1, #1
1a0004a8:	2028      	movs	r0, #40	; 0x28
1a0004aa:	f004 f889 	bl	1a0045c0 <gpioWrite>
1a0004ae:	e7d9      	b.n	1a000464 <am2301Task+0x18>
1a0004b0:	1a006820 	.word	0x1a006820
1a0004b4:	10002d44 	.word	0x10002d44

1a0004b8 <main>:
#include "sapi.h"
#include "sma.h"

/*-----------------------------------------------------------*/
int main( void )
{
1a0004b8:	b500      	push	{lr}
1a0004ba:	b083      	sub	sp, #12
   /* The queue is created to hold a maximum of 5 long values. */
   xQueue = xQueueCreate( 5, sizeof( real32_t ) );
1a0004bc:	2200      	movs	r2, #0
1a0004be:	2104      	movs	r1, #4
1a0004c0:	2005      	movs	r0, #5
1a0004c2:	f001 fa19 	bl	1a0018f8 <xQueueGenericCreate>
1a0004c6:	4c1c      	ldr	r4, [pc, #112]	; (1a000538 <main+0x80>)
1a0004c8:	6020      	str	r0, [r4, #0]

   boardConfig(); // Inicializar y configurar la plataforma
1a0004ca:	f004 f8fb 	bl	1a0046c4 <boardInit>
   uartConfig( UART_USB, 115200 ); // Inicializar periferico UART_USB
1a0004ce:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0004d2:	2003      	movs	r0, #3
1a0004d4:	f003 fea8 	bl	1a004228 <uartInit>
   i2cInit(I2C0, BME280_I2C_RATE);
1a0004d8:	4918      	ldr	r1, [pc, #96]	; (1a00053c <main+0x84>)
1a0004da:	2000      	movs	r0, #0
1a0004dc:	f003 ff58 	bl	1a004390 <i2cInit>

   if( xQueue != NULL ) {
1a0004e0:	6823      	ldr	r3, [r4, #0]
1a0004e2:	b33b      	cbz	r3, 1a000534 <main+0x7c>

	   xTaskCreate( bme280Task, (const char *) "bme280",
1a0004e4:	2400      	movs	r4, #0
1a0004e6:	9401      	str	r4, [sp, #4]
1a0004e8:	2502      	movs	r5, #2
1a0004ea:	9500      	str	r5, [sp, #0]
1a0004ec:	f640 23be 	movw	r3, #2750	; 0xabe
1a0004f0:	22c8      	movs	r2, #200	; 0xc8
1a0004f2:	4913      	ldr	r1, [pc, #76]	; (1a000540 <main+0x88>)
1a0004f4:	4813      	ldr	r0, [pc, #76]	; (1a000544 <main+0x8c>)
1a0004f6:	f001 fea2 	bl	1a00223e <xTaskCreate>
			   configMINIMAL_STACK_SIZE * 2, ( void * ) 2750,
				  tskIDLE_PRIORITY + 2, NULL );

	  xTaskCreate( am2301Task, (const char *) "am2301",
1a0004fa:	9401      	str	r4, [sp, #4]
1a0004fc:	9500      	str	r5, [sp, #0]
1a0004fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000502:	22c8      	movs	r2, #200	; 0xc8
1a000504:	4910      	ldr	r1, [pc, #64]	; (1a000548 <main+0x90>)
1a000506:	4811      	ldr	r0, [pc, #68]	; (1a00054c <main+0x94>)
1a000508:	f001 fe99 	bl	1a00223e <xTaskCreate>
    		  configMINIMAL_STACK_SIZE * 2, ( void * ) 1000,
			  tskIDLE_PRIORITY + 2, NULL );

      xTaskCreate( vSenderTask2, (const char *) "Sender2",
1a00050c:	9401      	str	r4, [sp, #4]
1a00050e:	9500      	str	r5, [sp, #0]
1a000510:	f241 3388 	movw	r3, #5000	; 0x1388
1a000514:	22c8      	movs	r2, #200	; 0xc8
1a000516:	490e      	ldr	r1, [pc, #56]	; (1a000550 <main+0x98>)
1a000518:	480e      	ldr	r0, [pc, #56]	; (1a000554 <main+0x9c>)
1a00051a:	f001 fe90 	bl	1a00223e <xTaskCreate>
    		  configMINIMAL_STACK_SIZE * 2, ( void * ) 5000,
			  tskIDLE_PRIORITY + 2, NULL );

      /* Create the task that will read from the queue.  The task is created with
      priority 2, so above the priority of the sender tasks. */
      xTaskCreate( vReceiverTask,(const char *) "Receiver",
1a00051e:	9401      	str	r4, [sp, #4]
1a000520:	2303      	movs	r3, #3
1a000522:	9300      	str	r3, [sp, #0]
1a000524:	4623      	mov	r3, r4
1a000526:	22c8      	movs	r2, #200	; 0xc8
1a000528:	490b      	ldr	r1, [pc, #44]	; (1a000558 <main+0xa0>)
1a00052a:	480c      	ldr	r0, [pc, #48]	; (1a00055c <main+0xa4>)
1a00052c:	f001 fe87 	bl	1a00223e <xTaskCreate>
    		  configMINIMAL_STACK_SIZE * 2, NULL, tskIDLE_PRIORITY + 3, NULL );

      /* Start the scheduler so the created tasks start executing. */
      vTaskStartScheduler();
1a000530:	f001 feb8 	bl	1a0022a4 <vTaskStartScheduler>

   /* The following line should never be reached because vTaskStartScheduler()
   will only return if there was not enough FreeRTOS heap memory available to
   create the Idle and (if configured) Timer tasks.  Heap management, and
   techniques for trapping heap exhaustion, are described in the book text. */
   for( ;; );
1a000534:	e7fe      	b.n	1a000534 <main+0x7c>
1a000536:	bf00      	nop
1a000538:	10002d44 	.word	0x10002d44
1a00053c:	000186a0 	.word	0x000186a0
1a000540:	1a006840 	.word	0x1a006840
1a000544:	1a000375 	.word	0x1a000375
1a000548:	1a006848 	.word	0x1a006848
1a00054c:	1a00044d 	.word	0x1a00044d
1a000550:	1a006850 	.word	0x1a006850
1a000554:	1a000561 	.word	0x1a000561
1a000558:	1a006858 	.word	0x1a006858
1a00055c:	1a000301 	.word	0x1a000301

1a000560 <vSenderTask2>:
#include "sma.h"

void vSenderTask2( void *pvParameters )
{
1a000560:	b510      	push	{r4, lr}
1a000562:	b082      	sub	sp, #8
1a000564:	4604      	mov	r4, r0
   each instance can use a different value.  Cast the parameter to the required
   type. */

   real32_t dato = 5000;

   lValueToSend = dato;
1a000566:	4b09      	ldr	r3, [pc, #36]	; (1a00058c <vSenderTask2+0x2c>)
1a000568:	9301      	str	r3, [sp, #4]
1a00056a:	e002      	b.n	1a000572 <vSenderTask2+0x12>
      if( xStatus != pdPASS ) {
         /* We could not write to the queue because it was full � this must
         be an error as the queue should never contain more than one item! */
         vPrintString( "Could not send to the queue.\r\n" );
      }
      vTaskDelay( ((int32_t )pvParameters) / portTICK_RATE_MS );
1a00056c:	4620      	mov	r0, r4
1a00056e:	f002 f80d 	bl	1a00258c <vTaskDelay>
      xStatus = xQueueSendToBack( xQueue, &lValueToSend, 0 );
1a000572:	2300      	movs	r3, #0
1a000574:	461a      	mov	r2, r3
1a000576:	a901      	add	r1, sp, #4
1a000578:	4805      	ldr	r0, [pc, #20]	; (1a000590 <vSenderTask2+0x30>)
1a00057a:	6800      	ldr	r0, [r0, #0]
1a00057c:	f001 f9e4 	bl	1a001948 <xQueueGenericSend>
      if( xStatus != pdPASS ) {
1a000580:	2801      	cmp	r0, #1
1a000582:	d0f3      	beq.n	1a00056c <vSenderTask2+0xc>
         vPrintString( "Could not send to the queue.\r\n" );
1a000584:	4803      	ldr	r0, [pc, #12]	; (1a000594 <vSenderTask2+0x34>)
1a000586:	f002 fdd3 	bl	1a003130 <vPrintString>
1a00058a:	e7ef      	b.n	1a00056c <vSenderTask2+0xc>
1a00058c:	459c4000 	.word	0x459c4000
1a000590:	10002d44 	.word	0x10002d44
1a000594:	1a006820 	.word	0x1a006820

1a000598 <fill_filter_settings>:
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data,
		const struct bme280_settings *settings) {
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
1a000598:	f990 3000 	ldrsb.w	r3, [r0]
1a00059c:	f023 031c 	bic.w	r3, r3, #28
1a0005a0:	78ca      	ldrb	r2, [r1, #3]
1a0005a2:	0092      	lsls	r2, r2, #2
1a0005a4:	f002 021c 	and.w	r2, r2, #28
1a0005a8:	4313      	orrs	r3, r2
1a0005aa:	7003      	strb	r3, [r0, #0]
}
1a0005ac:	4770      	bx	lr

1a0005ae <fill_standby_settings>:
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data,
		const struct bme280_settings *settings) {
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY,
1a0005ae:	f990 3000 	ldrsb.w	r3, [r0]
1a0005b2:	f003 031f 	and.w	r3, r3, #31
1a0005b6:	790a      	ldrb	r2, [r1, #4]
1a0005b8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
1a0005bc:	7003      	strb	r3, [r0, #0]
			settings->standby_time);
}
1a0005be:	4770      	bx	lr

1a0005c0 <fill_osr_press_settings>:
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data,
		const struct bme280_settings *settings) {
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
1a0005c0:	f990 3000 	ldrsb.w	r3, [r0]
1a0005c4:	f023 031c 	bic.w	r3, r3, #28
1a0005c8:	780a      	ldrb	r2, [r1, #0]
1a0005ca:	0092      	lsls	r2, r2, #2
1a0005cc:	f002 021c 	and.w	r2, r2, #28
1a0005d0:	4313      	orrs	r3, r2
1a0005d2:	7003      	strb	r3, [r0, #0]
}
1a0005d4:	4770      	bx	lr

1a0005d6 <fill_osr_temp_settings>:
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data,
		const struct bme280_settings *settings) {
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
1a0005d6:	f990 3000 	ldrsb.w	r3, [r0]
1a0005da:	f003 031f 	and.w	r3, r3, #31
1a0005de:	784a      	ldrb	r2, [r1, #1]
1a0005e0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
1a0005e4:	7003      	strb	r3, [r0, #0]
}
1a0005e6:	4770      	bx	lr

1a0005e8 <parse_device_settings>:
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data,
		struct bme280_settings *settings) {
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
1a0005e8:	7803      	ldrb	r3, [r0, #0]
1a0005ea:	f003 0307 	and.w	r3, r3, #7
1a0005ee:	708b      	strb	r3, [r1, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
1a0005f0:	7883      	ldrb	r3, [r0, #2]
1a0005f2:	f3c3 0382 	ubfx	r3, r3, #2, #3
1a0005f6:	700b      	strb	r3, [r1, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
1a0005f8:	7883      	ldrb	r3, [r0, #2]
1a0005fa:	095b      	lsrs	r3, r3, #5
1a0005fc:	704b      	strb	r3, [r1, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
1a0005fe:	78c3      	ldrb	r3, [r0, #3]
1a000600:	f3c3 0382 	ubfx	r3, r3, #2, #3
1a000604:	70cb      	strb	r3, [r1, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
1a000606:	78c3      	ldrb	r3, [r0, #3]
1a000608:	095b      	lsrs	r3, r3, #5
1a00060a:	710b      	strb	r3, [r1, #4]
}
1a00060c:	4770      	bx	lr
1a00060e:	Address 0x000000001a00060e is out of bounds.


1a000610 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(
		const struct bme280_uncomp_data *uncomp_data,
		struct bme280_calib_data *calib_data) {
1a000610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000614:	460c      	mov	r4, r1
	double var2;
	double temperature;
	double temperature_min = -40;
	double temperature_max = 85;

	var1 = ((double) uncomp_data->temperature) / 16384.0
1a000616:	6840      	ldr	r0, [r0, #4]
1a000618:	f004 fbe6 	bl	1a004de8 <__aeabi_ui2d>
1a00061c:	4680      	mov	r8, r0
1a00061e:	4689      	mov	r9, r1
1a000620:	2200      	movs	r2, #0
1a000622:	4b36      	ldr	r3, [pc, #216]	; (1a0006fc <compensate_temperature+0xec>)
1a000624:	f004 fc5a 	bl	1a004edc <__aeabi_dmul>
1a000628:	4606      	mov	r6, r0
1a00062a:	460f      	mov	r7, r1
			- ((double) calib_data->dig_T1) / 1024.0;
1a00062c:	8820      	ldrh	r0, [r4, #0]
1a00062e:	f004 fbdb 	bl	1a004de8 <__aeabi_ui2d>
1a000632:	4682      	mov	sl, r0
1a000634:	468b      	mov	fp, r1
1a000636:	2200      	movs	r2, #0
1a000638:	4b31      	ldr	r3, [pc, #196]	; (1a000700 <compensate_temperature+0xf0>)
1a00063a:	f004 fc4f 	bl	1a004edc <__aeabi_dmul>
	var1 = ((double) uncomp_data->temperature) / 16384.0
1a00063e:	4602      	mov	r2, r0
1a000640:	460b      	mov	r3, r1
1a000642:	4630      	mov	r0, r6
1a000644:	4639      	mov	r1, r7
1a000646:	f004 fa91 	bl	1a004b6c <__aeabi_dsub>
1a00064a:	4606      	mov	r6, r0
1a00064c:	460f      	mov	r7, r1
	var1 = var1 * ((double) calib_data->dig_T2);
1a00064e:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
1a000652:	f004 fbd9 	bl	1a004e08 <__aeabi_i2d>
1a000656:	4632      	mov	r2, r6
1a000658:	463b      	mov	r3, r7
1a00065a:	f004 fc3f 	bl	1a004edc <__aeabi_dmul>
1a00065e:	4606      	mov	r6, r0
1a000660:	460f      	mov	r7, r1
	var2 = (((double) uncomp_data->temperature) / 131072.0
1a000662:	2200      	movs	r2, #0
1a000664:	4b27      	ldr	r3, [pc, #156]	; (1a000704 <compensate_temperature+0xf4>)
1a000666:	4640      	mov	r0, r8
1a000668:	4649      	mov	r1, r9
1a00066a:	f004 fc37 	bl	1a004edc <__aeabi_dmul>
1a00066e:	4680      	mov	r8, r0
1a000670:	4689      	mov	r9, r1
			- ((double) calib_data->dig_T1) / 8192.0);
1a000672:	2200      	movs	r2, #0
1a000674:	4b24      	ldr	r3, [pc, #144]	; (1a000708 <compensate_temperature+0xf8>)
1a000676:	4650      	mov	r0, sl
1a000678:	4659      	mov	r1, fp
1a00067a:	f004 fc2f 	bl	1a004edc <__aeabi_dmul>
	var2 = (((double) uncomp_data->temperature) / 131072.0
1a00067e:	4602      	mov	r2, r0
1a000680:	460b      	mov	r3, r1
1a000682:	4640      	mov	r0, r8
1a000684:	4649      	mov	r1, r9
1a000686:	f004 fa71 	bl	1a004b6c <__aeabi_dsub>
	var2 = (var2 * var2) * ((double) calib_data->dig_T3);
1a00068a:	4602      	mov	r2, r0
1a00068c:	460b      	mov	r3, r1
1a00068e:	f004 fc25 	bl	1a004edc <__aeabi_dmul>
1a000692:	4680      	mov	r8, r0
1a000694:	4689      	mov	r9, r1
1a000696:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
1a00069a:	f004 fbb5 	bl	1a004e08 <__aeabi_i2d>
1a00069e:	4602      	mov	r2, r0
1a0006a0:	460b      	mov	r3, r1
1a0006a2:	4640      	mov	r0, r8
1a0006a4:	4649      	mov	r1, r9
1a0006a6:	f004 fc19 	bl	1a004edc <__aeabi_dmul>
	calib_data->t_fine = (int32_t)(var1 + var2);
1a0006aa:	4602      	mov	r2, r0
1a0006ac:	460b      	mov	r3, r1
1a0006ae:	4630      	mov	r0, r6
1a0006b0:	4639      	mov	r1, r7
1a0006b2:	f004 fa5d 	bl	1a004b70 <__adddf3>
1a0006b6:	4606      	mov	r6, r0
1a0006b8:	460f      	mov	r7, r1
1a0006ba:	f004 fea9 	bl	1a005410 <__aeabi_d2iz>
1a0006be:	6260      	str	r0, [r4, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
1a0006c0:	2200      	movs	r2, #0
1a0006c2:	4b12      	ldr	r3, [pc, #72]	; (1a00070c <compensate_temperature+0xfc>)
1a0006c4:	4630      	mov	r0, r6
1a0006c6:	4639      	mov	r1, r7
1a0006c8:	f004 fd32 	bl	1a005130 <__aeabi_ddiv>
1a0006cc:	4604      	mov	r4, r0
1a0006ce:	460d      	mov	r5, r1
	if (temperature < temperature_min) {
1a0006d0:	2200      	movs	r2, #0
1a0006d2:	4b0f      	ldr	r3, [pc, #60]	; (1a000710 <compensate_temperature+0x100>)
1a0006d4:	f004 fe74 	bl	1a0053c0 <__aeabi_dcmplt>
1a0006d8:	b948      	cbnz	r0, 1a0006ee <compensate_temperature+0xde>
		temperature = temperature_min;
	} else if (temperature > temperature_max) {
1a0006da:	2200      	movs	r2, #0
1a0006dc:	4b0d      	ldr	r3, [pc, #52]	; (1a000714 <compensate_temperature+0x104>)
1a0006de:	4620      	mov	r0, r4
1a0006e0:	4629      	mov	r1, r5
1a0006e2:	f004 fe8b 	bl	1a0053fc <__aeabi_dcmpgt>
1a0006e6:	b120      	cbz	r0, 1a0006f2 <compensate_temperature+0xe2>
		temperature = temperature_max;
1a0006e8:	2400      	movs	r4, #0
1a0006ea:	4d0a      	ldr	r5, [pc, #40]	; (1a000714 <compensate_temperature+0x104>)
	}

	return temperature;
1a0006ec:	e001      	b.n	1a0006f2 <compensate_temperature+0xe2>
		temperature = temperature_min;
1a0006ee:	2400      	movs	r4, #0
1a0006f0:	4d07      	ldr	r5, [pc, #28]	; (1a000710 <compensate_temperature+0x100>)
}
1a0006f2:	4620      	mov	r0, r4
1a0006f4:	4629      	mov	r1, r5
1a0006f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0006fa:	bf00      	nop
1a0006fc:	3f100000 	.word	0x3f100000
1a000700:	3f500000 	.word	0x3f500000
1a000704:	3ee00000 	.word	0x3ee00000
1a000708:	3f200000 	.word	0x3f200000
1a00070c:	40b40000 	.word	0x40b40000
1a000710:	c0440000 	.word	0xc0440000
1a000714:	40554000 	.word	0x40554000

1a000718 <compensate_pressure>:
/*!
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
		const struct bme280_calib_data *calib_data) {
1a000718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00071c:	4605      	mov	r5, r0
1a00071e:	460c      	mov	r4, r1
	double var3;
	double pressure;
	double pressure_min = 30000.0;
	double pressure_max = 110000.0;

	var1 = ((double) calib_data->t_fine / 2.0) - 64000.0;
1a000720:	6a48      	ldr	r0, [r1, #36]	; 0x24
1a000722:	f004 fb71 	bl	1a004e08 <__aeabi_i2d>
1a000726:	2200      	movs	r2, #0
1a000728:	4b87      	ldr	r3, [pc, #540]	; (1a000948 <compensate_pressure+0x230>)
1a00072a:	f004 fbd7 	bl	1a004edc <__aeabi_dmul>
1a00072e:	2200      	movs	r2, #0
1a000730:	4b86      	ldr	r3, [pc, #536]	; (1a00094c <compensate_pressure+0x234>)
1a000732:	f004 fa1b 	bl	1a004b6c <__aeabi_dsub>
1a000736:	4606      	mov	r6, r0
1a000738:	460f      	mov	r7, r1
	var2 = var1 * var1 * ((double) calib_data->dig_P6) / 32768.0;
1a00073a:	4602      	mov	r2, r0
1a00073c:	460b      	mov	r3, r1
1a00073e:	f004 fbcd 	bl	1a004edc <__aeabi_dmul>
1a000742:	4680      	mov	r8, r0
1a000744:	4689      	mov	r9, r1
1a000746:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
1a00074a:	f004 fb5d 	bl	1a004e08 <__aeabi_i2d>
1a00074e:	4602      	mov	r2, r0
1a000750:	460b      	mov	r3, r1
1a000752:	4640      	mov	r0, r8
1a000754:	4649      	mov	r1, r9
1a000756:	f004 fbc1 	bl	1a004edc <__aeabi_dmul>
1a00075a:	2200      	movs	r2, #0
1a00075c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
1a000760:	f004 fbbc 	bl	1a004edc <__aeabi_dmul>
1a000764:	4680      	mov	r8, r0
1a000766:	4689      	mov	r9, r1
	var2 = var2 + var1 * ((double) calib_data->dig_P5) * 2.0;
1a000768:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
1a00076c:	f004 fb4c 	bl	1a004e08 <__aeabi_i2d>
1a000770:	4632      	mov	r2, r6
1a000772:	463b      	mov	r3, r7
1a000774:	f004 fbb2 	bl	1a004edc <__aeabi_dmul>
1a000778:	4602      	mov	r2, r0
1a00077a:	460b      	mov	r3, r1
1a00077c:	f004 f9f8 	bl	1a004b70 <__adddf3>
1a000780:	4642      	mov	r2, r8
1a000782:	464b      	mov	r3, r9
1a000784:	f004 f9f4 	bl	1a004b70 <__adddf3>
	var2 = (var2 / 4.0) + (((double) calib_data->dig_P4) * 65536.0);
1a000788:	2200      	movs	r2, #0
1a00078a:	4b71      	ldr	r3, [pc, #452]	; (1a000950 <compensate_pressure+0x238>)
1a00078c:	f004 fba6 	bl	1a004edc <__aeabi_dmul>
1a000790:	4680      	mov	r8, r0
1a000792:	4689      	mov	r9, r1
1a000794:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
1a000798:	f004 fb36 	bl	1a004e08 <__aeabi_i2d>
1a00079c:	2200      	movs	r2, #0
1a00079e:	4b6d      	ldr	r3, [pc, #436]	; (1a000954 <compensate_pressure+0x23c>)
1a0007a0:	f004 fb9c 	bl	1a004edc <__aeabi_dmul>
1a0007a4:	4602      	mov	r2, r0
1a0007a6:	460b      	mov	r3, r1
1a0007a8:	4640      	mov	r0, r8
1a0007aa:	4649      	mov	r1, r9
1a0007ac:	f004 f9e0 	bl	1a004b70 <__adddf3>
1a0007b0:	4680      	mov	r8, r0
1a0007b2:	4689      	mov	r9, r1
	var3 = ((double) calib_data->dig_P3) * var1 * var1 / 524288.0;
1a0007b4:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
1a0007b8:	f004 fb26 	bl	1a004e08 <__aeabi_i2d>
1a0007bc:	4632      	mov	r2, r6
1a0007be:	463b      	mov	r3, r7
1a0007c0:	f004 fb8c 	bl	1a004edc <__aeabi_dmul>
1a0007c4:	4632      	mov	r2, r6
1a0007c6:	463b      	mov	r3, r7
1a0007c8:	f004 fb88 	bl	1a004edc <__aeabi_dmul>
1a0007cc:	2200      	movs	r2, #0
1a0007ce:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
1a0007d2:	f004 fb83 	bl	1a004edc <__aeabi_dmul>
1a0007d6:	4682      	mov	sl, r0
1a0007d8:	468b      	mov	fp, r1
	var1 = (var3 + ((double) calib_data->dig_P2) * var1) / 524288.0;
1a0007da:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
1a0007de:	f004 fb13 	bl	1a004e08 <__aeabi_i2d>
1a0007e2:	4632      	mov	r2, r6
1a0007e4:	463b      	mov	r3, r7
1a0007e6:	f004 fb79 	bl	1a004edc <__aeabi_dmul>
1a0007ea:	4652      	mov	r2, sl
1a0007ec:	465b      	mov	r3, fp
1a0007ee:	f004 f9bf 	bl	1a004b70 <__adddf3>
1a0007f2:	2200      	movs	r2, #0
1a0007f4:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
1a0007f8:	f004 fb70 	bl	1a004edc <__aeabi_dmul>
	var1 = (1.0 + var1 / 32768.0) * ((double) calib_data->dig_P1);
1a0007fc:	2200      	movs	r2, #0
1a0007fe:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
1a000802:	f004 fb6b 	bl	1a004edc <__aeabi_dmul>
1a000806:	2200      	movs	r2, #0
1a000808:	4b53      	ldr	r3, [pc, #332]	; (1a000958 <compensate_pressure+0x240>)
1a00080a:	f004 f9b1 	bl	1a004b70 <__adddf3>
1a00080e:	4606      	mov	r6, r0
1a000810:	460f      	mov	r7, r1
1a000812:	88e0      	ldrh	r0, [r4, #6]
1a000814:	f004 fae8 	bl	1a004de8 <__aeabi_ui2d>
1a000818:	4602      	mov	r2, r0
1a00081a:	460b      	mov	r3, r1
1a00081c:	4630      	mov	r0, r6
1a00081e:	4639      	mov	r1, r7
1a000820:	f004 fb5c 	bl	1a004edc <__aeabi_dmul>
1a000824:	4682      	mov	sl, r0
1a000826:	468b      	mov	fp, r1

	/* avoid exception caused by division by zero */
	if (var1) {
1a000828:	2200      	movs	r2, #0
1a00082a:	2300      	movs	r3, #0
1a00082c:	f004 fdbe 	bl	1a0053ac <__aeabi_dcmpeq>
1a000830:	2800      	cmp	r0, #0
1a000832:	d16f      	bne.n	1a000914 <compensate_pressure+0x1fc>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
1a000834:	6828      	ldr	r0, [r5, #0]
1a000836:	f004 fad7 	bl	1a004de8 <__aeabi_ui2d>
1a00083a:	4602      	mov	r2, r0
1a00083c:	460b      	mov	r3, r1
1a00083e:	2000      	movs	r0, #0
1a000840:	4946      	ldr	r1, [pc, #280]	; (1a00095c <compensate_pressure+0x244>)
1a000842:	f004 f993 	bl	1a004b6c <__aeabi_dsub>
1a000846:	4606      	mov	r6, r0
1a000848:	460f      	mov	r7, r1
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
1a00084a:	2200      	movs	r2, #0
1a00084c:	4b44      	ldr	r3, [pc, #272]	; (1a000960 <compensate_pressure+0x248>)
1a00084e:	4640      	mov	r0, r8
1a000850:	4649      	mov	r1, r9
1a000852:	f004 fb43 	bl	1a004edc <__aeabi_dmul>
1a000856:	4602      	mov	r2, r0
1a000858:	460b      	mov	r3, r1
1a00085a:	4630      	mov	r0, r6
1a00085c:	4639      	mov	r1, r7
1a00085e:	f004 f985 	bl	1a004b6c <__aeabi_dsub>
1a000862:	a333      	add	r3, pc, #204	; (adr r3, 1a000930 <compensate_pressure+0x218>)
1a000864:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000868:	f004 fb38 	bl	1a004edc <__aeabi_dmul>
1a00086c:	4652      	mov	r2, sl
1a00086e:	465b      	mov	r3, fp
1a000870:	f004 fc5e 	bl	1a005130 <__aeabi_ddiv>
1a000874:	4606      	mov	r6, r0
1a000876:	460f      	mov	r7, r1
		var1 = ((double) calib_data->dig_P9) * pressure * pressure
1a000878:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
1a00087c:	f004 fac4 	bl	1a004e08 <__aeabi_i2d>
1a000880:	4632      	mov	r2, r6
1a000882:	463b      	mov	r3, r7
1a000884:	f004 fb2a 	bl	1a004edc <__aeabi_dmul>
1a000888:	4632      	mov	r2, r6
1a00088a:	463b      	mov	r3, r7
1a00088c:	f004 fb26 	bl	1a004edc <__aeabi_dmul>
1a000890:	2200      	movs	r2, #0
1a000892:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
1a000896:	f004 fb21 	bl	1a004edc <__aeabi_dmul>
1a00089a:	4680      	mov	r8, r0
1a00089c:	4689      	mov	r9, r1
				/ 2147483648.0;
		var2 = pressure * ((double) calib_data->dig_P8) / 32768.0;
1a00089e:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
1a0008a2:	f004 fab1 	bl	1a004e08 <__aeabi_i2d>
1a0008a6:	4632      	mov	r2, r6
1a0008a8:	463b      	mov	r3, r7
1a0008aa:	f004 fb17 	bl	1a004edc <__aeabi_dmul>
1a0008ae:	2200      	movs	r2, #0
1a0008b0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
1a0008b4:	f004 fb12 	bl	1a004edc <__aeabi_dmul>
		pressure = pressure
				+ (var1 + var2 + ((double) calib_data->dig_P7)) / 16.0;
1a0008b8:	4602      	mov	r2, r0
1a0008ba:	460b      	mov	r3, r1
1a0008bc:	4640      	mov	r0, r8
1a0008be:	4649      	mov	r1, r9
1a0008c0:	f004 f956 	bl	1a004b70 <__adddf3>
1a0008c4:	4680      	mov	r8, r0
1a0008c6:	4689      	mov	r9, r1
1a0008c8:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
1a0008cc:	f004 fa9c 	bl	1a004e08 <__aeabi_i2d>
1a0008d0:	4602      	mov	r2, r0
1a0008d2:	460b      	mov	r3, r1
1a0008d4:	4640      	mov	r0, r8
1a0008d6:	4649      	mov	r1, r9
1a0008d8:	f004 f94a 	bl	1a004b70 <__adddf3>
1a0008dc:	2200      	movs	r2, #0
1a0008de:	4b21      	ldr	r3, [pc, #132]	; (1a000964 <compensate_pressure+0x24c>)
1a0008e0:	f004 fafc 	bl	1a004edc <__aeabi_dmul>
		pressure = pressure
1a0008e4:	4632      	mov	r2, r6
1a0008e6:	463b      	mov	r3, r7
1a0008e8:	f004 f942 	bl	1a004b70 <__adddf3>
1a0008ec:	4604      	mov	r4, r0
1a0008ee:	460d      	mov	r5, r1
		if (pressure < pressure_min) {
1a0008f0:	a311      	add	r3, pc, #68	; (adr r3, 1a000938 <compensate_pressure+0x220>)
1a0008f2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0008f6:	f004 fd63 	bl	1a0053c0 <__aeabi_dcmplt>
1a0008fa:	b990      	cbnz	r0, 1a000922 <compensate_pressure+0x20a>
			pressure = pressure_min;
		} else if (pressure > pressure_max) {
1a0008fc:	a310      	add	r3, pc, #64	; (adr r3, 1a000940 <compensate_pressure+0x228>)
1a0008fe:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000902:	4620      	mov	r0, r4
1a000904:	4629      	mov	r1, r5
1a000906:	f004 fd79 	bl	1a0053fc <__aeabi_dcmpgt>
1a00090a:	b130      	cbz	r0, 1a00091a <compensate_pressure+0x202>
			pressure = pressure_max;
1a00090c:	a50c      	add	r5, pc, #48	; (adr r5, 1a000940 <compensate_pressure+0x228>)
1a00090e:	e9d5 4500 	ldrd	r4, r5, [r5]
	} else /* Invalid case */
	{
		pressure = pressure_min;
	}

	return pressure;
1a000912:	e002      	b.n	1a00091a <compensate_pressure+0x202>
		pressure = pressure_min;
1a000914:	a508      	add	r5, pc, #32	; (adr r5, 1a000938 <compensate_pressure+0x220>)
1a000916:	e9d5 4500 	ldrd	r4, r5, [r5]
}
1a00091a:	4620      	mov	r0, r4
1a00091c:	4629      	mov	r1, r5
1a00091e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pressure = pressure_min;
1a000922:	a505      	add	r5, pc, #20	; (adr r5, 1a000938 <compensate_pressure+0x220>)
1a000924:	e9d5 4500 	ldrd	r4, r5, [r5]
1a000928:	e7f7      	b.n	1a00091a <compensate_pressure+0x202>
1a00092a:	bf00      	nop
1a00092c:	f3af 8000 	nop.w
1a000930:	00000000 	.word	0x00000000
1a000934:	40b86a00 	.word	0x40b86a00
1a000938:	00000000 	.word	0x00000000
1a00093c:	40dd4c00 	.word	0x40dd4c00
1a000940:	00000000 	.word	0x00000000
1a000944:	40fadb00 	.word	0x40fadb00
1a000948:	3fe00000 	.word	0x3fe00000
1a00094c:	40ef4000 	.word	0x40ef4000
1a000950:	3fd00000 	.word	0x3fd00000
1a000954:	40f00000 	.word	0x40f00000
1a000958:	3ff00000 	.word	0x3ff00000
1a00095c:	41300000 	.word	0x41300000
1a000960:	3f300000 	.word	0x3f300000
1a000964:	3fb00000 	.word	0x3fb00000

1a000968 <compensate_humidity>:
/*!
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
		const struct bme280_calib_data *calib_data) {
1a000968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00096c:	b084      	sub	sp, #16
1a00096e:	4680      	mov	r8, r0
1a000970:	468a      	mov	sl, r1
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double) calib_data->t_fine) - 76800.0;
1a000972:	6a48      	ldr	r0, [r1, #36]	; 0x24
1a000974:	f004 fa48 	bl	1a004e08 <__aeabi_i2d>
1a000978:	2200      	movs	r2, #0
1a00097a:	4b52      	ldr	r3, [pc, #328]	; (1a000ac4 <compensate_humidity+0x15c>)
1a00097c:	f004 f8f6 	bl	1a004b6c <__aeabi_dsub>
1a000980:	4606      	mov	r6, r0
1a000982:	460f      	mov	r7, r1
	var2 = (((double) calib_data->dig_H4) * 64.0
1a000984:	f9ba 001e 	ldrsh.w	r0, [sl, #30]
1a000988:	f004 fa3e 	bl	1a004e08 <__aeabi_i2d>
1a00098c:	2200      	movs	r2, #0
1a00098e:	4b4e      	ldr	r3, [pc, #312]	; (1a000ac8 <compensate_humidity+0x160>)
1a000990:	f004 faa4 	bl	1a004edc <__aeabi_dmul>
1a000994:	4604      	mov	r4, r0
1a000996:	460d      	mov	r5, r1
			+ (((double) calib_data->dig_H5) / 16384.0) * var1);
1a000998:	f9ba 0020 	ldrsh.w	r0, [sl, #32]
1a00099c:	f004 fa34 	bl	1a004e08 <__aeabi_i2d>
1a0009a0:	2200      	movs	r2, #0
1a0009a2:	4b4a      	ldr	r3, [pc, #296]	; (1a000acc <compensate_humidity+0x164>)
1a0009a4:	f004 fa9a 	bl	1a004edc <__aeabi_dmul>
1a0009a8:	4632      	mov	r2, r6
1a0009aa:	463b      	mov	r3, r7
1a0009ac:	f004 fa96 	bl	1a004edc <__aeabi_dmul>
	var2 = (((double) calib_data->dig_H4) * 64.0
1a0009b0:	4602      	mov	r2, r0
1a0009b2:	460b      	mov	r3, r1
1a0009b4:	4620      	mov	r0, r4
1a0009b6:	4629      	mov	r1, r5
1a0009b8:	f004 f8da 	bl	1a004b70 <__adddf3>
1a0009bc:	4604      	mov	r4, r0
1a0009be:	460d      	mov	r5, r1
	var3 = uncomp_data->humidity - var2;
1a0009c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
1a0009c4:	f004 fa10 	bl	1a004de8 <__aeabi_ui2d>
1a0009c8:	4622      	mov	r2, r4
1a0009ca:	462b      	mov	r3, r5
1a0009cc:	f004 f8ce 	bl	1a004b6c <__aeabi_dsub>
1a0009d0:	e9cd 0100 	strd	r0, r1, [sp]
	var4 = ((double) calib_data->dig_H2) / 65536.0;
1a0009d4:	f9ba 001a 	ldrsh.w	r0, [sl, #26]
1a0009d8:	f004 fa16 	bl	1a004e08 <__aeabi_i2d>
1a0009dc:	2200      	movs	r2, #0
1a0009de:	4b3c      	ldr	r3, [pc, #240]	; (1a000ad0 <compensate_humidity+0x168>)
1a0009e0:	f004 fa7c 	bl	1a004edc <__aeabi_dmul>
1a0009e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
	var5 = (1.0 + (((double) calib_data->dig_H3) / 67108864.0) * var1);
1a0009e8:	f89a 001c 	ldrb.w	r0, [sl, #28]
1a0009ec:	f004 f9fc 	bl	1a004de8 <__aeabi_ui2d>
1a0009f0:	2200      	movs	r2, #0
1a0009f2:	4b38      	ldr	r3, [pc, #224]	; (1a000ad4 <compensate_humidity+0x16c>)
1a0009f4:	f004 fa72 	bl	1a004edc <__aeabi_dmul>
1a0009f8:	4632      	mov	r2, r6
1a0009fa:	463b      	mov	r3, r7
1a0009fc:	f004 fa6e 	bl	1a004edc <__aeabi_dmul>
1a000a00:	2200      	movs	r2, #0
1a000a02:	4b35      	ldr	r3, [pc, #212]	; (1a000ad8 <compensate_humidity+0x170>)
1a000a04:	f004 f8b4 	bl	1a004b70 <__adddf3>
1a000a08:	4604      	mov	r4, r0
1a000a0a:	460d      	mov	r5, r1
	var6 = 1.0 + (((double) calib_data->dig_H6) / 67108864.0) * var1 * var5;
1a000a0c:	f99a 0022 	ldrsb.w	r0, [sl, #34]	; 0x22
1a000a10:	f004 f9fa 	bl	1a004e08 <__aeabi_i2d>
1a000a14:	2200      	movs	r2, #0
1a000a16:	4b2f      	ldr	r3, [pc, #188]	; (1a000ad4 <compensate_humidity+0x16c>)
1a000a18:	f004 fa60 	bl	1a004edc <__aeabi_dmul>
1a000a1c:	4632      	mov	r2, r6
1a000a1e:	463b      	mov	r3, r7
1a000a20:	f004 fa5c 	bl	1a004edc <__aeabi_dmul>
1a000a24:	4622      	mov	r2, r4
1a000a26:	462b      	mov	r3, r5
1a000a28:	f004 fa58 	bl	1a004edc <__aeabi_dmul>
1a000a2c:	2200      	movs	r2, #0
1a000a2e:	4b2a      	ldr	r3, [pc, #168]	; (1a000ad8 <compensate_humidity+0x170>)
1a000a30:	f004 f89e 	bl	1a004b70 <__adddf3>
1a000a34:	4680      	mov	r8, r0
1a000a36:	4689      	mov	r9, r1
	var6 = var3 * var4 * (var5 * var6);
1a000a38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a000a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a000a40:	f004 fa4c 	bl	1a004edc <__aeabi_dmul>
1a000a44:	4606      	mov	r6, r0
1a000a46:	460f      	mov	r7, r1
1a000a48:	4642      	mov	r2, r8
1a000a4a:	464b      	mov	r3, r9
1a000a4c:	4620      	mov	r0, r4
1a000a4e:	4629      	mov	r1, r5
1a000a50:	f004 fa44 	bl	1a004edc <__aeabi_dmul>
1a000a54:	4602      	mov	r2, r0
1a000a56:	460b      	mov	r3, r1
1a000a58:	4630      	mov	r0, r6
1a000a5a:	4639      	mov	r1, r7
1a000a5c:	f004 fa3e 	bl	1a004edc <__aeabi_dmul>
1a000a60:	4604      	mov	r4, r0
1a000a62:	460d      	mov	r5, r1
	humidity = var6 * (1.0 - ((double) calib_data->dig_H1) * var6 / 524288.0);
1a000a64:	f89a 0018 	ldrb.w	r0, [sl, #24]
1a000a68:	f004 f9be 	bl	1a004de8 <__aeabi_ui2d>
1a000a6c:	4622      	mov	r2, r4
1a000a6e:	462b      	mov	r3, r5
1a000a70:	f004 fa34 	bl	1a004edc <__aeabi_dmul>
1a000a74:	2200      	movs	r2, #0
1a000a76:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
1a000a7a:	f004 fa2f 	bl	1a004edc <__aeabi_dmul>
1a000a7e:	4602      	mov	r2, r0
1a000a80:	460b      	mov	r3, r1
1a000a82:	2000      	movs	r0, #0
1a000a84:	4914      	ldr	r1, [pc, #80]	; (1a000ad8 <compensate_humidity+0x170>)
1a000a86:	f004 f871 	bl	1a004b6c <__aeabi_dsub>
1a000a8a:	4622      	mov	r2, r4
1a000a8c:	462b      	mov	r3, r5
1a000a8e:	f004 fa25 	bl	1a004edc <__aeabi_dmul>
1a000a92:	4604      	mov	r4, r0
1a000a94:	460d      	mov	r5, r1
	if (humidity > humidity_max) {
1a000a96:	2200      	movs	r2, #0
1a000a98:	4b10      	ldr	r3, [pc, #64]	; (1a000adc <compensate_humidity+0x174>)
1a000a9a:	f004 fcaf 	bl	1a0053fc <__aeabi_dcmpgt>
1a000a9e:	b948      	cbnz	r0, 1a000ab4 <compensate_humidity+0x14c>
		humidity = humidity_max;
	} else if (humidity < humidity_min) {
1a000aa0:	2200      	movs	r2, #0
1a000aa2:	2300      	movs	r3, #0
1a000aa4:	4620      	mov	r0, r4
1a000aa6:	4629      	mov	r1, r5
1a000aa8:	f004 fc8a 	bl	1a0053c0 <__aeabi_dcmplt>
1a000aac:	b120      	cbz	r0, 1a000ab8 <compensate_humidity+0x150>
		humidity = humidity_min;
1a000aae:	2400      	movs	r4, #0
1a000ab0:	2500      	movs	r5, #0
	}

	return humidity;
1a000ab2:	e001      	b.n	1a000ab8 <compensate_humidity+0x150>
		humidity = humidity_max;
1a000ab4:	2400      	movs	r4, #0
1a000ab6:	4d09      	ldr	r5, [pc, #36]	; (1a000adc <compensate_humidity+0x174>)
}
1a000ab8:	4620      	mov	r0, r4
1a000aba:	4629      	mov	r1, r5
1a000abc:	b004      	add	sp, #16
1a000abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000ac2:	bf00      	nop
1a000ac4:	40f2c000 	.word	0x40f2c000
1a000ac8:	40500000 	.word	0x40500000
1a000acc:	3f100000 	.word	0x3f100000
1a000ad0:	3ef00000 	.word	0x3ef00000
1a000ad4:	3e500000 	.word	0x3e500000
1a000ad8:	3ff00000 	.word	0x3ff00000
1a000adc:	40590000 	.word	0x40590000

1a000ae0 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff,
		const uint8_t *reg_data, uint8_t len) {
1a000ae0:	b470      	push	{r4, r5, r6}
	uint8_t index;

	for (index = 1; index < len; index++) {
1a000ae2:	2401      	movs	r4, #1
1a000ae4:	429c      	cmp	r4, r3
1a000ae6:	d209      	bcs.n	1a000afc <interleave_reg_addr+0x1c>
		temp_buff[(index * 2) - 1] = reg_addr[index];
1a000ae8:	0065      	lsls	r5, r4, #1
1a000aea:	3d01      	subs	r5, #1
1a000aec:	5d06      	ldrb	r6, [r0, r4]
1a000aee:	554e      	strb	r6, [r1, r5]
		temp_buff[index * 2] = reg_data[index];
1a000af0:	5d15      	ldrb	r5, [r2, r4]
1a000af2:	f801 5014 	strb.w	r5, [r1, r4, lsl #1]
	for (index = 1; index < len; index++) {
1a000af6:	3401      	adds	r4, #1
1a000af8:	b2e4      	uxtb	r4, r4
1a000afa:	e7f3      	b.n	1a000ae4 <interleave_reg_addr+0x4>
	}
}
1a000afc:	bc70      	pop	{r4, r5, r6}
1a000afe:	4770      	bx	lr

1a000b00 <parse_temp_press_calib_data>:
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data,
		struct bme280_dev *dev) {
	struct bme280_calib_data *calib_data = &dev->calib_data;

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
1a000b00:	7842      	ldrb	r2, [r0, #1]
1a000b02:	7803      	ldrb	r3, [r0, #0]
1a000b04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000b08:	820b      	strh	r3, [r1, #16]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
1a000b0a:	78c2      	ldrb	r2, [r0, #3]
1a000b0c:	7883      	ldrb	r3, [r0, #2]
1a000b0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000b12:	824b      	strh	r3, [r1, #18]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
1a000b14:	7942      	ldrb	r2, [r0, #5]
1a000b16:	7903      	ldrb	r3, [r0, #4]
1a000b18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000b1c:	828b      	strh	r3, [r1, #20]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
1a000b1e:	79c2      	ldrb	r2, [r0, #7]
1a000b20:	7983      	ldrb	r3, [r0, #6]
1a000b22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000b26:	82cb      	strh	r3, [r1, #22]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
1a000b28:	7a42      	ldrb	r2, [r0, #9]
1a000b2a:	7a03      	ldrb	r3, [r0, #8]
1a000b2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000b30:	830b      	strh	r3, [r1, #24]
	calib_data->dig_P3 =
			(int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
1a000b32:	7ac2      	ldrb	r2, [r0, #11]
1a000b34:	7a83      	ldrb	r3, [r0, #10]
1a000b36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	calib_data->dig_P3 =
1a000b3a:	834b      	strh	r3, [r1, #26]
	calib_data->dig_P4 =
			(int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
1a000b3c:	7b42      	ldrb	r2, [r0, #13]
1a000b3e:	7b03      	ldrb	r3, [r0, #12]
1a000b40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	calib_data->dig_P4 =
1a000b44:	838b      	strh	r3, [r1, #28]
	calib_data->dig_P5 =
			(int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
1a000b46:	7bc2      	ldrb	r2, [r0, #15]
1a000b48:	7b83      	ldrb	r3, [r0, #14]
1a000b4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	calib_data->dig_P5 =
1a000b4e:	83cb      	strh	r3, [r1, #30]
	calib_data->dig_P6 =
			(int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
1a000b50:	7c42      	ldrb	r2, [r0, #17]
1a000b52:	7c03      	ldrb	r3, [r0, #16]
1a000b54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	calib_data->dig_P6 =
1a000b58:	840b      	strh	r3, [r1, #32]
	calib_data->dig_P7 =
			(int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
1a000b5a:	7cc2      	ldrb	r2, [r0, #19]
1a000b5c:	7c83      	ldrb	r3, [r0, #18]
1a000b5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	calib_data->dig_P7 =
1a000b62:	844b      	strh	r3, [r1, #34]	; 0x22
	calib_data->dig_P8 =
			(int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
1a000b64:	7d42      	ldrb	r2, [r0, #21]
1a000b66:	7d03      	ldrb	r3, [r0, #20]
1a000b68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	calib_data->dig_P8 =
1a000b6c:	848b      	strh	r3, [r1, #36]	; 0x24
	calib_data->dig_P9 =
			(int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
1a000b6e:	7dc2      	ldrb	r2, [r0, #23]
1a000b70:	7d83      	ldrb	r3, [r0, #22]
1a000b72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	calib_data->dig_P9 =
1a000b76:	84cb      	strh	r3, [r1, #38]	; 0x26
	calib_data->dig_H1 = reg_data[25];
1a000b78:	7e43      	ldrb	r3, [r0, #25]
1a000b7a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
}
1a000b7e:	4770      	bx	lr

1a000b80 <parse_humidity_calib_data>:
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
1a000b80:	7842      	ldrb	r2, [r0, #1]
1a000b82:	7803      	ldrb	r3, [r0, #0]
1a000b84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000b88:	854b      	strh	r3, [r1, #42]	; 0x2a
	calib_data->dig_H3 = reg_data[2];
1a000b8a:	7883      	ldrb	r3, [r0, #2]
1a000b8c:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
	dig_H4_msb = (int16_t) (int8_t) reg_data[3] * 16;
1a000b90:	f990 3003 	ldrsb.w	r3, [r0, #3]
1a000b94:	b29b      	uxth	r3, r3
1a000b96:	011b      	lsls	r3, r3, #4
1a000b98:	b21b      	sxth	r3, r3
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
1a000b9a:	7902      	ldrb	r2, [r0, #4]
1a000b9c:	f002 020f 	and.w	r2, r2, #15
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
1a000ba0:	4313      	orrs	r3, r2
1a000ba2:	85cb      	strh	r3, [r1, #46]	; 0x2e
	dig_H5_msb = (int16_t) (int8_t) reg_data[5] * 16;
1a000ba4:	f990 3005 	ldrsb.w	r3, [r0, #5]
1a000ba8:	b29b      	uxth	r3, r3
1a000baa:	011b      	lsls	r3, r3, #4
1a000bac:	b21b      	sxth	r3, r3
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
1a000bae:	7902      	ldrb	r2, [r0, #4]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
1a000bb0:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
1a000bb4:	860b      	strh	r3, [r1, #48]	; 0x30
	calib_data->dig_H6 = (int8_t) reg_data[6];
1a000bb6:	f990 3006 	ldrsb.w	r3, [r0, #6]
1a000bba:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
}
1a000bbe:	4770      	bx	lr

1a000bc0 <are_settings_changed>:
 */
static uint8_t are_settings_changed(uint8_t sub_settings,
		uint8_t desired_settings) {
	uint8_t settings_changed = FALSE;

	if (sub_settings & desired_settings) {
1a000bc0:	4208      	tst	r0, r1
1a000bc2:	d001      	beq.n	1a000bc8 <are_settings_changed+0x8>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
1a000bc4:	2001      	movs	r0, #1
1a000bc6:	4770      	bx	lr
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
1a000bc8:	2000      	movs	r0, #0
	}

	return settings_changed;
}
1a000bca:	4770      	bx	lr

1a000bcc <null_ptr_check>:
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev) {
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL)
1a000bcc:	b150      	cbz	r0, 1a000be4 <null_ptr_check+0x18>
1a000bce:	6842      	ldr	r2, [r0, #4]
1a000bd0:	b15a      	cbz	r2, 1a000bea <null_ptr_check+0x1e>
1a000bd2:	6882      	ldr	r2, [r0, #8]
1a000bd4:	b162      	cbz	r2, 1a000bf0 <null_ptr_check+0x24>
			|| (dev->delay_ms == NULL)) {
1a000bd6:	68c3      	ldr	r3, [r0, #12]
1a000bd8:	b10b      	cbz	r3, 1a000bde <null_ptr_check+0x12>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
1a000bda:	2000      	movs	r0, #0
	}

	return rslt;
}
1a000bdc:	4770      	bx	lr
		rslt = BME280_E_NULL_PTR;
1a000bde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000be2:	4770      	bx	lr
1a000be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000be8:	4770      	bx	lr
1a000bea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000bee:	4770      	bx	lr
1a000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000bf4:	4770      	bx	lr
1a000bf6:	Address 0x000000001a000bf6 is out of bounds.


1a000bf8 <bme280PrintSensorData>:
void bme280PrintSensorData(struct bme280_data *comp_data) {
1a000bf8:	b570      	push	{r4, r5, r6, lr}
1a000bfa:	4606      	mov	r6, r0
	uartWriteString(UART_USB, "Temperature: ");
1a000bfc:	4928      	ldr	r1, [pc, #160]	; (1a000ca0 <bme280PrintSensorData+0xa8>)
1a000bfe:	2003      	movs	r0, #3
1a000c00:	f003 fb5d 	bl	1a0042be <uartWriteString>
	floatToString(comp_data->temperature, uartBuff, 2);
1a000c04:	4c27      	ldr	r4, [pc, #156]	; (1a000ca4 <bme280PrintSensorData+0xac>)
1a000c06:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
1a000c0a:	f004 fc29 	bl	1a005460 <__aeabi_d2f>
1a000c0e:	ee00 0a10 	vmov	s0, r0
1a000c12:	2102      	movs	r1, #2
1a000c14:	4620      	mov	r0, r4
1a000c16:	f003 fda7 	bl	1a004768 <floatToString>
	uartWriteString(UART_USB, uartBuff);
1a000c1a:	4621      	mov	r1, r4
1a000c1c:	2003      	movs	r0, #3
1a000c1e:	f003 fb4e 	bl	1a0042be <uartWriteString>
	uartWriteString(UART_USB, "\rGrados C");
1a000c22:	4921      	ldr	r1, [pc, #132]	; (1a000ca8 <bme280PrintSensorData+0xb0>)
1a000c24:	2003      	movs	r0, #3
1a000c26:	f003 fb4a 	bl	1a0042be <uartWriteString>
	uartWriteString(UART_USB, "\r\n");
1a000c2a:	4d20      	ldr	r5, [pc, #128]	; (1a000cac <bme280PrintSensorData+0xb4>)
1a000c2c:	4629      	mov	r1, r5
1a000c2e:	2003      	movs	r0, #3
1a000c30:	f003 fb45 	bl	1a0042be <uartWriteString>
	uartWriteString(UART_USB, "Humidity: ");
1a000c34:	491e      	ldr	r1, [pc, #120]	; (1a000cb0 <bme280PrintSensorData+0xb8>)
1a000c36:	2003      	movs	r0, #3
1a000c38:	f003 fb41 	bl	1a0042be <uartWriteString>
	floatToString(comp_data->humidity, uartBuff, 4);
1a000c3c:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
1a000c40:	f004 fc0e 	bl	1a005460 <__aeabi_d2f>
1a000c44:	ee00 0a10 	vmov	s0, r0
1a000c48:	2104      	movs	r1, #4
1a000c4a:	4620      	mov	r0, r4
1a000c4c:	f003 fd8c 	bl	1a004768 <floatToString>
	uartWriteString(UART_USB, uartBuff);
1a000c50:	4621      	mov	r1, r4
1a000c52:	2003      	movs	r0, #3
1a000c54:	f003 fb33 	bl	1a0042be <uartWriteString>
	uartWriteString(UART_USB, "\r%");
1a000c58:	4916      	ldr	r1, [pc, #88]	; (1a000cb4 <bme280PrintSensorData+0xbc>)
1a000c5a:	2003      	movs	r0, #3
1a000c5c:	f003 fb2f 	bl	1a0042be <uartWriteString>
	uartWriteString(UART_USB, "\r\n");
1a000c60:	4629      	mov	r1, r5
1a000c62:	2003      	movs	r0, #3
1a000c64:	f003 fb2b 	bl	1a0042be <uartWriteString>
	uartWriteString(UART_USB, "Pressure: ");
1a000c68:	4913      	ldr	r1, [pc, #76]	; (1a000cb8 <bme280PrintSensorData+0xc0>)
1a000c6a:	2003      	movs	r0, #3
1a000c6c:	f003 fb27 	bl	1a0042be <uartWriteString>
	floatToString(comp_data->pressure, uartBuff, 2);
1a000c70:	e9d6 0100 	ldrd	r0, r1, [r6]
1a000c74:	f004 fbf4 	bl	1a005460 <__aeabi_d2f>
1a000c78:	ee00 0a10 	vmov	s0, r0
1a000c7c:	2102      	movs	r1, #2
1a000c7e:	4620      	mov	r0, r4
1a000c80:	f003 fd72 	bl	1a004768 <floatToString>
	uartWriteString(UART_USB, uartBuff);
1a000c84:	4621      	mov	r1, r4
1a000c86:	2003      	movs	r0, #3
1a000c88:	f003 fb19 	bl	1a0042be <uartWriteString>
	uartWriteString(UART_USB, "\rPa");
1a000c8c:	490b      	ldr	r1, [pc, #44]	; (1a000cbc <bme280PrintSensorData+0xc4>)
1a000c8e:	2003      	movs	r0, #3
1a000c90:	f003 fb15 	bl	1a0042be <uartWriteString>
	uartWriteString(UART_USB, "\r\n");
1a000c94:	4629      	mov	r1, r5
1a000c96:	2003      	movs	r0, #3
1a000c98:	f003 fb11 	bl	1a0042be <uartWriteString>
}
1a000c9c:	bd70      	pop	{r4, r5, r6, pc}
1a000c9e:	bf00      	nop
1a000ca0:	1a006864 	.word	0x1a006864
1a000ca4:	100000c0 	.word	0x100000c0
1a000ca8:	1a006874 	.word	0x1a006874
1a000cac:	1a006950 	.word	0x1a006950
1a000cb0:	1a006880 	.word	0x1a006880
1a000cb4:	1a00688c 	.word	0x1a00688c
1a000cb8:	1a006890 	.word	0x1a006890
1a000cbc:	1a00689c 	.word	0x1a00689c

1a000cc0 <bme280Delay_ms>:
void bme280Delay_ms(uint32_t period_ms) {
1a000cc0:	b508      	push	{r3, lr}
	vTaskDelay( period_ms / portTICK_RATE_MS );
1a000cc2:	f001 fc63 	bl	1a00258c <vTaskDelay>
}
1a000cc6:	bd08      	pop	{r3, pc}

1a000cc8 <bme280I2cRead>:
		uint16_t len) {
1a000cc8:	b500      	push	{lr}
1a000cca:	b087      	sub	sp, #28
1a000ccc:	f88d 1017 	strb.w	r1, [sp, #23]
	if (i2cRead(I2C0, dev_id, &reg_addr, 1, TRUE, reg_data, len, TRUE)) {
1a000cd0:	2101      	movs	r1, #1
1a000cd2:	9103      	str	r1, [sp, #12]
1a000cd4:	9302      	str	r3, [sp, #8]
1a000cd6:	9201      	str	r2, [sp, #4]
1a000cd8:	9100      	str	r1, [sp, #0]
1a000cda:	460b      	mov	r3, r1
1a000cdc:	f10d 0217 	add.w	r2, sp, #23
1a000ce0:	4601      	mov	r1, r0
1a000ce2:	2000      	movs	r0, #0
1a000ce4:	f003 fb5b 	bl	1a00439e <i2cRead>
1a000ce8:	b118      	cbz	r0, 1a000cf2 <bme280I2cRead+0x2a>
		rslt = BME280_OK;
1a000cea:	2000      	movs	r0, #0
}
1a000cec:	b007      	add	sp, #28
1a000cee:	f85d fb04 	ldr.w	pc, [sp], #4
		rslt = 5; //
1a000cf2:	2005      	movs	r0, #5
1a000cf4:	e7fa      	b.n	1a000cec <bme280I2cRead+0x24>

1a000cf6 <bme280I2cWrite>:
		uint16_t len) {
1a000cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000cfa:	b082      	sub	sp, #8
1a000cfc:	af02      	add	r7, sp, #8
1a000cfe:	469e      	mov	lr, r3
	uint8_t nuevoLen = 2 * len;
1a000d00:	005b      	lsls	r3, r3, #1
1a000d02:	b2db      	uxtb	r3, r3
	uint8_t transmitDataBuffer[nuevoLen];
1a000d04:	1ddc      	adds	r4, r3, #7
1a000d06:	f404 74fc 	and.w	r4, r4, #504	; 0x1f8
1a000d0a:	ebad 0d04 	sub.w	sp, sp, r4
1a000d0e:	f10d 0808 	add.w	r8, sp, #8
1a000d12:	4646      	mov	r6, r8
	for (i = 0; i < len; i += 2) {
1a000d14:	2400      	movs	r4, #0
1a000d16:	b2a5      	uxth	r5, r4
1a000d18:	4575      	cmp	r5, lr
1a000d1a:	d209      	bcs.n	1a000d30 <bme280I2cWrite+0x3a>
		transmitDataBuffer[i] = reg_addr + i;
1a000d1c:	1865      	adds	r5, r4, r1
1a000d1e:	5535      	strb	r5, [r6, r4]
		transmitDataBuffer[i + 1] = reg_data[i];
1a000d20:	1c65      	adds	r5, r4, #1
1a000d22:	f812 c004 	ldrb.w	ip, [r2, r4]
1a000d26:	f806 c005 	strb.w	ip, [r6, r5]
	for (i = 0; i < len; i += 2) {
1a000d2a:	3402      	adds	r4, #2
1a000d2c:	b2e4      	uxtb	r4, r4
1a000d2e:	e7f2      	b.n	1a000d16 <bme280I2cWrite+0x20>
	if (i2cWrite(I2C0, dev_id, transmitDataBuffer, nuevoLen, TRUE)) {
1a000d30:	2201      	movs	r2, #1
1a000d32:	9200      	str	r2, [sp, #0]
1a000d34:	4642      	mov	r2, r8
1a000d36:	4601      	mov	r1, r0
1a000d38:	2000      	movs	r0, #0
1a000d3a:	f003 fb44 	bl	1a0043c6 <i2cWrite>
1a000d3e:	b118      	cbz	r0, 1a000d48 <bme280I2cWrite+0x52>
		rslt = BME280_OK;
1a000d40:	2000      	movs	r0, #0
}
1a000d42:	46bd      	mov	sp, r7
1a000d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rslt = 5;	//@retval >0 -> Failure Info
1a000d48:	2005      	movs	r0, #5
1a000d4a:	e7fa      	b.n	1a000d42 <bme280I2cWrite+0x4c>

1a000d4c <bme280GetRegs>:
		const struct bme280_dev *dev) {
1a000d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000d50:	4605      	mov	r5, r0
1a000d52:	4688      	mov	r8, r1
1a000d54:	4617      	mov	r7, r2
1a000d56:	461c      	mov	r4, r3
	rslt = null_ptr_check(dev);
1a000d58:	4618      	mov	r0, r3
1a000d5a:	f7ff ff37 	bl	1a000bcc <null_ptr_check>
	if (rslt == BME280_OK) {
1a000d5e:	4603      	mov	r3, r0
1a000d60:	b960      	cbnz	r0, 1a000d7c <bme280GetRegs+0x30>
		if (dev->intf != BME280_I2C_INTF) {
1a000d62:	78a3      	ldrb	r3, [r4, #2]
1a000d64:	2b01      	cmp	r3, #1
1a000d66:	d001      	beq.n	1a000d6c <bme280GetRegs+0x20>
			reg_addr = reg_addr | 0x80;
1a000d68:	f045 0580 	orr.w	r5, r5, #128	; 0x80
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
1a000d6c:	6866      	ldr	r6, [r4, #4]
1a000d6e:	463b      	mov	r3, r7
1a000d70:	4642      	mov	r2, r8
1a000d72:	4629      	mov	r1, r5
1a000d74:	7860      	ldrb	r0, [r4, #1]
1a000d76:	47b0      	blx	r6
		if (rslt != BME280_OK) {
1a000d78:	4603      	mov	r3, r0
1a000d7a:	b910      	cbnz	r0, 1a000d82 <bme280GetRegs+0x36>
}
1a000d7c:	4618      	mov	r0, r3
1a000d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			rslt = BME280_E_COMM_FAIL;
1a000d82:	f06f 0303 	mvn.w	r3, #3
1a000d86:	e7f9      	b.n	1a000d7c <bme280GetRegs+0x30>

1a000d88 <get_calib_data>:
static int8_t get_calib_data(struct bme280_dev *dev) {
1a000d88:	b530      	push	{r4, r5, lr}
1a000d8a:	b089      	sub	sp, #36	; 0x24
1a000d8c:	4604      	mov	r4, r0
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
1a000d8e:	2300      	movs	r3, #0
1a000d90:	9301      	str	r3, [sp, #4]
1a000d92:	9302      	str	r3, [sp, #8]
1a000d94:	9303      	str	r3, [sp, #12]
1a000d96:	9304      	str	r3, [sp, #16]
1a000d98:	9305      	str	r3, [sp, #20]
1a000d9a:	9306      	str	r3, [sp, #24]
1a000d9c:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = bme280GetRegs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN,
1a000da0:	4603      	mov	r3, r0
1a000da2:	221a      	movs	r2, #26
1a000da4:	a901      	add	r1, sp, #4
1a000da6:	2088      	movs	r0, #136	; 0x88
1a000da8:	f7ff ffd0 	bl	1a000d4c <bme280GetRegs>
	if (rslt == BME280_OK) {
1a000dac:	4605      	mov	r5, r0
1a000dae:	b110      	cbz	r0, 1a000db6 <get_calib_data+0x2e>
}
1a000db0:	4628      	mov	r0, r5
1a000db2:	b009      	add	sp, #36	; 0x24
1a000db4:	bd30      	pop	{r4, r5, pc}
		parse_temp_press_calib_data(calib_data, dev);
1a000db6:	4621      	mov	r1, r4
1a000db8:	a801      	add	r0, sp, #4
1a000dba:	f7ff fea1 	bl	1a000b00 <parse_temp_press_calib_data>
		rslt = bme280GetRegs(reg_addr, calib_data,
1a000dbe:	4623      	mov	r3, r4
1a000dc0:	2207      	movs	r2, #7
1a000dc2:	a901      	add	r1, sp, #4
1a000dc4:	20e1      	movs	r0, #225	; 0xe1
1a000dc6:	f7ff ffc1 	bl	1a000d4c <bme280GetRegs>
		if (rslt == BME280_OK) {
1a000dca:	4605      	mov	r5, r0
1a000dcc:	2800      	cmp	r0, #0
1a000dce:	d1ef      	bne.n	1a000db0 <get_calib_data+0x28>
			parse_humidity_calib_data(calib_data, dev);
1a000dd0:	4621      	mov	r1, r4
1a000dd2:	a801      	add	r0, sp, #4
1a000dd4:	f7ff fed4 	bl	1a000b80 <parse_humidity_calib_data>
1a000dd8:	e7ea      	b.n	1a000db0 <get_calib_data+0x28>

1a000dda <bme280SetRegs>:
		const struct bme280_dev *dev) {
1a000dda:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000ddc:	b087      	sub	sp, #28
1a000dde:	4605      	mov	r5, r0
1a000de0:	460f      	mov	r7, r1
1a000de2:	4614      	mov	r4, r2
1a000de4:	461e      	mov	r6, r3
	if (len > 10) {
1a000de6:	2a0a      	cmp	r2, #10
1a000de8:	d900      	bls.n	1a000dec <bme280SetRegs+0x12>
		len = 10;
1a000dea:	240a      	movs	r4, #10
	rslt = null_ptr_check(dev);
1a000dec:	4630      	mov	r0, r6
1a000dee:	f7ff feed 	bl	1a000bcc <null_ptr_check>
	if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
1a000df2:	bb48      	cbnz	r0, 1a000e48 <bme280SetRegs+0x6e>
1a000df4:	b35d      	cbz	r5, 1a000e4e <bme280SetRegs+0x74>
1a000df6:	b36f      	cbz	r7, 1a000e54 <bme280SetRegs+0x7a>
		if (len != 0) {
1a000df8:	b37c      	cbz	r4, 1a000e5a <bme280SetRegs+0x80>
			temp_buff[0] = reg_data[0];
1a000dfa:	783b      	ldrb	r3, [r7, #0]
1a000dfc:	f88d 3004 	strb.w	r3, [sp, #4]
			if (dev->intf != BME280_I2C_INTF) {
1a000e00:	78b3      	ldrb	r3, [r6, #2]
1a000e02:	2b01      	cmp	r3, #1
1a000e04:	d009      	beq.n	1a000e1a <bme280SetRegs+0x40>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++) {
1a000e06:	2200      	movs	r2, #0
1a000e08:	4294      	cmp	r4, r2
1a000e0a:	d906      	bls.n	1a000e1a <bme280SetRegs+0x40>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
1a000e0c:	5ca9      	ldrb	r1, [r5, r2]
1a000e0e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
1a000e12:	54a9      	strb	r1, [r5, r2]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++) {
1a000e14:	3201      	adds	r2, #1
1a000e16:	b2d2      	uxtb	r2, r2
1a000e18:	e7f6      	b.n	1a000e08 <bme280SetRegs+0x2e>
			if (len > 1) {
1a000e1a:	2c01      	cmp	r4, #1
1a000e1c:	d80a      	bhi.n	1a000e34 <bme280SetRegs+0x5a>
				temp_len = len;
1a000e1e:	b2a3      	uxth	r3, r4
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
1a000e20:	68b4      	ldr	r4, [r6, #8]
1a000e22:	aa01      	add	r2, sp, #4
1a000e24:	7829      	ldrb	r1, [r5, #0]
1a000e26:	7870      	ldrb	r0, [r6, #1]
1a000e28:	47a0      	blx	r4
			if (rslt != BME280_OK) {
1a000e2a:	4603      	mov	r3, r0
1a000e2c:	b9c0      	cbnz	r0, 1a000e60 <bme280SetRegs+0x86>
}
1a000e2e:	4618      	mov	r0, r3
1a000e30:	b007      	add	sp, #28
1a000e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
1a000e34:	4623      	mov	r3, r4
1a000e36:	463a      	mov	r2, r7
1a000e38:	a901      	add	r1, sp, #4
1a000e3a:	4628      	mov	r0, r5
1a000e3c:	f7ff fe50 	bl	1a000ae0 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
1a000e40:	0064      	lsls	r4, r4, #1
1a000e42:	3c01      	subs	r4, #1
1a000e44:	b2a3      	uxth	r3, r4
1a000e46:	e7eb      	b.n	1a000e20 <bme280SetRegs+0x46>
		rslt = BME280_E_NULL_PTR;
1a000e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000e4c:	e7ef      	b.n	1a000e2e <bme280SetRegs+0x54>
1a000e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000e52:	e7ec      	b.n	1a000e2e <bme280SetRegs+0x54>
1a000e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000e58:	e7e9      	b.n	1a000e2e <bme280SetRegs+0x54>
			rslt = BME280_E_INVALID_LEN;
1a000e5a:	f06f 0302 	mvn.w	r3, #2
1a000e5e:	e7e6      	b.n	1a000e2e <bme280SetRegs+0x54>
				rslt = BME280_E_COMM_FAIL;
1a000e60:	f06f 0303 	mvn.w	r3, #3
1a000e64:	e7e3      	b.n	1a000e2e <bme280SetRegs+0x54>

1a000e66 <set_osr_humidity_settings>:
		const struct bme280_dev *dev) {
1a000e66:	b510      	push	{r4, lr}
1a000e68:	b082      	sub	sp, #8
1a000e6a:	460c      	mov	r4, r1
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
1a000e6c:	23f2      	movs	r3, #242	; 0xf2
1a000e6e:	f88d 3005 	strb.w	r3, [sp, #5]
	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
1a000e72:	7883      	ldrb	r3, [r0, #2]
1a000e74:	f003 0307 	and.w	r3, r3, #7
1a000e78:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = bme280SetRegs(&reg_addr, &ctrl_hum, 1, dev);
1a000e7c:	460b      	mov	r3, r1
1a000e7e:	2201      	movs	r2, #1
1a000e80:	f10d 0107 	add.w	r1, sp, #7
1a000e84:	f10d 0005 	add.w	r0, sp, #5
1a000e88:	f7ff ffa7 	bl	1a000dda <bme280SetRegs>
	if (rslt == BME280_OK) {
1a000e8c:	4603      	mov	r3, r0
1a000e8e:	b110      	cbz	r0, 1a000e96 <set_osr_humidity_settings+0x30>
}
1a000e90:	4618      	mov	r0, r3
1a000e92:	b002      	add	sp, #8
1a000e94:	bd10      	pop	{r4, pc}
		reg_addr = BME280_CTRL_MEAS_ADDR;
1a000e96:	20f4      	movs	r0, #244	; 0xf4
1a000e98:	f88d 0005 	strb.w	r0, [sp, #5]
		rslt = bme280GetRegs(reg_addr, &ctrl_meas, 1, dev);
1a000e9c:	4623      	mov	r3, r4
1a000e9e:	2201      	movs	r2, #1
1a000ea0:	f10d 0106 	add.w	r1, sp, #6
1a000ea4:	f7ff ff52 	bl	1a000d4c <bme280GetRegs>
		if (rslt == BME280_OK) {
1a000ea8:	4603      	mov	r3, r0
1a000eaa:	2800      	cmp	r0, #0
1a000eac:	d1f0      	bne.n	1a000e90 <set_osr_humidity_settings+0x2a>
			rslt = bme280SetRegs(&reg_addr, &ctrl_meas, 1, dev);
1a000eae:	4623      	mov	r3, r4
1a000eb0:	2201      	movs	r2, #1
1a000eb2:	f10d 0106 	add.w	r1, sp, #6
1a000eb6:	f10d 0005 	add.w	r0, sp, #5
1a000eba:	f7ff ff8e 	bl	1a000dda <bme280SetRegs>
1a000ebe:	4603      	mov	r3, r0
1a000ec0:	e7e6      	b.n	1a000e90 <set_osr_humidity_settings+0x2a>

1a000ec2 <set_osr_press_temp_settings>:
		const struct bme280_settings *settings, const struct bme280_dev *dev) {
1a000ec2:	b570      	push	{r4, r5, r6, lr}
1a000ec4:	b082      	sub	sp, #8
1a000ec6:	4605      	mov	r5, r0
1a000ec8:	460e      	mov	r6, r1
1a000eca:	4614      	mov	r4, r2
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
1a000ecc:	20f4      	movs	r0, #244	; 0xf4
1a000ece:	f88d 0007 	strb.w	r0, [sp, #7]
	rslt = bme280GetRegs(reg_addr, &reg_data, 1, dev);
1a000ed2:	4613      	mov	r3, r2
1a000ed4:	2201      	movs	r2, #1
1a000ed6:	f10d 0106 	add.w	r1, sp, #6
1a000eda:	f7ff ff37 	bl	1a000d4c <bme280GetRegs>
	if (rslt == BME280_OK) {
1a000ede:	4603      	mov	r3, r0
1a000ee0:	b970      	cbnz	r0, 1a000f00 <set_osr_press_temp_settings+0x3e>
		if (desired_settings & BME280_OSR_PRESS_SEL) {
1a000ee2:	f015 0f01 	tst.w	r5, #1
1a000ee6:	d10e      	bne.n	1a000f06 <set_osr_press_temp_settings+0x44>
		if (desired_settings & BME280_OSR_TEMP_SEL) {
1a000ee8:	f015 0f02 	tst.w	r5, #2
1a000eec:	d111      	bne.n	1a000f12 <set_osr_press_temp_settings+0x50>
		rslt = bme280SetRegs(&reg_addr, &reg_data, 1, dev);
1a000eee:	4623      	mov	r3, r4
1a000ef0:	2201      	movs	r2, #1
1a000ef2:	f10d 0106 	add.w	r1, sp, #6
1a000ef6:	f10d 0007 	add.w	r0, sp, #7
1a000efa:	f7ff ff6e 	bl	1a000dda <bme280SetRegs>
1a000efe:	4603      	mov	r3, r0
}
1a000f00:	4618      	mov	r0, r3
1a000f02:	b002      	add	sp, #8
1a000f04:	bd70      	pop	{r4, r5, r6, pc}
			fill_osr_press_settings(&reg_data, settings);
1a000f06:	4631      	mov	r1, r6
1a000f08:	f10d 0006 	add.w	r0, sp, #6
1a000f0c:	f7ff fb58 	bl	1a0005c0 <fill_osr_press_settings>
1a000f10:	e7ea      	b.n	1a000ee8 <set_osr_press_temp_settings+0x26>
			fill_osr_temp_settings(&reg_data, settings);
1a000f12:	4631      	mov	r1, r6
1a000f14:	f10d 0006 	add.w	r0, sp, #6
1a000f18:	f7ff fb5d 	bl	1a0005d6 <fill_osr_temp_settings>
1a000f1c:	e7e7      	b.n	1a000eee <set_osr_press_temp_settings+0x2c>

1a000f1e <set_osr_settings>:
		const struct bme280_settings *settings, const struct bme280_dev *dev) {
1a000f1e:	b570      	push	{r4, r5, r6, lr}
1a000f20:	4604      	mov	r4, r0
1a000f22:	460d      	mov	r5, r1
1a000f24:	4616      	mov	r6, r2
	if (desired_settings & BME280_OSR_HUM_SEL) {
1a000f26:	f010 0f04 	tst.w	r0, #4
1a000f2a:	d104      	bne.n	1a000f36 <set_osr_settings+0x18>
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
1a000f2c:	2001      	movs	r0, #1
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL)) {
1a000f2e:	f014 0f03 	tst.w	r4, #3
1a000f32:	d105      	bne.n	1a000f40 <set_osr_settings+0x22>
}
1a000f34:	bd70      	pop	{r4, r5, r6, pc}
		rslt = set_osr_humidity_settings(settings, dev);
1a000f36:	4611      	mov	r1, r2
1a000f38:	4628      	mov	r0, r5
1a000f3a:	f7ff ff94 	bl	1a000e66 <set_osr_humidity_settings>
1a000f3e:	e7f6      	b.n	1a000f2e <set_osr_settings+0x10>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
1a000f40:	4632      	mov	r2, r6
1a000f42:	4629      	mov	r1, r5
1a000f44:	4620      	mov	r0, r4
1a000f46:	f7ff ffbc 	bl	1a000ec2 <set_osr_press_temp_settings>
1a000f4a:	e7f3      	b.n	1a000f34 <set_osr_settings+0x16>

1a000f4c <set_filter_standby_settings>:
		const struct bme280_settings *settings, const struct bme280_dev *dev) {
1a000f4c:	b570      	push	{r4, r5, r6, lr}
1a000f4e:	b082      	sub	sp, #8
1a000f50:	4605      	mov	r5, r0
1a000f52:	460e      	mov	r6, r1
1a000f54:	4614      	mov	r4, r2
	uint8_t reg_addr = BME280_CONFIG_ADDR;
1a000f56:	20f5      	movs	r0, #245	; 0xf5
1a000f58:	f88d 0007 	strb.w	r0, [sp, #7]
	rslt = bme280GetRegs(reg_addr, &reg_data, 1, dev);
1a000f5c:	4613      	mov	r3, r2
1a000f5e:	2201      	movs	r2, #1
1a000f60:	f10d 0106 	add.w	r1, sp, #6
1a000f64:	f7ff fef2 	bl	1a000d4c <bme280GetRegs>
	if (rslt == BME280_OK) {
1a000f68:	4603      	mov	r3, r0
1a000f6a:	b970      	cbnz	r0, 1a000f8a <set_filter_standby_settings+0x3e>
		if (desired_settings & BME280_FILTER_SEL) {
1a000f6c:	f015 0f08 	tst.w	r5, #8
1a000f70:	d10e      	bne.n	1a000f90 <set_filter_standby_settings+0x44>
		if (desired_settings & BME280_STANDBY_SEL) {
1a000f72:	f015 0f10 	tst.w	r5, #16
1a000f76:	d111      	bne.n	1a000f9c <set_filter_standby_settings+0x50>
		rslt = bme280SetRegs(&reg_addr, &reg_data, 1, dev);
1a000f78:	4623      	mov	r3, r4
1a000f7a:	2201      	movs	r2, #1
1a000f7c:	f10d 0106 	add.w	r1, sp, #6
1a000f80:	f10d 0007 	add.w	r0, sp, #7
1a000f84:	f7ff ff29 	bl	1a000dda <bme280SetRegs>
1a000f88:	4603      	mov	r3, r0
}
1a000f8a:	4618      	mov	r0, r3
1a000f8c:	b002      	add	sp, #8
1a000f8e:	bd70      	pop	{r4, r5, r6, pc}
			fill_filter_settings(&reg_data, settings);
1a000f90:	4631      	mov	r1, r6
1a000f92:	f10d 0006 	add.w	r0, sp, #6
1a000f96:	f7ff faff 	bl	1a000598 <fill_filter_settings>
1a000f9a:	e7ea      	b.n	1a000f72 <set_filter_standby_settings+0x26>
			fill_standby_settings(&reg_data, settings);
1a000f9c:	4631      	mov	r1, r6
1a000f9e:	f10d 0006 	add.w	r0, sp, #6
1a000fa2:	f7ff fb04 	bl	1a0005ae <fill_standby_settings>
1a000fa6:	e7e7      	b.n	1a000f78 <set_filter_standby_settings+0x2c>

1a000fa8 <reload_device_settings>:
		const struct bme280_dev *dev) {
1a000fa8:	b538      	push	{r3, r4, r5, lr}
1a000faa:	4604      	mov	r4, r0
1a000fac:	460d      	mov	r5, r1
	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
1a000fae:	460a      	mov	r2, r1
1a000fb0:	4601      	mov	r1, r0
1a000fb2:	201f      	movs	r0, #31
1a000fb4:	f7ff ffb3 	bl	1a000f1e <set_osr_settings>
	if (rslt == BME280_OK) {
1a000fb8:	4603      	mov	r3, r0
1a000fba:	b108      	cbz	r0, 1a000fc0 <reload_device_settings+0x18>
}
1a000fbc:	4618      	mov	r0, r3
1a000fbe:	bd38      	pop	{r3, r4, r5, pc}
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings,
1a000fc0:	462a      	mov	r2, r5
1a000fc2:	4621      	mov	r1, r4
1a000fc4:	201f      	movs	r0, #31
1a000fc6:	f7ff ffc1 	bl	1a000f4c <set_filter_standby_settings>
1a000fca:	4603      	mov	r3, r0
1a000fcc:	e7f6      	b.n	1a000fbc <reload_device_settings+0x14>

1a000fce <write_power_mode>:
		const struct bme280_dev *dev) {
1a000fce:	b530      	push	{r4, r5, lr}
1a000fd0:	b083      	sub	sp, #12
1a000fd2:	4605      	mov	r5, r0
1a000fd4:	460c      	mov	r4, r1
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
1a000fd6:	20f4      	movs	r0, #244	; 0xf4
1a000fd8:	f88d 0007 	strb.w	r0, [sp, #7]
	rslt = bme280GetRegs(reg_addr, &sensor_mode_reg_val, 1, dev);
1a000fdc:	460b      	mov	r3, r1
1a000fde:	2201      	movs	r2, #1
1a000fe0:	f10d 0106 	add.w	r1, sp, #6
1a000fe4:	f7ff feb2 	bl	1a000d4c <bme280GetRegs>
	if (rslt == BME280_OK) {
1a000fe8:	4603      	mov	r3, r0
1a000fea:	b110      	cbz	r0, 1a000ff2 <write_power_mode+0x24>
}
1a000fec:	4618      	mov	r0, r3
1a000fee:	b003      	add	sp, #12
1a000ff0:	bd30      	pop	{r4, r5, pc}
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val,
1a000ff2:	f89d 0006 	ldrb.w	r0, [sp, #6]
1a000ff6:	f020 0003 	bic.w	r0, r0, #3
1a000ffa:	b240      	sxtb	r0, r0
1a000ffc:	f005 0503 	and.w	r5, r5, #3
1a001000:	4328      	orrs	r0, r5
1a001002:	f88d 0006 	strb.w	r0, [sp, #6]
		rslt = bme280SetRegs(&reg_addr, &sensor_mode_reg_val, 1, dev);
1a001006:	4623      	mov	r3, r4
1a001008:	2201      	movs	r2, #1
1a00100a:	f10d 0106 	add.w	r1, sp, #6
1a00100e:	f10d 0007 	add.w	r0, sp, #7
1a001012:	f7ff fee2 	bl	1a000dda <bme280SetRegs>
1a001016:	4603      	mov	r3, r0
1a001018:	e7e8      	b.n	1a000fec <write_power_mode+0x1e>

1a00101a <bme280GetSensorMode>:
int8_t bme280GetSensorMode(uint8_t *sensor_mode, const struct bme280_dev *dev) {
1a00101a:	b538      	push	{r3, r4, r5, lr}
1a00101c:	4605      	mov	r5, r0
1a00101e:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
1a001020:	4608      	mov	r0, r1
1a001022:	f7ff fdd3 	bl	1a000bcc <null_ptr_check>
	if (rslt == BME280_OK) {
1a001026:	4603      	mov	r3, r0
1a001028:	b108      	cbz	r0, 1a00102e <bme280GetSensorMode+0x14>
}
1a00102a:	4618      	mov	r0, r3
1a00102c:	bd38      	pop	{r3, r4, r5, pc}
		rslt = bme280GetRegs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
1a00102e:	4623      	mov	r3, r4
1a001030:	2201      	movs	r2, #1
1a001032:	4629      	mov	r1, r5
1a001034:	20f4      	movs	r0, #244	; 0xf4
1a001036:	f7ff fe89 	bl	1a000d4c <bme280GetRegs>
1a00103a:	4603      	mov	r3, r0
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
1a00103c:	782a      	ldrb	r2, [r5, #0]
1a00103e:	f002 0203 	and.w	r2, r2, #3
1a001042:	702a      	strb	r2, [r5, #0]
1a001044:	e7f1      	b.n	1a00102a <bme280GetSensorMode+0x10>

1a001046 <bme280SoftReset>:
int8_t bme280SoftReset(const struct bme280_dev *dev) {
1a001046:	b530      	push	{r4, r5, lr}
1a001048:	b083      	sub	sp, #12
1a00104a:	4605      	mov	r5, r0
	uint8_t reg_addr = BME280_RESET_ADDR;
1a00104c:	23e0      	movs	r3, #224	; 0xe0
1a00104e:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t soft_rst_cmd = 0xB6;
1a001052:	23b6      	movs	r3, #182	; 0xb6
1a001054:	f88d 3006 	strb.w	r3, [sp, #6]
	rslt = null_ptr_check(dev);
1a001058:	f7ff fdb8 	bl	1a000bcc <null_ptr_check>
	if (rslt == BME280_OK) {
1a00105c:	4604      	mov	r4, r0
1a00105e:	b110      	cbz	r0, 1a001066 <bme280SoftReset+0x20>
}
1a001060:	4620      	mov	r0, r4
1a001062:	b003      	add	sp, #12
1a001064:	bd30      	pop	{r4, r5, pc}
		rslt = bme280SetRegs(&reg_addr, &soft_rst_cmd, 1, dev);
1a001066:	462b      	mov	r3, r5
1a001068:	2201      	movs	r2, #1
1a00106a:	f10d 0106 	add.w	r1, sp, #6
1a00106e:	f10d 0007 	add.w	r0, sp, #7
1a001072:	f7ff feb2 	bl	1a000dda <bme280SetRegs>
1a001076:	4604      	mov	r4, r0
		dev->delay_ms(2);
1a001078:	68eb      	ldr	r3, [r5, #12]
1a00107a:	2002      	movs	r0, #2
1a00107c:	4798      	blx	r3
1a00107e:	e7ef      	b.n	1a001060 <bme280SoftReset+0x1a>

1a001080 <bme280Init>:
int8_t bme280Init(struct bme280_dev *dev) {
1a001080:	b570      	push	{r4, r5, r6, lr}
1a001082:	b082      	sub	sp, #8
1a001084:	4605      	mov	r5, r0
	uint8_t chip_id = 0;
1a001086:	2300      	movs	r3, #0
1a001088:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
1a00108c:	f7ff fd9e 	bl	1a000bcc <null_ptr_check>
	if (rslt == BME280_OK) {
1a001090:	4606      	mov	r6, r0
1a001092:	b338      	cbz	r0, 1a0010e4 <bme280Init+0x64>
}
1a001094:	4630      	mov	r0, r6
1a001096:	b002      	add	sp, #8
1a001098:	bd70      	pop	{r4, r5, r6, pc}
					rslt = get_calib_data(dev);
1a00109a:	4628      	mov	r0, r5
1a00109c:	f7ff fe74 	bl	1a000d88 <get_calib_data>
1a0010a0:	4606      	mov	r6, r0
1a0010a2:	e01a      	b.n	1a0010da <bme280Init+0x5a>
			dev->delay_ms(1);
1a0010a4:	68eb      	ldr	r3, [r5, #12]
1a0010a6:	2001      	movs	r0, #1
1a0010a8:	4798      	blx	r3
			--try_count;
1a0010aa:	3c01      	subs	r4, #1
1a0010ac:	b2e4      	uxtb	r4, r4
		while (try_count) {
1a0010ae:	b1a4      	cbz	r4, 1a0010da <bme280Init+0x5a>
			rslt = bme280GetRegs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
1a0010b0:	462b      	mov	r3, r5
1a0010b2:	2201      	movs	r2, #1
1a0010b4:	f10d 0107 	add.w	r1, sp, #7
1a0010b8:	20d0      	movs	r0, #208	; 0xd0
1a0010ba:	f7ff fe47 	bl	1a000d4c <bme280GetRegs>
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
1a0010be:	4606      	mov	r6, r0
1a0010c0:	2800      	cmp	r0, #0
1a0010c2:	d1ef      	bne.n	1a0010a4 <bme280Init+0x24>
1a0010c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0010c8:	2b60      	cmp	r3, #96	; 0x60
1a0010ca:	d1eb      	bne.n	1a0010a4 <bme280Init+0x24>
				dev->chip_id = chip_id;
1a0010cc:	702b      	strb	r3, [r5, #0]
				rslt = bme280SoftReset(dev);
1a0010ce:	4628      	mov	r0, r5
1a0010d0:	f7ff ffb9 	bl	1a001046 <bme280SoftReset>
				if (rslt == BME280_OK) {
1a0010d4:	4606      	mov	r6, r0
1a0010d6:	2800      	cmp	r0, #0
1a0010d8:	d0df      	beq.n	1a00109a <bme280Init+0x1a>
		if (!try_count) {
1a0010da:	2c00      	cmp	r4, #0
1a0010dc:	d1da      	bne.n	1a001094 <bme280Init+0x14>
			rslt = BME280_E_DEV_NOT_FOUND;
1a0010de:	f06f 0601 	mvn.w	r6, #1
1a0010e2:	e7d7      	b.n	1a001094 <bme280Init+0x14>
	uint8_t try_count = 5;
1a0010e4:	2405      	movs	r4, #5
1a0010e6:	e7e2      	b.n	1a0010ae <bme280Init+0x2e>

1a0010e8 <put_device_to_sleep>:
static int8_t put_device_to_sleep(const struct bme280_dev *dev) {
1a0010e8:	b510      	push	{r4, lr}
1a0010ea:	b084      	sub	sp, #16
1a0010ec:	4604      	mov	r4, r0
	rslt = bme280GetRegs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
1a0010ee:	4603      	mov	r3, r0
1a0010f0:	2204      	movs	r2, #4
1a0010f2:	a903      	add	r1, sp, #12
1a0010f4:	20f2      	movs	r0, #242	; 0xf2
1a0010f6:	f7ff fe29 	bl	1a000d4c <bme280GetRegs>
	if (rslt == BME280_OK) {
1a0010fa:	4603      	mov	r3, r0
1a0010fc:	b110      	cbz	r0, 1a001104 <put_device_to_sleep+0x1c>
}
1a0010fe:	4618      	mov	r0, r3
1a001100:	b004      	add	sp, #16
1a001102:	bd10      	pop	{r4, pc}
		parse_device_settings(reg_data, &settings);
1a001104:	a901      	add	r1, sp, #4
1a001106:	a803      	add	r0, sp, #12
1a001108:	f7ff fa6e 	bl	1a0005e8 <parse_device_settings>
		rslt = bme280SoftReset(dev);
1a00110c:	4620      	mov	r0, r4
1a00110e:	f7ff ff9a 	bl	1a001046 <bme280SoftReset>
		if (rslt == BME280_OK) {
1a001112:	4603      	mov	r3, r0
1a001114:	2800      	cmp	r0, #0
1a001116:	d1f2      	bne.n	1a0010fe <put_device_to_sleep+0x16>
			rslt = reload_device_settings(&settings, dev);
1a001118:	4621      	mov	r1, r4
1a00111a:	a801      	add	r0, sp, #4
1a00111c:	f7ff ff44 	bl	1a000fa8 <reload_device_settings>
1a001120:	4603      	mov	r3, r0
1a001122:	e7ec      	b.n	1a0010fe <put_device_to_sleep+0x16>

1a001124 <bme280SetSensorSettings>:
		const struct bme280_dev *dev) {
1a001124:	b570      	push	{r4, r5, r6, lr}
1a001126:	b082      	sub	sp, #8
1a001128:	4606      	mov	r6, r0
1a00112a:	460d      	mov	r5, r1
	rslt = null_ptr_check(dev);
1a00112c:	4608      	mov	r0, r1
1a00112e:	f7ff fd4d 	bl	1a000bcc <null_ptr_check>
	if (rslt == BME280_OK) {
1a001132:	4604      	mov	r4, r0
1a001134:	b110      	cbz	r0, 1a00113c <bme280SetSensorSettings+0x18>
}
1a001136:	4620      	mov	r0, r4
1a001138:	b002      	add	sp, #8
1a00113a:	bd70      	pop	{r4, r5, r6, pc}
		rslt = bme280GetSensorMode(&sensor_mode, dev);
1a00113c:	4629      	mov	r1, r5
1a00113e:	f10d 0007 	add.w	r0, sp, #7
1a001142:	f7ff ff6a 	bl	1a00101a <bme280GetSensorMode>
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE)) {
1a001146:	4604      	mov	r4, r0
1a001148:	b910      	cbnz	r0, 1a001150 <bme280SetSensorSettings+0x2c>
1a00114a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00114e:	b9b3      	cbnz	r3, 1a00117e <bme280SetSensorSettings+0x5a>
		if (rslt == BME280_OK) {
1a001150:	2c00      	cmp	r4, #0
1a001152:	d1f0      	bne.n	1a001136 <bme280SetSensorSettings+0x12>
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings)) {
1a001154:	4631      	mov	r1, r6
1a001156:	2007      	movs	r0, #7
1a001158:	f7ff fd32 	bl	1a000bc0 <are_settings_changed>
1a00115c:	b9a0      	cbnz	r0, 1a001188 <bme280SetSensorSettings+0x64>
			if ((rslt == BME280_OK)
1a00115e:	2c00      	cmp	r4, #0
1a001160:	d1e9      	bne.n	1a001136 <bme280SetSensorSettings+0x12>
					&& are_settings_changed(FILTER_STANDBY_SETTINGS,
1a001162:	4631      	mov	r1, r6
1a001164:	2018      	movs	r0, #24
1a001166:	f7ff fd2b 	bl	1a000bc0 <are_settings_changed>
1a00116a:	2800      	cmp	r0, #0
1a00116c:	d0e3      	beq.n	1a001136 <bme280SetSensorSettings+0x12>
				rslt = set_filter_standby_settings(desired_settings,
1a00116e:	462a      	mov	r2, r5
1a001170:	f105 0138 	add.w	r1, r5, #56	; 0x38
1a001174:	4630      	mov	r0, r6
1a001176:	f7ff fee9 	bl	1a000f4c <set_filter_standby_settings>
1a00117a:	4604      	mov	r4, r0
1a00117c:	e7db      	b.n	1a001136 <bme280SetSensorSettings+0x12>
			rslt = put_device_to_sleep(dev);
1a00117e:	4628      	mov	r0, r5
1a001180:	f7ff ffb2 	bl	1a0010e8 <put_device_to_sleep>
1a001184:	4604      	mov	r4, r0
1a001186:	e7e3      	b.n	1a001150 <bme280SetSensorSettings+0x2c>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
1a001188:	462a      	mov	r2, r5
1a00118a:	f105 0138 	add.w	r1, r5, #56	; 0x38
1a00118e:	4630      	mov	r0, r6
1a001190:	f7ff fec5 	bl	1a000f1e <set_osr_settings>
1a001194:	4604      	mov	r4, r0
1a001196:	e7e2      	b.n	1a00115e <bme280SetSensorSettings+0x3a>

1a001198 <bme280SetSensorMode>:
int8_t bme280SetSensorMode(uint8_t sensor_mode, const struct bme280_dev *dev) {
1a001198:	b530      	push	{r4, r5, lr}
1a00119a:	b083      	sub	sp, #12
1a00119c:	4605      	mov	r5, r0
1a00119e:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
1a0011a0:	4608      	mov	r0, r1
1a0011a2:	f7ff fd13 	bl	1a000bcc <null_ptr_check>
	if (rslt == BME280_OK) {
1a0011a6:	4603      	mov	r3, r0
1a0011a8:	b110      	cbz	r0, 1a0011b0 <bme280SetSensorMode+0x18>
}
1a0011aa:	4618      	mov	r0, r3
1a0011ac:	b003      	add	sp, #12
1a0011ae:	bd30      	pop	{r4, r5, pc}
		rslt = bme280GetSensorMode(&last_set_mode, dev);
1a0011b0:	4621      	mov	r1, r4
1a0011b2:	f10d 0007 	add.w	r0, sp, #7
1a0011b6:	f7ff ff30 	bl	1a00101a <bme280GetSensorMode>
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE)) {
1a0011ba:	4603      	mov	r3, r0
1a0011bc:	b910      	cbnz	r0, 1a0011c4 <bme280SetSensorMode+0x2c>
1a0011be:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a0011c2:	b93a      	cbnz	r2, 1a0011d4 <bme280SetSensorMode+0x3c>
		if (rslt == BME280_OK) {
1a0011c4:	2b00      	cmp	r3, #0
1a0011c6:	d1f0      	bne.n	1a0011aa <bme280SetSensorMode+0x12>
			rslt = write_power_mode(sensor_mode, dev);
1a0011c8:	4621      	mov	r1, r4
1a0011ca:	4628      	mov	r0, r5
1a0011cc:	f7ff feff 	bl	1a000fce <write_power_mode>
1a0011d0:	4603      	mov	r3, r0
1a0011d2:	e7ea      	b.n	1a0011aa <bme280SetSensorMode+0x12>
			rslt = put_device_to_sleep(dev);
1a0011d4:	4620      	mov	r0, r4
1a0011d6:	f7ff ff87 	bl	1a0010e8 <put_device_to_sleep>
1a0011da:	4603      	mov	r3, r0
1a0011dc:	e7f2      	b.n	1a0011c4 <bme280SetSensorMode+0x2c>

1a0011de <bme280ParseSensorData>:
		struct bme280_uncomp_data *uncomp_data) {
1a0011de:	b410      	push	{r4}
	data_msb = (uint32_t) reg_data[0] << 12;
1a0011e0:	7804      	ldrb	r4, [r0, #0]
	data_lsb = (uint32_t) reg_data[1] << 4;
1a0011e2:	7843      	ldrb	r3, [r0, #1]
1a0011e4:	011b      	lsls	r3, r3, #4
	data_xlsb = (uint32_t) reg_data[2] >> 4;
1a0011e6:	7882      	ldrb	r2, [r0, #2]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
1a0011e8:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
1a0011ec:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
1a0011f0:	600b      	str	r3, [r1, #0]
	data_msb = (uint32_t) reg_data[3] << 12;
1a0011f2:	78c4      	ldrb	r4, [r0, #3]
	data_lsb = (uint32_t) reg_data[4] << 4;
1a0011f4:	7903      	ldrb	r3, [r0, #4]
1a0011f6:	011b      	lsls	r3, r3, #4
	data_xlsb = (uint32_t) reg_data[5] >> 4;
1a0011f8:	7942      	ldrb	r2, [r0, #5]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
1a0011fa:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
1a0011fe:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
1a001202:	604b      	str	r3, [r1, #4]
	data_lsb = (uint32_t) reg_data[6] << 8;
1a001204:	7982      	ldrb	r2, [r0, #6]
	data_msb = (uint32_t) reg_data[7];
1a001206:	79c3      	ldrb	r3, [r0, #7]
	uncomp_data->humidity = data_msb | data_lsb;
1a001208:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00120c:	608b      	str	r3, [r1, #8]
}
1a00120e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001212:	4770      	bx	lr

1a001214 <bme280CompensateData>:
	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
1a001214:	b361      	cbz	r1, 1a001270 <bme280CompensateData+0x5c>
		struct bme280_data *comp_data, struct bme280_calib_data *calib_data) {
1a001216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001218:	460f      	mov	r7, r1
	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
1a00121a:	b362      	cbz	r2, 1a001276 <bme280CompensateData+0x62>
1a00121c:	b373      	cbz	r3, 1a00127c <bme280CompensateData+0x68>
1a00121e:	461e      	mov	r6, r3
1a001220:	4614      	mov	r4, r2
1a001222:	4605      	mov	r5, r0
		comp_data->temperature = 0;
1a001224:	2200      	movs	r2, #0
1a001226:	2300      	movs	r3, #0
1a001228:	e9c4 2302 	strd	r2, r3, [r4, #8]
		comp_data->pressure = 0;
1a00122c:	e9c4 2300 	strd	r2, r3, [r4]
		comp_data->humidity = 0;
1a001230:	e9c4 2304 	strd	r2, r3, [r4, #16]
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
1a001234:	f010 0f07 	tst.w	r0, #7
1a001238:	d113      	bne.n	1a001262 <bme280CompensateData+0x4e>
		if (sensor_comp & BME280_PRESS) {
1a00123a:	f015 0f01 	tst.w	r5, #1
1a00123e:	d005      	beq.n	1a00124c <bme280CompensateData+0x38>
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
1a001240:	4631      	mov	r1, r6
1a001242:	4638      	mov	r0, r7
1a001244:	f7ff fa68 	bl	1a000718 <compensate_pressure>
1a001248:	e9c4 0100 	strd	r0, r1, [r4]
		if (sensor_comp & BME280_HUM) {
1a00124c:	f015 0f04 	tst.w	r5, #4
1a001250:	d017      	beq.n	1a001282 <bme280CompensateData+0x6e>
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
1a001252:	4631      	mov	r1, r6
1a001254:	4638      	mov	r0, r7
1a001256:	f7ff fb87 	bl	1a000968 <compensate_humidity>
1a00125a:	e9c4 0104 	strd	r0, r1, [r4, #16]
	int8_t rslt = BME280_OK;
1a00125e:	2000      	movs	r0, #0
}
1a001260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			comp_data->temperature = compensate_temperature(uncomp_data,
1a001262:	4631      	mov	r1, r6
1a001264:	4638      	mov	r0, r7
1a001266:	f7ff f9d3 	bl	1a000610 <compensate_temperature>
1a00126a:	e9c4 0102 	strd	r0, r1, [r4, #8]
1a00126e:	e7e4      	b.n	1a00123a <bme280CompensateData+0x26>
		rslt = BME280_E_NULL_PTR;
1a001270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a001274:	4770      	bx	lr
		rslt = BME280_E_NULL_PTR;
1a001276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00127a:	e7f1      	b.n	1a001260 <bme280CompensateData+0x4c>
1a00127c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001280:	e7ee      	b.n	1a001260 <bme280CompensateData+0x4c>
	int8_t rslt = BME280_OK;
1a001282:	2000      	movs	r0, #0
1a001284:	e7ec      	b.n	1a001260 <bme280CompensateData+0x4c>

1a001286 <bme280GetSensorData>:
		struct bme280_dev *dev) {
1a001286:	b570      	push	{r4, r5, r6, lr}
1a001288:	b086      	sub	sp, #24
1a00128a:	4606      	mov	r6, r0
1a00128c:	460d      	mov	r5, r1
1a00128e:	4614      	mov	r4, r2
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
1a001290:	2300      	movs	r3, #0
1a001292:	9304      	str	r3, [sp, #16]
1a001294:	9305      	str	r3, [sp, #20]
	struct bme280_uncomp_data uncomp_data = { 0 };
1a001296:	9301      	str	r3, [sp, #4]
1a001298:	9302      	str	r3, [sp, #8]
1a00129a:	9303      	str	r3, [sp, #12]
	rslt = null_ptr_check(dev);
1a00129c:	4610      	mov	r0, r2
1a00129e:	f7ff fc95 	bl	1a000bcc <null_ptr_check>
	if ((rslt == BME280_OK) && (comp_data != NULL)) {
1a0012a2:	b9c0      	cbnz	r0, 1a0012d6 <bme280GetSensorData+0x50>
1a0012a4:	b1d5      	cbz	r5, 1a0012dc <bme280GetSensorData+0x56>
		rslt = bme280GetRegs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN,
1a0012a6:	4623      	mov	r3, r4
1a0012a8:	2208      	movs	r2, #8
1a0012aa:	a904      	add	r1, sp, #16
1a0012ac:	20f7      	movs	r0, #247	; 0xf7
1a0012ae:	f7ff fd4d 	bl	1a000d4c <bme280GetRegs>
		if (rslt == BME280_OK) {
1a0012b2:	4603      	mov	r3, r0
1a0012b4:	b110      	cbz	r0, 1a0012bc <bme280GetSensorData+0x36>
}
1a0012b6:	4618      	mov	r0, r3
1a0012b8:	b006      	add	sp, #24
1a0012ba:	bd70      	pop	{r4, r5, r6, pc}
			bme280ParseSensorData(reg_data, &uncomp_data);
1a0012bc:	a901      	add	r1, sp, #4
1a0012be:	a804      	add	r0, sp, #16
1a0012c0:	f7ff ff8d 	bl	1a0011de <bme280ParseSensorData>
			rslt = bme280CompensateData(sensor_comp, &uncomp_data, comp_data,
1a0012c4:	f104 0310 	add.w	r3, r4, #16
1a0012c8:	462a      	mov	r2, r5
1a0012ca:	a901      	add	r1, sp, #4
1a0012cc:	4630      	mov	r0, r6
1a0012ce:	f7ff ffa1 	bl	1a001214 <bme280CompensateData>
1a0012d2:	4603      	mov	r3, r0
1a0012d4:	e7ef      	b.n	1a0012b6 <bme280GetSensorData+0x30>
		rslt = BME280_E_NULL_PTR;
1a0012d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0012da:	e7ec      	b.n	1a0012b6 <bme280GetSensorData+0x30>
1a0012dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0012e0:	e7e9      	b.n	1a0012b6 <bme280GetSensorData+0x30>

1a0012e2 <initialise_monitor_handles>:
}
1a0012e2:	4770      	bx	lr

1a0012e4 <Reset_Handler>:
void Reset_Handler(void) {
1a0012e4:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0012e6:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0012e8:	4b19      	ldr	r3, [pc, #100]	; (1a001350 <Reset_Handler+0x6c>)
1a0012ea:	4a1a      	ldr	r2, [pc, #104]	; (1a001354 <Reset_Handler+0x70>)
1a0012ec:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0012ee:	3304      	adds	r3, #4
1a0012f0:	4a19      	ldr	r2, [pc, #100]	; (1a001358 <Reset_Handler+0x74>)
1a0012f2:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0012f4:	2300      	movs	r3, #0
1a0012f6:	e005      	b.n	1a001304 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0012f8:	4a18      	ldr	r2, [pc, #96]	; (1a00135c <Reset_Handler+0x78>)
1a0012fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0012fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001302:	3301      	adds	r3, #1
1a001304:	2b07      	cmp	r3, #7
1a001306:	d9f7      	bls.n	1a0012f8 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a001308:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00130a:	4b15      	ldr	r3, [pc, #84]	; (1a001360 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a00130c:	e007      	b.n	1a00131e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00130e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a001312:	689a      	ldr	r2, [r3, #8]
1a001314:	6859      	ldr	r1, [r3, #4]
1a001316:	6818      	ldr	r0, [r3, #0]
1a001318:	f7fe ff37 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a00131c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00131e:	4a11      	ldr	r2, [pc, #68]	; (1a001364 <Reset_Handler+0x80>)
1a001320:	4293      	cmp	r3, r2
1a001322:	d3f4      	bcc.n	1a00130e <Reset_Handler+0x2a>
1a001324:	e006      	b.n	1a001334 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a001326:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001328:	6859      	ldr	r1, [r3, #4]
1a00132a:	f854 0b08 	ldr.w	r0, [r4], #8
1a00132e:	f7fe ff3b 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a001332:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001334:	4a0c      	ldr	r2, [pc, #48]	; (1a001368 <Reset_Handler+0x84>)
1a001336:	4293      	cmp	r3, r2
1a001338:	d3f5      	bcc.n	1a001326 <Reset_Handler+0x42>
    SystemInit();
1a00133a:	f002 ff35 	bl	1a0041a8 <SystemInit>
    __libc_init_array();
1a00133e:	f004 fc29 	bl	1a005b94 <__libc_init_array>
    initialise_monitor_handles();
1a001342:	f7ff ffce 	bl	1a0012e2 <initialise_monitor_handles>
    main();
1a001346:	f7ff f8b7 	bl	1a0004b8 <main>
        __asm__ volatile("wfi");
1a00134a:	bf30      	wfi
1a00134c:	e7fd      	b.n	1a00134a <Reset_Handler+0x66>
1a00134e:	bf00      	nop
1a001350:	40053100 	.word	0x40053100
1a001354:	10df1000 	.word	0x10df1000
1a001358:	01dff7ff 	.word	0x01dff7ff
1a00135c:	e000e280 	.word	0xe000e280
1a001360:	1a000114 	.word	0x1a000114
1a001364:	1a000150 	.word	0x1a000150
1a001368:	1a000178 	.word	0x1a000178

1a00136c <_fini>:
void _fini(void) {}
1a00136c:	4770      	bx	lr

1a00136e <_init>:
void _init(void) {}
1a00136e:	4770      	bx	lr

1a001370 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a001370:	2309      	movs	r3, #9
1a001372:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001378:	4770      	bx	lr

1a00137a <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00137a:	2358      	movs	r3, #88	; 0x58
1a00137c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00137e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001382:	4770      	bx	lr

1a001384 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a001384:	2902      	cmp	r1, #2
1a001386:	d904      	bls.n	1a001392 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a001388:	2309      	movs	r3, #9
1a00138a:	6003      	str	r3, [r0, #0]
       return -1;
1a00138c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001390:	4770      	bx	lr
       return 1;
1a001392:	2001      	movs	r0, #1
   }
}
1a001394:	4770      	bx	lr

1a001396 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a001396:	2358      	movs	r3, #88	; 0x58
1a001398:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00139a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00139e:	4770      	bx	lr

1a0013a0 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0013a0:	2902      	cmp	r1, #2
1a0013a2:	d81f      	bhi.n	1a0013e4 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0013a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0013a8:	461d      	mov	r5, r3
1a0013aa:	4617      	mov	r7, r2
1a0013ac:	4606      	mov	r6, r0
  size_t i = 0;
1a0013ae:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0013b0:	42ac      	cmp	r4, r5
1a0013b2:	d211      	bcs.n	1a0013d8 <_read_r+0x38>
         int c = __stdio_getchar();
1a0013b4:	f001 ffcf 	bl	1a003356 <__stdio_getchar>
         if( c != -1 ){
1a0013b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0013bc:	d0f8      	beq.n	1a0013b0 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0013be:	f104 0801 	add.w	r8, r4, #1
1a0013c2:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0013c4:	280d      	cmp	r0, #13
1a0013c6:	d003      	beq.n	1a0013d0 <_read_r+0x30>
1a0013c8:	280a      	cmp	r0, #10
1a0013ca:	d001      	beq.n	1a0013d0 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0013cc:	4644      	mov	r4, r8
1a0013ce:	e7ef      	b.n	1a0013b0 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0013d0:	f001 ffc1 	bl	1a003356 <__stdio_getchar>
               return i;
1a0013d4:	4640      	mov	r0, r8
1a0013d6:	e003      	b.n	1a0013e0 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0013d8:	2313      	movs	r3, #19
1a0013da:	6033      	str	r3, [r6, #0]
      return -1;
1a0013dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0013e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0013e4:	2313      	movs	r3, #19
1a0013e6:	6003      	str	r3, [r0, #0]
      return -1;
1a0013e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0013ec:	4770      	bx	lr

1a0013ee <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0013ee:	2902      	cmp	r1, #2
1a0013f0:	d80c      	bhi.n	1a00140c <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0013f2:	b570      	push	{r4, r5, r6, lr}
1a0013f4:	461d      	mov	r5, r3
1a0013f6:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0013f8:	2400      	movs	r4, #0
1a0013fa:	42ac      	cmp	r4, r5
1a0013fc:	d204      	bcs.n	1a001408 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a0013fe:	5d30      	ldrb	r0, [r6, r4]
1a001400:	f001 ffa4 	bl	1a00334c <__stdio_putchar>
       for (i = 0; i < n; i++)
1a001404:	3401      	adds	r4, #1
1a001406:	e7f8      	b.n	1a0013fa <_write_r+0xc>
       return n;
1a001408:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00140a:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a00140c:	2313      	movs	r3, #19
1a00140e:	6003      	str	r3, [r0, #0]
       return -1;
1a001410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a001414:	4770      	bx	lr
1a001416:	Address 0x000000001a001416 is out of bounds.


1a001418 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a001418:	4b05      	ldr	r3, [pc, #20]	; (1a001430 <_sbrk_r+0x18>)
1a00141a:	681b      	ldr	r3, [r3, #0]
1a00141c:	b123      	cbz	r3, 1a001428 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a00141e:	4b04      	ldr	r3, [pc, #16]	; (1a001430 <_sbrk_r+0x18>)
1a001420:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a001422:	4401      	add	r1, r0
1a001424:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a001426:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a001428:	4b01      	ldr	r3, [pc, #4]	; (1a001430 <_sbrk_r+0x18>)
1a00142a:	4a02      	ldr	r2, [pc, #8]	; (1a001434 <_sbrk_r+0x1c>)
1a00142c:	601a      	str	r2, [r3, #0]
1a00142e:	e7f6      	b.n	1a00141e <_sbrk_r+0x6>
1a001430:	100000cc 	.word	0x100000cc
1a001434:	10002da4 	.word	0x10002da4

1a001438 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a001438:	4a12      	ldr	r2, [pc, #72]	; (1a001484 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a00143a:	f012 0f07 	tst.w	r2, #7
1a00143e:	d007      	beq.n	1a001450 <prvHeapInit+0x18>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a001440:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a001442:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a001446:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a00144a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00144c:	460a      	mov	r2, r1
1a00144e:	e001      	b.n	1a001454 <prvHeapInit+0x1c>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a001450:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a001454:	480c      	ldr	r0, [pc, #48]	; (1a001488 <prvHeapInit+0x50>)
1a001456:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a001458:	2100      	movs	r1, #0
1a00145a:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a00145c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a00145e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a001460:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a001464:	4809      	ldr	r0, [pc, #36]	; (1a00148c <prvHeapInit+0x54>)
1a001466:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a001468:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a00146a:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a00146c:	1a99      	subs	r1, r3, r2
1a00146e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a001470:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a001472:	4b07      	ldr	r3, [pc, #28]	; (1a001490 <prvHeapInit+0x58>)
1a001474:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a001476:	4b07      	ldr	r3, [pc, #28]	; (1a001494 <prvHeapInit+0x5c>)
1a001478:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a00147a:	4b07      	ldr	r3, [pc, #28]	; (1a001498 <prvHeapInit+0x60>)
1a00147c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a001480:	601a      	str	r2, [r3, #0]
}
1a001482:	4770      	bx	lr
1a001484:	100000d4 	.word	0x100000d4
1a001488:	100020e0 	.word	0x100020e0
1a00148c:	100000d0 	.word	0x100000d0
1a001490:	100020dc 	.word	0x100020dc
1a001494:	100020d8 	.word	0x100020d8
1a001498:	100020d4 	.word	0x100020d4

1a00149c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a00149c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00149e:	4a13      	ldr	r2, [pc, #76]	; (1a0014ec <prvInsertBlockIntoFreeList+0x50>)
1a0014a0:	e000      	b.n	1a0014a4 <prvInsertBlockIntoFreeList+0x8>
1a0014a2:	461a      	mov	r2, r3
1a0014a4:	6813      	ldr	r3, [r2, #0]
1a0014a6:	4283      	cmp	r3, r0
1a0014a8:	d3fb      	bcc.n	1a0014a2 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a0014aa:	6851      	ldr	r1, [r2, #4]
1a0014ac:	1854      	adds	r4, r2, r1
1a0014ae:	4284      	cmp	r4, r0
1a0014b0:	d00a      	beq.n	1a0014c8 <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a0014b2:	6841      	ldr	r1, [r0, #4]
1a0014b4:	1844      	adds	r4, r0, r1
1a0014b6:	42a3      	cmp	r3, r4
1a0014b8:	d00b      	beq.n	1a0014d2 <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a0014ba:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a0014bc:	4290      	cmp	r0, r2
1a0014be:	d000      	beq.n	1a0014c2 <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a0014c0:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a0014c2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0014c6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a0014c8:	6840      	ldr	r0, [r0, #4]
1a0014ca:	4401      	add	r1, r0
1a0014cc:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
1a0014ce:	4610      	mov	r0, r2
1a0014d0:	e7ef      	b.n	1a0014b2 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a0014d2:	4c07      	ldr	r4, [pc, #28]	; (1a0014f0 <prvInsertBlockIntoFreeList+0x54>)
1a0014d4:	6824      	ldr	r4, [r4, #0]
1a0014d6:	42a3      	cmp	r3, r4
1a0014d8:	d006      	beq.n	1a0014e8 <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a0014da:	685b      	ldr	r3, [r3, #4]
1a0014dc:	4419      	add	r1, r3
1a0014de:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a0014e0:	6813      	ldr	r3, [r2, #0]
1a0014e2:	681b      	ldr	r3, [r3, #0]
1a0014e4:	6003      	str	r3, [r0, #0]
1a0014e6:	e7e9      	b.n	1a0014bc <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a0014e8:	6004      	str	r4, [r0, #0]
1a0014ea:	e7e7      	b.n	1a0014bc <prvInsertBlockIntoFreeList+0x20>
1a0014ec:	100020e0 	.word	0x100020e0
1a0014f0:	100000d0 	.word	0x100000d0

1a0014f4 <pvPortMalloc>:
{
1a0014f4:	b570      	push	{r4, r5, r6, lr}
1a0014f6:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a0014f8:	f000 ff30 	bl	1a00235c <vTaskSuspendAll>
		if( pxEnd == NULL )
1a0014fc:	4b3f      	ldr	r3, [pc, #252]	; (1a0015fc <pvPortMalloc+0x108>)
1a0014fe:	681b      	ldr	r3, [r3, #0]
1a001500:	b1bb      	cbz	r3, 1a001532 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a001502:	4b3f      	ldr	r3, [pc, #252]	; (1a001600 <pvPortMalloc+0x10c>)
1a001504:	681b      	ldr	r3, [r3, #0]
1a001506:	421c      	tst	r4, r3
1a001508:	d116      	bne.n	1a001538 <pvPortMalloc+0x44>
			if( xWantedSize > 0 )
1a00150a:	b334      	cbz	r4, 1a00155a <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a00150c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a00150e:	f014 0f07 	tst.w	r4, #7
1a001512:	d022      	beq.n	1a00155a <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a001514:	f024 0407 	bic.w	r4, r4, #7
1a001518:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a00151a:	f004 0307 	and.w	r3, r4, #7
1a00151e:	b1e3      	cbz	r3, 1a00155a <pvPortMalloc+0x66>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a001520:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001524:	f383 8811 	msr	BASEPRI, r3
1a001528:	f3bf 8f6f 	isb	sy
1a00152c:	f3bf 8f4f 	dsb	sy
1a001530:	e7fe      	b.n	1a001530 <pvPortMalloc+0x3c>
			prvHeapInit();
1a001532:	f7ff ff81 	bl	1a001438 <prvHeapInit>
1a001536:	e7e4      	b.n	1a001502 <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
1a001538:	f000 ffaa 	bl	1a002490 <xTaskResumeAll>
void *pvReturn = NULL;
1a00153c:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a00153e:	f000 fc9f 	bl	1a001e80 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a001542:	f016 0f07 	tst.w	r6, #7
1a001546:	d057      	beq.n	1a0015f8 <pvPortMalloc+0x104>
1a001548:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00154c:	f383 8811 	msr	BASEPRI, r3
1a001550:	f3bf 8f6f 	isb	sy
1a001554:	f3bf 8f4f 	dsb	sy
1a001558:	e7fe      	b.n	1a001558 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a00155a:	b134      	cbz	r4, 1a00156a <pvPortMalloc+0x76>
1a00155c:	4b29      	ldr	r3, [pc, #164]	; (1a001604 <pvPortMalloc+0x110>)
1a00155e:	681b      	ldr	r3, [r3, #0]
1a001560:	42a3      	cmp	r3, r4
1a001562:	d306      	bcc.n	1a001572 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a001564:	4b28      	ldr	r3, [pc, #160]	; (1a001608 <pvPortMalloc+0x114>)
1a001566:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a001568:	e009      	b.n	1a00157e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a00156a:	f000 ff91 	bl	1a002490 <xTaskResumeAll>
void *pvReturn = NULL;
1a00156e:	2600      	movs	r6, #0
1a001570:	e7e5      	b.n	1a00153e <pvPortMalloc+0x4a>
	( void ) xTaskResumeAll();
1a001572:	f000 ff8d 	bl	1a002490 <xTaskResumeAll>
void *pvReturn = NULL;
1a001576:	2600      	movs	r6, #0
1a001578:	e7e1      	b.n	1a00153e <pvPortMalloc+0x4a>
					pxPreviousBlock = pxBlock;
1a00157a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a00157c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a00157e:	686a      	ldr	r2, [r5, #4]
1a001580:	42a2      	cmp	r2, r4
1a001582:	d202      	bcs.n	1a00158a <pvPortMalloc+0x96>
1a001584:	682a      	ldr	r2, [r5, #0]
1a001586:	2a00      	cmp	r2, #0
1a001588:	d1f7      	bne.n	1a00157a <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a00158a:	4a1c      	ldr	r2, [pc, #112]	; (1a0015fc <pvPortMalloc+0x108>)
1a00158c:	6812      	ldr	r2, [r2, #0]
1a00158e:	42aa      	cmp	r2, r5
1a001590:	d014      	beq.n	1a0015bc <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a001592:	681e      	ldr	r6, [r3, #0]
1a001594:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a001596:	682a      	ldr	r2, [r5, #0]
1a001598:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a00159a:	686b      	ldr	r3, [r5, #4]
1a00159c:	1b1b      	subs	r3, r3, r4
1a00159e:	2b10      	cmp	r3, #16
1a0015a0:	d914      	bls.n	1a0015cc <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a0015a2:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a0015a4:	f010 0f07 	tst.w	r0, #7
1a0015a8:	d00c      	beq.n	1a0015c4 <pvPortMalloc+0xd0>
1a0015aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015ae:	f383 8811 	msr	BASEPRI, r3
1a0015b2:	f3bf 8f6f 	isb	sy
1a0015b6:	f3bf 8f4f 	dsb	sy
1a0015ba:	e7fe      	b.n	1a0015ba <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a0015bc:	f000 ff68 	bl	1a002490 <xTaskResumeAll>
void *pvReturn = NULL;
1a0015c0:	2600      	movs	r6, #0
1a0015c2:	e7bc      	b.n	1a00153e <pvPortMalloc+0x4a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a0015c4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a0015c6:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a0015c8:	f7ff ff68 	bl	1a00149c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a0015cc:	686a      	ldr	r2, [r5, #4]
1a0015ce:	490d      	ldr	r1, [pc, #52]	; (1a001604 <pvPortMalloc+0x110>)
1a0015d0:	680b      	ldr	r3, [r1, #0]
1a0015d2:	1a9b      	subs	r3, r3, r2
1a0015d4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a0015d6:	490d      	ldr	r1, [pc, #52]	; (1a00160c <pvPortMalloc+0x118>)
1a0015d8:	6809      	ldr	r1, [r1, #0]
1a0015da:	428b      	cmp	r3, r1
1a0015dc:	d201      	bcs.n	1a0015e2 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a0015de:	490b      	ldr	r1, [pc, #44]	; (1a00160c <pvPortMalloc+0x118>)
1a0015e0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a0015e2:	4b07      	ldr	r3, [pc, #28]	; (1a001600 <pvPortMalloc+0x10c>)
1a0015e4:	681b      	ldr	r3, [r3, #0]
1a0015e6:	4313      	orrs	r3, r2
1a0015e8:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a0015ea:	2300      	movs	r3, #0
1a0015ec:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a0015ee:	f000 ff4f 	bl	1a002490 <xTaskResumeAll>
		if( pvReturn == NULL )
1a0015f2:	2e00      	cmp	r6, #0
1a0015f4:	d1a5      	bne.n	1a001542 <pvPortMalloc+0x4e>
1a0015f6:	e7a2      	b.n	1a00153e <pvPortMalloc+0x4a>
}
1a0015f8:	4630      	mov	r0, r6
1a0015fa:	bd70      	pop	{r4, r5, r6, pc}
1a0015fc:	100000d0 	.word	0x100000d0
1a001600:	100020d4 	.word	0x100020d4
1a001604:	100020d8 	.word	0x100020d8
1a001608:	100020e0 	.word	0x100020e0
1a00160c:	100020dc 	.word	0x100020dc

1a001610 <vPortFree>:
	if( pv != NULL )
1a001610:	b380      	cbz	r0, 1a001674 <vPortFree+0x64>
{
1a001612:	b538      	push	{r3, r4, r5, lr}
1a001614:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a001616:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a00161a:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00161e:	4916      	ldr	r1, [pc, #88]	; (1a001678 <vPortFree+0x68>)
1a001620:	6809      	ldr	r1, [r1, #0]
1a001622:	420a      	tst	r2, r1
1a001624:	d108      	bne.n	1a001638 <vPortFree+0x28>
1a001626:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00162a:	f383 8811 	msr	BASEPRI, r3
1a00162e:	f3bf 8f6f 	isb	sy
1a001632:	f3bf 8f4f 	dsb	sy
1a001636:	e7fe      	b.n	1a001636 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a001638:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a00163c:	b140      	cbz	r0, 1a001650 <vPortFree+0x40>
1a00163e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001642:	f383 8811 	msr	BASEPRI, r3
1a001646:	f3bf 8f6f 	isb	sy
1a00164a:	f3bf 8f4f 	dsb	sy
1a00164e:	e7fe      	b.n	1a00164e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a001650:	ea22 0201 	bic.w	r2, r2, r1
1a001654:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a001658:	f000 fe80 	bl	1a00235c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a00165c:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a001660:	4a06      	ldr	r2, [pc, #24]	; (1a00167c <vPortFree+0x6c>)
1a001662:	6813      	ldr	r3, [r2, #0]
1a001664:	440b      	add	r3, r1
1a001666:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a001668:	4628      	mov	r0, r5
1a00166a:	f7ff ff17 	bl	1a00149c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a00166e:	f000 ff0f 	bl	1a002490 <xTaskResumeAll>
}
1a001672:	bd38      	pop	{r3, r4, r5, pc}
1a001674:	4770      	bx	lr
1a001676:	bf00      	nop
1a001678:	100020d4 	.word	0x100020d4
1a00167c:	100020d8 	.word	0x100020d8

1a001680 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a001680:	b510      	push	{r4, lr}
1a001682:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a001684:	f001 fbd8 	bl	1a002e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a001688:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00168a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00168c:	429a      	cmp	r2, r3
1a00168e:	d004      	beq.n	1a00169a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a001690:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a001692:	f001 fbf3 	bl	1a002e7c <vPortExitCritical>

	return xReturn;
}
1a001696:	4620      	mov	r0, r4
1a001698:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a00169a:	2401      	movs	r4, #1
1a00169c:	e7f9      	b.n	1a001692 <prvIsQueueFull+0x12>

1a00169e <prvIsQueueEmpty>:
{
1a00169e:	b510      	push	{r4, lr}
1a0016a0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0016a2:	f001 fbc9 	bl	1a002e38 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a0016a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0016a8:	b923      	cbnz	r3, 1a0016b4 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a0016aa:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a0016ac:	f001 fbe6 	bl	1a002e7c <vPortExitCritical>
}
1a0016b0:	4620      	mov	r0, r4
1a0016b2:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a0016b4:	2400      	movs	r4, #0
1a0016b6:	e7f9      	b.n	1a0016ac <prvIsQueueEmpty+0xe>

1a0016b8 <prvCopyDataToQueue>:
{
1a0016b8:	b570      	push	{r4, r5, r6, lr}
1a0016ba:	4604      	mov	r4, r0
1a0016bc:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0016be:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a0016c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0016c2:	b95a      	cbnz	r2, 1a0016dc <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0016c4:	6803      	ldr	r3, [r0, #0]
1a0016c6:	b11b      	cbz	r3, 1a0016d0 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0016c8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0016ca:	3501      	adds	r5, #1
1a0016cc:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0016ce:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0016d0:	6840      	ldr	r0, [r0, #4]
1a0016d2:	f001 f8c5 	bl	1a002860 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0016d6:	2300      	movs	r3, #0
1a0016d8:	6063      	str	r3, [r4, #4]
1a0016da:	e7f6      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0016dc:	b96e      	cbnz	r6, 1a0016fa <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0016de:	6880      	ldr	r0, [r0, #8]
1a0016e0:	f004 fa7f 	bl	1a005be2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0016e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0016e6:	68a3      	ldr	r3, [r4, #8]
1a0016e8:	4413      	add	r3, r2
1a0016ea:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0016ec:	6862      	ldr	r2, [r4, #4]
1a0016ee:	4293      	cmp	r3, r2
1a0016f0:	d319      	bcc.n	1a001726 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a0016f2:	6823      	ldr	r3, [r4, #0]
1a0016f4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0016f6:	2000      	movs	r0, #0
1a0016f8:	e7e7      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0016fa:	68c0      	ldr	r0, [r0, #12]
1a0016fc:	f004 fa71 	bl	1a005be2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a001700:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a001702:	4252      	negs	r2, r2
1a001704:	68e3      	ldr	r3, [r4, #12]
1a001706:	4413      	add	r3, r2
1a001708:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00170a:	6821      	ldr	r1, [r4, #0]
1a00170c:	428b      	cmp	r3, r1
1a00170e:	d202      	bcs.n	1a001716 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a001710:	6863      	ldr	r3, [r4, #4]
1a001712:	441a      	add	r2, r3
1a001714:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a001716:	2e02      	cmp	r6, #2
1a001718:	d001      	beq.n	1a00171e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a00171a:	2000      	movs	r0, #0
1a00171c:	e7d5      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00171e:	b125      	cbz	r5, 1a00172a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a001720:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a001722:	2000      	movs	r0, #0
1a001724:	e7d1      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
1a001726:	2000      	movs	r0, #0
1a001728:	e7cf      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
1a00172a:	2000      	movs	r0, #0
1a00172c:	e7cd      	b.n	1a0016ca <prvCopyDataToQueue+0x12>

1a00172e <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a00172e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001730:	b172      	cbz	r2, 1a001750 <prvCopyDataFromQueue+0x22>
{
1a001732:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a001734:	68c3      	ldr	r3, [r0, #12]
1a001736:	4413      	add	r3, r2
1a001738:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00173a:	6844      	ldr	r4, [r0, #4]
1a00173c:	42a3      	cmp	r3, r4
1a00173e:	d301      	bcc.n	1a001744 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a001740:	6803      	ldr	r3, [r0, #0]
1a001742:	60c3      	str	r3, [r0, #12]
1a001744:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a001746:	68c1      	ldr	r1, [r0, #12]
1a001748:	4620      	mov	r0, r4
1a00174a:	f004 fa4a 	bl	1a005be2 <memcpy>
}
1a00174e:	bd10      	pop	{r4, pc}
1a001750:	4770      	bx	lr

1a001752 <prvUnlockQueue>:
{
1a001752:	b538      	push	{r3, r4, r5, lr}
1a001754:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a001756:	f001 fb6f 	bl	1a002e38 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a00175a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a00175e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001760:	e003      	b.n	1a00176a <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a001762:	f001 f867 	bl	1a002834 <vTaskMissedYield>
			--cTxLock;
1a001766:	3c01      	subs	r4, #1
1a001768:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00176a:	2c00      	cmp	r4, #0
1a00176c:	dd08      	ble.n	1a001780 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00176e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a001770:	b133      	cbz	r3, 1a001780 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001772:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a001776:	f000 ffc9 	bl	1a00270c <xTaskRemoveFromEventList>
1a00177a:	2800      	cmp	r0, #0
1a00177c:	d0f3      	beq.n	1a001766 <prvUnlockQueue+0x14>
1a00177e:	e7f0      	b.n	1a001762 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a001780:	23ff      	movs	r3, #255	; 0xff
1a001782:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a001786:	f001 fb79 	bl	1a002e7c <vPortExitCritical>
	taskENTER_CRITICAL();
1a00178a:	f001 fb55 	bl	1a002e38 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a00178e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a001792:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001794:	e003      	b.n	1a00179e <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a001796:	f001 f84d 	bl	1a002834 <vTaskMissedYield>
				--cRxLock;
1a00179a:	3c01      	subs	r4, #1
1a00179c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00179e:	2c00      	cmp	r4, #0
1a0017a0:	dd08      	ble.n	1a0017b4 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0017a2:	692b      	ldr	r3, [r5, #16]
1a0017a4:	b133      	cbz	r3, 1a0017b4 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0017a6:	f105 0010 	add.w	r0, r5, #16
1a0017aa:	f000 ffaf 	bl	1a00270c <xTaskRemoveFromEventList>
1a0017ae:	2800      	cmp	r0, #0
1a0017b0:	d0f3      	beq.n	1a00179a <prvUnlockQueue+0x48>
1a0017b2:	e7f0      	b.n	1a001796 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0017b4:	23ff      	movs	r3, #255	; 0xff
1a0017b6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0017ba:	f001 fb5f 	bl	1a002e7c <vPortExitCritical>
}
1a0017be:	bd38      	pop	{r3, r4, r5, pc}

1a0017c0 <xQueueGenericReset>:
{
1a0017c0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0017c2:	b1e0      	cbz	r0, 1a0017fe <xQueueGenericReset+0x3e>
1a0017c4:	4604      	mov	r4, r0
1a0017c6:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0017c8:	f001 fb36 	bl	1a002e38 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0017cc:	6821      	ldr	r1, [r4, #0]
1a0017ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0017d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0017d2:	fb03 1002 	mla	r0, r3, r2, r1
1a0017d6:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0017d8:	2000      	movs	r0, #0
1a0017da:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0017dc:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0017de:	3a01      	subs	r2, #1
1a0017e0:	fb02 1303 	mla	r3, r2, r3, r1
1a0017e4:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0017e6:	23ff      	movs	r3, #255	; 0xff
1a0017e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0017ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0017f0:	b9ed      	cbnz	r5, 1a00182e <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0017f2:	6923      	ldr	r3, [r4, #16]
1a0017f4:	b963      	cbnz	r3, 1a001810 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0017f6:	f001 fb41 	bl	1a002e7c <vPortExitCritical>
}
1a0017fa:	2001      	movs	r0, #1
1a0017fc:	bd38      	pop	{r3, r4, r5, pc}
1a0017fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001802:	f383 8811 	msr	BASEPRI, r3
1a001806:	f3bf 8f6f 	isb	sy
1a00180a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a00180e:	e7fe      	b.n	1a00180e <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001810:	f104 0010 	add.w	r0, r4, #16
1a001814:	f000 ff7a 	bl	1a00270c <xTaskRemoveFromEventList>
1a001818:	2800      	cmp	r0, #0
1a00181a:	d0ec      	beq.n	1a0017f6 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a00181c:	4b08      	ldr	r3, [pc, #32]	; (1a001840 <xQueueGenericReset+0x80>)
1a00181e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001822:	601a      	str	r2, [r3, #0]
1a001824:	f3bf 8f4f 	dsb	sy
1a001828:	f3bf 8f6f 	isb	sy
1a00182c:	e7e3      	b.n	1a0017f6 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a00182e:	f104 0010 	add.w	r0, r4, #16
1a001832:	f000 fab0 	bl	1a001d96 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a001836:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00183a:	f000 faac 	bl	1a001d96 <vListInitialise>
1a00183e:	e7da      	b.n	1a0017f6 <xQueueGenericReset+0x36>
1a001840:	e000ed04 	.word	0xe000ed04

1a001844 <prvInitialiseNewQueue>:
{
1a001844:	b538      	push	{r3, r4, r5, lr}
1a001846:	461d      	mov	r5, r3
1a001848:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a00184a:	460b      	mov	r3, r1
1a00184c:	b949      	cbnz	r1, 1a001862 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a00184e:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a001850:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a001852:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a001854:	2101      	movs	r1, #1
1a001856:	4620      	mov	r0, r4
1a001858:	f7ff ffb2 	bl	1a0017c0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a00185c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a001860:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a001862:	6022      	str	r2, [r4, #0]
1a001864:	e7f4      	b.n	1a001850 <prvInitialiseNewQueue+0xc>

1a001866 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a001866:	b940      	cbnz	r0, 1a00187a <xQueueGenericCreateStatic+0x14>
1a001868:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00186c:	f383 8811 	msr	BASEPRI, r3
1a001870:	f3bf 8f6f 	isb	sy
1a001874:	f3bf 8f4f 	dsb	sy
1a001878:	e7fe      	b.n	1a001878 <xQueueGenericCreateStatic+0x12>
	{
1a00187a:	b510      	push	{r4, lr}
1a00187c:	b084      	sub	sp, #16
1a00187e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a001880:	b153      	cbz	r3, 1a001898 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a001882:	b192      	cbz	r2, 1a0018aa <xQueueGenericCreateStatic+0x44>
1a001884:	b989      	cbnz	r1, 1a0018aa <xQueueGenericCreateStatic+0x44>
1a001886:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00188a:	f383 8811 	msr	BASEPRI, r3
1a00188e:	f3bf 8f6f 	isb	sy
1a001892:	f3bf 8f4f 	dsb	sy
1a001896:	e7fe      	b.n	1a001896 <xQueueGenericCreateStatic+0x30>
1a001898:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00189c:	f383 8811 	msr	BASEPRI, r3
1a0018a0:	f3bf 8f6f 	isb	sy
1a0018a4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
1a0018a8:	e7fe      	b.n	1a0018a8 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a0018aa:	b16a      	cbz	r2, 1a0018c8 <xQueueGenericCreateStatic+0x62>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a0018ac:	2050      	movs	r0, #80	; 0x50
1a0018ae:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a0018b0:	9803      	ldr	r0, [sp, #12]
1a0018b2:	2850      	cmp	r0, #80	; 0x50
1a0018b4:	d013      	beq.n	1a0018de <xQueueGenericCreateStatic+0x78>
1a0018b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018ba:	f383 8811 	msr	BASEPRI, r3
1a0018be:	f3bf 8f6f 	isb	sy
1a0018c2:	f3bf 8f4f 	dsb	sy
1a0018c6:	e7fe      	b.n	1a0018c6 <xQueueGenericCreateStatic+0x60>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a0018c8:	2900      	cmp	r1, #0
1a0018ca:	d0ef      	beq.n	1a0018ac <xQueueGenericCreateStatic+0x46>
1a0018cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018d0:	f383 8811 	msr	BASEPRI, r3
1a0018d4:	f3bf 8f6f 	isb	sy
1a0018d8:	f3bf 8f4f 	dsb	sy
1a0018dc:	e7fe      	b.n	1a0018dc <xQueueGenericCreateStatic+0x76>
1a0018de:	4620      	mov	r0, r4
1a0018e0:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a0018e2:	2301      	movs	r3, #1
1a0018e4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0018e8:	9400      	str	r4, [sp, #0]
1a0018ea:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a0018ee:	f7ff ffa9 	bl	1a001844 <prvInitialiseNewQueue>
	}
1a0018f2:	4620      	mov	r0, r4
1a0018f4:	b004      	add	sp, #16
1a0018f6:	bd10      	pop	{r4, pc}

1a0018f8 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0018f8:	b940      	cbnz	r0, 1a00190c <xQueueGenericCreate+0x14>
1a0018fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018fe:	f383 8811 	msr	BASEPRI, r3
1a001902:	f3bf 8f6f 	isb	sy
1a001906:	f3bf 8f4f 	dsb	sy
1a00190a:	e7fe      	b.n	1a00190a <xQueueGenericCreate+0x12>
	{
1a00190c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00190e:	b083      	sub	sp, #12
1a001910:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a001912:	b1b1      	cbz	r1, 1a001942 <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001914:	fb01 f000 	mul.w	r0, r1, r0
1a001918:	4617      	mov	r7, r2
1a00191a:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a00191c:	3050      	adds	r0, #80	; 0x50
1a00191e:	f7ff fde9 	bl	1a0014f4 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a001922:	4605      	mov	r5, r0
1a001924:	b150      	cbz	r0, 1a00193c <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a001926:	2300      	movs	r3, #0
1a001928:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00192c:	9000      	str	r0, [sp, #0]
1a00192e:	463b      	mov	r3, r7
1a001930:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a001934:	4621      	mov	r1, r4
1a001936:	4630      	mov	r0, r6
1a001938:	f7ff ff84 	bl	1a001844 <prvInitialiseNewQueue>
	}
1a00193c:	4628      	mov	r0, r5
1a00193e:	b003      	add	sp, #12
1a001940:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
1a001942:	2000      	movs	r0, #0
1a001944:	e7e8      	b.n	1a001918 <xQueueGenericCreate+0x20>
1a001946:	Address 0x000000001a001946 is out of bounds.


1a001948 <xQueueGenericSend>:
{
1a001948:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00194a:	b085      	sub	sp, #20
1a00194c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a00194e:	b178      	cbz	r0, 1a001970 <xQueueGenericSend+0x28>
1a001950:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001952:	b1b1      	cbz	r1, 1a001982 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001954:	2b02      	cmp	r3, #2
1a001956:	d120      	bne.n	1a00199a <xQueueGenericSend+0x52>
1a001958:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00195a:	2a01      	cmp	r2, #1
1a00195c:	d01d      	beq.n	1a00199a <xQueueGenericSend+0x52>
1a00195e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001962:	f383 8811 	msr	BASEPRI, r3
1a001966:	f3bf 8f6f 	isb	sy
1a00196a:	f3bf 8f4f 	dsb	sy
1a00196e:	e7fe      	b.n	1a00196e <xQueueGenericSend+0x26>
1a001970:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001974:	f383 8811 	msr	BASEPRI, r3
1a001978:	f3bf 8f6f 	isb	sy
1a00197c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a001980:	e7fe      	b.n	1a001980 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001982:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001984:	2a00      	cmp	r2, #0
1a001986:	d0e5      	beq.n	1a001954 <xQueueGenericSend+0xc>
1a001988:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00198c:	f383 8811 	msr	BASEPRI, r3
1a001990:	f3bf 8f6f 	isb	sy
1a001994:	f3bf 8f4f 	dsb	sy
1a001998:	e7fe      	b.n	1a001998 <xQueueGenericSend+0x50>
1a00199a:	461e      	mov	r6, r3
1a00199c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00199e:	f000 ff4f 	bl	1a002840 <xTaskGetSchedulerState>
1a0019a2:	b950      	cbnz	r0, 1a0019ba <xQueueGenericSend+0x72>
1a0019a4:	9b01      	ldr	r3, [sp, #4]
1a0019a6:	b153      	cbz	r3, 1a0019be <xQueueGenericSend+0x76>
1a0019a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019ac:	f383 8811 	msr	BASEPRI, r3
1a0019b0:	f3bf 8f6f 	isb	sy
1a0019b4:	f3bf 8f4f 	dsb	sy
1a0019b8:	e7fe      	b.n	1a0019b8 <xQueueGenericSend+0x70>
1a0019ba:	2500      	movs	r5, #0
1a0019bc:	e03b      	b.n	1a001a36 <xQueueGenericSend+0xee>
1a0019be:	2500      	movs	r5, #0
1a0019c0:	e039      	b.n	1a001a36 <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0019c2:	4632      	mov	r2, r6
1a0019c4:	4639      	mov	r1, r7
1a0019c6:	4620      	mov	r0, r4
1a0019c8:	f7ff fe76 	bl	1a0016b8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0019cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0019ce:	b96b      	cbnz	r3, 1a0019ec <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a0019d0:	b138      	cbz	r0, 1a0019e2 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a0019d2:	4b3c      	ldr	r3, [pc, #240]	; (1a001ac4 <xQueueGenericSend+0x17c>)
1a0019d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019d8:	601a      	str	r2, [r3, #0]
1a0019da:	f3bf 8f4f 	dsb	sy
1a0019de:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0019e2:	f001 fa4b 	bl	1a002e7c <vPortExitCritical>
				return pdPASS;
1a0019e6:	2001      	movs	r0, #1
}
1a0019e8:	b005      	add	sp, #20
1a0019ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0019ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0019f0:	f000 fe8c 	bl	1a00270c <xTaskRemoveFromEventList>
1a0019f4:	2800      	cmp	r0, #0
1a0019f6:	d0f4      	beq.n	1a0019e2 <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a0019f8:	4b32      	ldr	r3, [pc, #200]	; (1a001ac4 <xQueueGenericSend+0x17c>)
1a0019fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019fe:	601a      	str	r2, [r3, #0]
1a001a00:	f3bf 8f4f 	dsb	sy
1a001a04:	f3bf 8f6f 	isb	sy
1a001a08:	e7eb      	b.n	1a0019e2 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a001a0a:	f001 fa37 	bl	1a002e7c <vPortExitCritical>
					return errQUEUE_FULL;
1a001a0e:	2000      	movs	r0, #0
1a001a10:	e7ea      	b.n	1a0019e8 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001a12:	a802      	add	r0, sp, #8
1a001a14:	f000 fec0 	bl	1a002798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001a18:	2501      	movs	r5, #1
1a001a1a:	e019      	b.n	1a001a50 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a001a1c:	2300      	movs	r3, #0
1a001a1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001a22:	e021      	b.n	1a001a68 <xQueueGenericSend+0x120>
1a001a24:	2300      	movs	r3, #0
1a001a26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001a2a:	e023      	b.n	1a001a74 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a001a2c:	4620      	mov	r0, r4
1a001a2e:	f7ff fe90 	bl	1a001752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001a32:	f000 fd2d 	bl	1a002490 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a001a36:	f001 f9ff 	bl	1a002e38 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001a3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001a3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001a3e:	429a      	cmp	r2, r3
1a001a40:	d3bf      	bcc.n	1a0019c2 <xQueueGenericSend+0x7a>
1a001a42:	2e02      	cmp	r6, #2
1a001a44:	d0bd      	beq.n	1a0019c2 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001a46:	9b01      	ldr	r3, [sp, #4]
1a001a48:	2b00      	cmp	r3, #0
1a001a4a:	d0de      	beq.n	1a001a0a <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a001a4c:	2d00      	cmp	r5, #0
1a001a4e:	d0e0      	beq.n	1a001a12 <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a001a50:	f001 fa14 	bl	1a002e7c <vPortExitCritical>
		vTaskSuspendAll();
1a001a54:	f000 fc82 	bl	1a00235c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001a58:	f001 f9ee 	bl	1a002e38 <vPortEnterCritical>
1a001a5c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001a60:	b25b      	sxtb	r3, r3
1a001a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001a66:	d0d9      	beq.n	1a001a1c <xQueueGenericSend+0xd4>
1a001a68:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001a6c:	b25b      	sxtb	r3, r3
1a001a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001a72:	d0d7      	beq.n	1a001a24 <xQueueGenericSend+0xdc>
1a001a74:	f001 fa02 	bl	1a002e7c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001a78:	a901      	add	r1, sp, #4
1a001a7a:	a802      	add	r0, sp, #8
1a001a7c:	f000 fe98 	bl	1a0027b0 <xTaskCheckForTimeOut>
1a001a80:	b9c8      	cbnz	r0, 1a001ab6 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a001a82:	4620      	mov	r0, r4
1a001a84:	f7ff fdfc 	bl	1a001680 <prvIsQueueFull>
1a001a88:	2800      	cmp	r0, #0
1a001a8a:	d0cf      	beq.n	1a001a2c <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001a8c:	9901      	ldr	r1, [sp, #4]
1a001a8e:	f104 0010 	add.w	r0, r4, #16
1a001a92:	f000 fe07 	bl	1a0026a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001a96:	4620      	mov	r0, r4
1a001a98:	f7ff fe5b 	bl	1a001752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001a9c:	f000 fcf8 	bl	1a002490 <xTaskResumeAll>
1a001aa0:	2800      	cmp	r0, #0
1a001aa2:	d1c8      	bne.n	1a001a36 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a001aa4:	4b07      	ldr	r3, [pc, #28]	; (1a001ac4 <xQueueGenericSend+0x17c>)
1a001aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001aaa:	601a      	str	r2, [r3, #0]
1a001aac:	f3bf 8f4f 	dsb	sy
1a001ab0:	f3bf 8f6f 	isb	sy
1a001ab4:	e7bf      	b.n	1a001a36 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a001ab6:	4620      	mov	r0, r4
1a001ab8:	f7ff fe4b 	bl	1a001752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001abc:	f000 fce8 	bl	1a002490 <xTaskResumeAll>
			return errQUEUE_FULL;
1a001ac0:	2000      	movs	r0, #0
1a001ac2:	e791      	b.n	1a0019e8 <xQueueGenericSend+0xa0>
1a001ac4:	e000ed04 	.word	0xe000ed04

1a001ac8 <xQueueGenericSendFromISR>:
{
1a001ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a001acc:	b178      	cbz	r0, 1a001aee <xQueueGenericSendFromISR+0x26>
1a001ace:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001ad0:	b1b1      	cbz	r1, 1a001b00 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001ad2:	2b02      	cmp	r3, #2
1a001ad4:	d120      	bne.n	1a001b18 <xQueueGenericSendFromISR+0x50>
1a001ad6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001ad8:	2801      	cmp	r0, #1
1a001ada:	d01d      	beq.n	1a001b18 <xQueueGenericSendFromISR+0x50>
1a001adc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ae0:	f383 8811 	msr	BASEPRI, r3
1a001ae4:	f3bf 8f6f 	isb	sy
1a001ae8:	f3bf 8f4f 	dsb	sy
1a001aec:	e7fe      	b.n	1a001aec <xQueueGenericSendFromISR+0x24>
1a001aee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001af2:	f383 8811 	msr	BASEPRI, r3
1a001af6:	f3bf 8f6f 	isb	sy
1a001afa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a001afe:	e7fe      	b.n	1a001afe <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001b00:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a001b02:	2800      	cmp	r0, #0
1a001b04:	d0e5      	beq.n	1a001ad2 <xQueueGenericSendFromISR+0xa>
1a001b06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b0a:	f383 8811 	msr	BASEPRI, r3
1a001b0e:	f3bf 8f6f 	isb	sy
1a001b12:	f3bf 8f4f 	dsb	sy
1a001b16:	e7fe      	b.n	1a001b16 <xQueueGenericSendFromISR+0x4e>
1a001b18:	461f      	mov	r7, r3
1a001b1a:	4690      	mov	r8, r2
1a001b1c:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001b1e:	f001 fab3 	bl	1a003088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a001b22:	f3ef 8611 	mrs	r6, BASEPRI
1a001b26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b2a:	f383 8811 	msr	BASEPRI, r3
1a001b2e:	f3bf 8f6f 	isb	sy
1a001b32:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001b36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001b38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001b3a:	429a      	cmp	r2, r3
1a001b3c:	d306      	bcc.n	1a001b4c <xQueueGenericSendFromISR+0x84>
1a001b3e:	2f02      	cmp	r7, #2
1a001b40:	d004      	beq.n	1a001b4c <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a001b42:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a001b44:	f386 8811 	msr	BASEPRI, r6
}
1a001b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a001b4c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001b50:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001b52:	463a      	mov	r2, r7
1a001b54:	4649      	mov	r1, r9
1a001b56:	4620      	mov	r0, r4
1a001b58:	f7ff fdae 	bl	1a0016b8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001b5c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001b60:	d005      	beq.n	1a001b6e <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001b62:	1c6b      	adds	r3, r5, #1
1a001b64:	b25b      	sxtb	r3, r3
1a001b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001b6a:	2001      	movs	r0, #1
1a001b6c:	e7ea      	b.n	1a001b44 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001b70:	b90b      	cbnz	r3, 1a001b76 <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a001b72:	2001      	movs	r0, #1
1a001b74:	e7e6      	b.n	1a001b44 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001b76:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001b7a:	f000 fdc7 	bl	1a00270c <xTaskRemoveFromEventList>
1a001b7e:	b130      	cbz	r0, 1a001b8e <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a001b80:	f1b8 0f00 	cmp.w	r8, #0
1a001b84:	d005      	beq.n	1a001b92 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001b86:	2001      	movs	r0, #1
1a001b88:	f8c8 0000 	str.w	r0, [r8]
1a001b8c:	e7da      	b.n	1a001b44 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a001b8e:	2001      	movs	r0, #1
1a001b90:	e7d8      	b.n	1a001b44 <xQueueGenericSendFromISR+0x7c>
1a001b92:	2001      	movs	r0, #1
1a001b94:	e7d6      	b.n	1a001b44 <xQueueGenericSendFromISR+0x7c>
1a001b96:	Address 0x000000001a001b96 is out of bounds.


1a001b98 <xQueueReceive>:
{
1a001b98:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001b9a:	b085      	sub	sp, #20
1a001b9c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001b9e:	b180      	cbz	r0, 1a001bc2 <xQueueReceive+0x2a>
1a001ba0:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001ba2:	b1b9      	cbz	r1, 1a001bd4 <xQueueReceive+0x3c>
1a001ba4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001ba6:	f000 fe4b 	bl	1a002840 <xTaskGetSchedulerState>
1a001baa:	b9f8      	cbnz	r0, 1a001bec <xQueueReceive+0x54>
1a001bac:	9b01      	ldr	r3, [sp, #4]
1a001bae:	b1fb      	cbz	r3, 1a001bf0 <xQueueReceive+0x58>
	__asm volatile
1a001bb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bb4:	f383 8811 	msr	BASEPRI, r3
1a001bb8:	f3bf 8f6f 	isb	sy
1a001bbc:	f3bf 8f4f 	dsb	sy
1a001bc0:	e7fe      	b.n	1a001bc0 <xQueueReceive+0x28>
1a001bc2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bc6:	f383 8811 	msr	BASEPRI, r3
1a001bca:	f3bf 8f6f 	isb	sy
1a001bce:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a001bd2:	e7fe      	b.n	1a001bd2 <xQueueReceive+0x3a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001bd4:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001bd6:	2b00      	cmp	r3, #0
1a001bd8:	d0e4      	beq.n	1a001ba4 <xQueueReceive+0xc>
1a001bda:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bde:	f383 8811 	msr	BASEPRI, r3
1a001be2:	f3bf 8f6f 	isb	sy
1a001be6:	f3bf 8f4f 	dsb	sy
1a001bea:	e7fe      	b.n	1a001bea <xQueueReceive+0x52>
1a001bec:	2600      	movs	r6, #0
1a001bee:	e03e      	b.n	1a001c6e <xQueueReceive+0xd6>
1a001bf0:	2600      	movs	r6, #0
1a001bf2:	e03c      	b.n	1a001c6e <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001bf4:	4639      	mov	r1, r7
1a001bf6:	4620      	mov	r0, r4
1a001bf8:	f7ff fd99 	bl	1a00172e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001bfc:	3d01      	subs	r5, #1
1a001bfe:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001c00:	6923      	ldr	r3, [r4, #16]
1a001c02:	b923      	cbnz	r3, 1a001c0e <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a001c04:	f001 f93a 	bl	1a002e7c <vPortExitCritical>
				return pdPASS;
1a001c08:	2001      	movs	r0, #1
}
1a001c0a:	b005      	add	sp, #20
1a001c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001c0e:	f104 0010 	add.w	r0, r4, #16
1a001c12:	f000 fd7b 	bl	1a00270c <xTaskRemoveFromEventList>
1a001c16:	2800      	cmp	r0, #0
1a001c18:	d0f4      	beq.n	1a001c04 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a001c1a:	4b35      	ldr	r3, [pc, #212]	; (1a001cf0 <xQueueReceive+0x158>)
1a001c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c20:	601a      	str	r2, [r3, #0]
1a001c22:	f3bf 8f4f 	dsb	sy
1a001c26:	f3bf 8f6f 	isb	sy
1a001c2a:	e7eb      	b.n	1a001c04 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a001c2c:	f001 f926 	bl	1a002e7c <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001c30:	2000      	movs	r0, #0
1a001c32:	e7ea      	b.n	1a001c0a <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001c34:	a802      	add	r0, sp, #8
1a001c36:	f000 fdaf 	bl	1a002798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001c3a:	2601      	movs	r6, #1
1a001c3c:	e021      	b.n	1a001c82 <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a001c3e:	2300      	movs	r3, #0
1a001c40:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001c44:	e029      	b.n	1a001c9a <xQueueReceive+0x102>
1a001c46:	2300      	movs	r3, #0
1a001c48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001c4c:	e02b      	b.n	1a001ca6 <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a001c4e:	4620      	mov	r0, r4
1a001c50:	f7ff fd7f 	bl	1a001752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001c54:	f000 fc1c 	bl	1a002490 <xTaskResumeAll>
1a001c58:	e009      	b.n	1a001c6e <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a001c5a:	4620      	mov	r0, r4
1a001c5c:	f7ff fd79 	bl	1a001752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001c60:	f000 fc16 	bl	1a002490 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001c64:	4620      	mov	r0, r4
1a001c66:	f7ff fd1a 	bl	1a00169e <prvIsQueueEmpty>
1a001c6a:	2800      	cmp	r0, #0
1a001c6c:	d13d      	bne.n	1a001cea <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a001c6e:	f001 f8e3 	bl	1a002e38 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001c72:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001c74:	2d00      	cmp	r5, #0
1a001c76:	d1bd      	bne.n	1a001bf4 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001c78:	9b01      	ldr	r3, [sp, #4]
1a001c7a:	2b00      	cmp	r3, #0
1a001c7c:	d0d6      	beq.n	1a001c2c <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a001c7e:	2e00      	cmp	r6, #0
1a001c80:	d0d8      	beq.n	1a001c34 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a001c82:	f001 f8fb 	bl	1a002e7c <vPortExitCritical>
		vTaskSuspendAll();
1a001c86:	f000 fb69 	bl	1a00235c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001c8a:	f001 f8d5 	bl	1a002e38 <vPortEnterCritical>
1a001c8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001c92:	b25b      	sxtb	r3, r3
1a001c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001c98:	d0d1      	beq.n	1a001c3e <xQueueReceive+0xa6>
1a001c9a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001c9e:	b25b      	sxtb	r3, r3
1a001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001ca4:	d0cf      	beq.n	1a001c46 <xQueueReceive+0xae>
1a001ca6:	f001 f8e9 	bl	1a002e7c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001caa:	a901      	add	r1, sp, #4
1a001cac:	a802      	add	r0, sp, #8
1a001cae:	f000 fd7f 	bl	1a0027b0 <xTaskCheckForTimeOut>
1a001cb2:	2800      	cmp	r0, #0
1a001cb4:	d1d1      	bne.n	1a001c5a <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001cb6:	4620      	mov	r0, r4
1a001cb8:	f7ff fcf1 	bl	1a00169e <prvIsQueueEmpty>
1a001cbc:	2800      	cmp	r0, #0
1a001cbe:	d0c6      	beq.n	1a001c4e <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001cc0:	9901      	ldr	r1, [sp, #4]
1a001cc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001cc6:	f000 fced 	bl	1a0026a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001cca:	4620      	mov	r0, r4
1a001ccc:	f7ff fd41 	bl	1a001752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001cd0:	f000 fbde 	bl	1a002490 <xTaskResumeAll>
1a001cd4:	2800      	cmp	r0, #0
1a001cd6:	d1ca      	bne.n	1a001c6e <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a001cd8:	4b05      	ldr	r3, [pc, #20]	; (1a001cf0 <xQueueReceive+0x158>)
1a001cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001cde:	601a      	str	r2, [r3, #0]
1a001ce0:	f3bf 8f4f 	dsb	sy
1a001ce4:	f3bf 8f6f 	isb	sy
1a001ce8:	e7c1      	b.n	1a001c6e <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a001cea:	2000      	movs	r0, #0
1a001cec:	e78d      	b.n	1a001c0a <xQueueReceive+0x72>
1a001cee:	bf00      	nop
1a001cf0:	e000ed04 	.word	0xe000ed04

1a001cf4 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
1a001cf4:	b140      	cbz	r0, 1a001d08 <uxQueueMessagesWaiting+0x14>
{
1a001cf6:	b510      	push	{r4, lr}
1a001cf8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001cfa:	f001 f89d 	bl	1a002e38 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1a001cfe:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
1a001d00:	f001 f8bc 	bl	1a002e7c <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1a001d04:	4620      	mov	r0, r4
1a001d06:	bd10      	pop	{r4, pc}
1a001d08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d0c:	f383 8811 	msr	BASEPRI, r3
1a001d10:	f3bf 8f6f 	isb	sy
1a001d14:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
1a001d18:	e7fe      	b.n	1a001d18 <uxQueueMessagesWaiting+0x24>
1a001d1a:	Address 0x000000001a001d1a is out of bounds.


1a001d1c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001d1c:	2300      	movs	r3, #0
1a001d1e:	2b07      	cmp	r3, #7
1a001d20:	d80c      	bhi.n	1a001d3c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001d22:	4a07      	ldr	r2, [pc, #28]	; (1a001d40 <vQueueAddToRegistry+0x24>)
1a001d24:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001d28:	b10a      	cbz	r2, 1a001d2e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001d2a:	3301      	adds	r3, #1
1a001d2c:	e7f7      	b.n	1a001d1e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001d2e:	4a04      	ldr	r2, [pc, #16]	; (1a001d40 <vQueueAddToRegistry+0x24>)
1a001d30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001d34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001d38:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a001d3a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001d3c:	4770      	bx	lr
1a001d3e:	bf00      	nop
1a001d40:	10002d48 	.word	0x10002d48

1a001d44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001d44:	b570      	push	{r4, r5, r6, lr}
1a001d46:	4604      	mov	r4, r0
1a001d48:	460d      	mov	r5, r1
1a001d4a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001d4c:	f001 f874 	bl	1a002e38 <vPortEnterCritical>
1a001d50:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001d54:	b25b      	sxtb	r3, r3
1a001d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001d5a:	d00d      	beq.n	1a001d78 <vQueueWaitForMessageRestricted+0x34>
1a001d5c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001d60:	b25b      	sxtb	r3, r3
1a001d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001d66:	d00b      	beq.n	1a001d80 <vQueueWaitForMessageRestricted+0x3c>
1a001d68:	f001 f888 	bl	1a002e7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001d6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001d6e:	b15b      	cbz	r3, 1a001d88 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001d70:	4620      	mov	r0, r4
1a001d72:	f7ff fcee 	bl	1a001752 <prvUnlockQueue>
	}
1a001d76:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001d78:	2300      	movs	r3, #0
1a001d7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001d7e:	e7ed      	b.n	1a001d5c <vQueueWaitForMessageRestricted+0x18>
1a001d80:	2300      	movs	r3, #0
1a001d82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001d86:	e7ef      	b.n	1a001d68 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001d88:	4632      	mov	r2, r6
1a001d8a:	4629      	mov	r1, r5
1a001d8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001d90:	f000 fca0 	bl	1a0026d4 <vTaskPlaceOnEventListRestricted>
1a001d94:	e7ec      	b.n	1a001d70 <vQueueWaitForMessageRestricted+0x2c>

1a001d96 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001d96:	f100 0308 	add.w	r3, r0, #8
1a001d9a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001da0:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001da2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001da4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001da6:	2300      	movs	r3, #0
1a001da8:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001daa:	4770      	bx	lr

1a001dac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001dac:	2300      	movs	r3, #0
1a001dae:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001db0:	4770      	bx	lr

1a001db2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001db2:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001db4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001db6:	689a      	ldr	r2, [r3, #8]
1a001db8:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001dba:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001dbc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001dbe:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001dc0:	6803      	ldr	r3, [r0, #0]
1a001dc2:	3301      	adds	r3, #1
1a001dc4:	6003      	str	r3, [r0, #0]
}
1a001dc6:	4770      	bx	lr

1a001dc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001dc8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001dca:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001dcc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001dd0:	d002      	beq.n	1a001dd8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001dd2:	f100 0208 	add.w	r2, r0, #8
1a001dd6:	e002      	b.n	1a001dde <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001dd8:	6902      	ldr	r2, [r0, #16]
1a001dda:	e004      	b.n	1a001de6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001ddc:	461a      	mov	r2, r3
1a001dde:	6853      	ldr	r3, [r2, #4]
1a001de0:	681c      	ldr	r4, [r3, #0]
1a001de2:	42ac      	cmp	r4, r5
1a001de4:	d9fa      	bls.n	1a001ddc <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001de6:	6853      	ldr	r3, [r2, #4]
1a001de8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001dea:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001dec:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001dee:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001df0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001df2:	6803      	ldr	r3, [r0, #0]
1a001df4:	3301      	adds	r3, #1
1a001df6:	6003      	str	r3, [r0, #0]
}
1a001df8:	bc30      	pop	{r4, r5}
1a001dfa:	4770      	bx	lr

1a001dfc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001dfc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001dfe:	6841      	ldr	r1, [r0, #4]
1a001e00:	6882      	ldr	r2, [r0, #8]
1a001e02:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001e04:	6841      	ldr	r1, [r0, #4]
1a001e06:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001e08:	685a      	ldr	r2, [r3, #4]
1a001e0a:	4282      	cmp	r2, r0
1a001e0c:	d006      	beq.n	1a001e1c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001e0e:	2200      	movs	r2, #0
1a001e10:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001e12:	681a      	ldr	r2, [r3, #0]
1a001e14:	3a01      	subs	r2, #1
1a001e16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001e18:	6818      	ldr	r0, [r3, #0]
}
1a001e1a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001e1c:	6882      	ldr	r2, [r0, #8]
1a001e1e:	605a      	str	r2, [r3, #4]
1a001e20:	e7f5      	b.n	1a001e0e <uxListRemove+0x12>
1a001e22:	Address 0x000000001a001e22 is out of bounds.


1a001e24 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a001e24:	4b03      	ldr	r3, [pc, #12]	; (1a001e34 <vApplicationGetIdleTaskMemory+0x10>)
1a001e26:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001e28:	4b03      	ldr	r3, [pc, #12]	; (1a001e38 <vApplicationGetIdleTaskMemory+0x14>)
1a001e2a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001e2c:	2364      	movs	r3, #100	; 0x64
1a001e2e:	6013      	str	r3, [r2, #0]
}
1a001e30:	4770      	bx	lr
1a001e32:	bf00      	nop
1a001e34:	100028b8 	.word	0x100028b8
1a001e38:	100020e8 	.word	0x100020e8

1a001e3c <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001e3c:	4b03      	ldr	r3, [pc, #12]	; (1a001e4c <vApplicationGetTimerTaskMemory+0x10>)
1a001e3e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001e40:	4b03      	ldr	r3, [pc, #12]	; (1a001e50 <vApplicationGetTimerTaskMemory+0x14>)
1a001e42:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a001e44:	f44f 73c8 	mov.w	r3, #400	; 0x190
1a001e48:	6013      	str	r3, [r2, #0]
1a001e4a:	4770      	bx	lr
1a001e4c:	10002918 	.word	0x10002918
1a001e50:	10002278 	.word	0x10002278

1a001e54 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a001e54:	b510      	push	{r4, lr}
1a001e56:	b082      	sub	sp, #8
1a001e58:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a001e5a:	9001      	str	r0, [sp, #4]
1a001e5c:	2300      	movs	r3, #0
1a001e5e:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001e60:	f000 ffea 	bl	1a002e38 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001e64:	9901      	ldr	r1, [sp, #4]
1a001e66:	4622      	mov	r2, r4
1a001e68:	4804      	ldr	r0, [pc, #16]	; (1a001e7c <vAssertCalled+0x28>)
1a001e6a:	f003 ff79 	bl	1a005d60 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001e6e:	9b00      	ldr	r3, [sp, #0]
1a001e70:	2b00      	cmp	r3, #0
1a001e72:	d0fc      	beq.n	1a001e6e <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001e74:	f001 f802 	bl	1a002e7c <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001e78:	b002      	add	sp, #8
1a001e7a:	bd10      	pop	{r4, pc}
1a001e7c:	1a006914 	.word	0x1a006914

1a001e80 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a001e80:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a001e82:	4804      	ldr	r0, [pc, #16]	; (1a001e94 <vApplicationMallocFailedHook+0x14>)
1a001e84:	f003 fff2 	bl	1a005e6c <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001e88:	4903      	ldr	r1, [pc, #12]	; (1a001e98 <vApplicationMallocFailedHook+0x18>)
1a001e8a:	202c      	movs	r0, #44	; 0x2c
1a001e8c:	f7ff ffe2 	bl	1a001e54 <vAssertCalled>
}
1a001e90:	bd08      	pop	{r3, pc}
1a001e92:	bf00      	nop
1a001e94:	1a0068a0 	.word	0x1a0068a0
1a001e98:	1a0068c4 	.word	0x1a0068c4

1a001e9c <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001e9c:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a001e9e:	4804      	ldr	r0, [pc, #16]	; (1a001eb0 <vApplicationStackOverflowHook+0x14>)
1a001ea0:	f003 ff5e 	bl	1a005d60 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a001ea4:	4903      	ldr	r1, [pc, #12]	; (1a001eb4 <vApplicationStackOverflowHook+0x18>)
1a001ea6:	2050      	movs	r0, #80	; 0x50
1a001ea8:	f7ff ffd4 	bl	1a001e54 <vAssertCalled>
}
1a001eac:	bd08      	pop	{r3, pc}
1a001eae:	bf00      	nop
1a001eb0:	1a0068e4 	.word	0x1a0068e4
1a001eb4:	1a0068c4 	.word	0x1a0068c4

1a001eb8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001eb8:	4b08      	ldr	r3, [pc, #32]	; (1a001edc <prvResetNextTaskUnblockTime+0x24>)
1a001eba:	681b      	ldr	r3, [r3, #0]
1a001ebc:	681b      	ldr	r3, [r3, #0]
1a001ebe:	b923      	cbnz	r3, 1a001eca <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a001ec0:	4b07      	ldr	r3, [pc, #28]	; (1a001ee0 <prvResetNextTaskUnblockTime+0x28>)
1a001ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001ec6:	601a      	str	r2, [r3, #0]
1a001ec8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001eca:	4b04      	ldr	r3, [pc, #16]	; (1a001edc <prvResetNextTaskUnblockTime+0x24>)
1a001ecc:	681b      	ldr	r3, [r3, #0]
1a001ece:	68db      	ldr	r3, [r3, #12]
1a001ed0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001ed2:	685a      	ldr	r2, [r3, #4]
1a001ed4:	4b02      	ldr	r3, [pc, #8]	; (1a001ee0 <prvResetNextTaskUnblockTime+0x28>)
1a001ed6:	601a      	str	r2, [r3, #0]
	}
}
1a001ed8:	4770      	bx	lr
1a001eda:	bf00      	nop
1a001edc:	1000297c 	.word	0x1000297c
1a001ee0:	10002a50 	.word	0x10002a50

1a001ee4 <prvInitialiseNewTask>:
{
1a001ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001ee8:	4681      	mov	r9, r0
1a001eea:	460d      	mov	r5, r1
1a001eec:	4617      	mov	r7, r2
1a001eee:	469a      	mov	sl, r3
1a001ef0:	9e08      	ldr	r6, [sp, #32]
1a001ef2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001ef6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001ef8:	0092      	lsls	r2, r2, #2
1a001efa:	21a5      	movs	r1, #165	; 0xa5
1a001efc:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001efe:	f003 fe7e 	bl	1a005bfe <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001f02:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001f04:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001f08:	3a01      	subs	r2, #1
1a001f0a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001f0e:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001f12:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001f14:	2300      	movs	r3, #0
1a001f16:	2b0f      	cmp	r3, #15
1a001f18:	d806      	bhi.n	1a001f28 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001f1a:	5cea      	ldrb	r2, [r5, r3]
1a001f1c:	18e1      	adds	r1, r4, r3
1a001f1e:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001f22:	b10a      	cbz	r2, 1a001f28 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001f24:	3301      	adds	r3, #1
1a001f26:	e7f6      	b.n	1a001f16 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001f28:	2300      	movs	r3, #0
1a001f2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001f2e:	2e06      	cmp	r6, #6
1a001f30:	d900      	bls.n	1a001f34 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001f32:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001f34:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001f36:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001f38:	2500      	movs	r5, #0
1a001f3a:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001f3c:	1d20      	adds	r0, r4, #4
1a001f3e:	f7ff ff35 	bl	1a001dac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001f42:	f104 0018 	add.w	r0, r4, #24
1a001f46:	f7ff ff31 	bl	1a001dac <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001f4a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001f4c:	f1c6 0607 	rsb	r6, r6, #7
1a001f50:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001f52:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001f54:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001f56:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001f5a:	4652      	mov	r2, sl
1a001f5c:	4649      	mov	r1, r9
1a001f5e:	4638      	mov	r0, r7
1a001f60:	f000 ff30 	bl	1a002dc4 <pxPortInitialiseStack>
1a001f64:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001f66:	f1b8 0f00 	cmp.w	r8, #0
1a001f6a:	d001      	beq.n	1a001f70 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001f6c:	f8c8 4000 	str.w	r4, [r8]
}
1a001f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a001f74 <prvInitialiseTaskLists>:
{
1a001f74:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001f76:	2400      	movs	r4, #0
1a001f78:	2c06      	cmp	r4, #6
1a001f7a:	d808      	bhi.n	1a001f8e <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001f7c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001f80:	0093      	lsls	r3, r2, #2
1a001f82:	480e      	ldr	r0, [pc, #56]	; (1a001fbc <prvInitialiseTaskLists+0x48>)
1a001f84:	4418      	add	r0, r3
1a001f86:	f7ff ff06 	bl	1a001d96 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001f8a:	3401      	adds	r4, #1
1a001f8c:	e7f4      	b.n	1a001f78 <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a001f8e:	4d0c      	ldr	r5, [pc, #48]	; (1a001fc0 <prvInitialiseTaskLists+0x4c>)
1a001f90:	4628      	mov	r0, r5
1a001f92:	f7ff ff00 	bl	1a001d96 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001f96:	4c0b      	ldr	r4, [pc, #44]	; (1a001fc4 <prvInitialiseTaskLists+0x50>)
1a001f98:	4620      	mov	r0, r4
1a001f9a:	f7ff fefc 	bl	1a001d96 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001f9e:	480a      	ldr	r0, [pc, #40]	; (1a001fc8 <prvInitialiseTaskLists+0x54>)
1a001fa0:	f7ff fef9 	bl	1a001d96 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001fa4:	4809      	ldr	r0, [pc, #36]	; (1a001fcc <prvInitialiseTaskLists+0x58>)
1a001fa6:	f7ff fef6 	bl	1a001d96 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001faa:	4809      	ldr	r0, [pc, #36]	; (1a001fd0 <prvInitialiseTaskLists+0x5c>)
1a001fac:	f7ff fef3 	bl	1a001d96 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001fb0:	4b08      	ldr	r3, [pc, #32]	; (1a001fd4 <prvInitialiseTaskLists+0x60>)
1a001fb2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001fb4:	4b08      	ldr	r3, [pc, #32]	; (1a001fd8 <prvInitialiseTaskLists+0x64>)
1a001fb6:	601c      	str	r4, [r3, #0]
}
1a001fb8:	bd38      	pop	{r3, r4, r5, pc}
1a001fba:	bf00      	nop
1a001fbc:	10002984 	.word	0x10002984
1a001fc0:	10002a28 	.word	0x10002a28
1a001fc4:	10002a3c 	.word	0x10002a3c
1a001fc8:	10002a58 	.word	0x10002a58
1a001fcc:	10002a84 	.word	0x10002a84
1a001fd0:	10002a70 	.word	0x10002a70
1a001fd4:	1000297c 	.word	0x1000297c
1a001fd8:	10002980 	.word	0x10002980

1a001fdc <prvAddNewTaskToReadyList>:
{
1a001fdc:	b510      	push	{r4, lr}
1a001fde:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001fe0:	f000 ff2a 	bl	1a002e38 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001fe4:	4a21      	ldr	r2, [pc, #132]	; (1a00206c <prvAddNewTaskToReadyList+0x90>)
1a001fe6:	6813      	ldr	r3, [r2, #0]
1a001fe8:	3301      	adds	r3, #1
1a001fea:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001fec:	4b20      	ldr	r3, [pc, #128]	; (1a002070 <prvAddNewTaskToReadyList+0x94>)
1a001fee:	681b      	ldr	r3, [r3, #0]
1a001ff0:	b15b      	cbz	r3, 1a00200a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001ff2:	4b20      	ldr	r3, [pc, #128]	; (1a002074 <prvAddNewTaskToReadyList+0x98>)
1a001ff4:	681b      	ldr	r3, [r3, #0]
1a001ff6:	b96b      	cbnz	r3, 1a002014 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001ff8:	4b1d      	ldr	r3, [pc, #116]	; (1a002070 <prvAddNewTaskToReadyList+0x94>)
1a001ffa:	681b      	ldr	r3, [r3, #0]
1a001ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001ffe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002000:	429a      	cmp	r2, r3
1a002002:	d807      	bhi.n	1a002014 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a002004:	4b1a      	ldr	r3, [pc, #104]	; (1a002070 <prvAddNewTaskToReadyList+0x94>)
1a002006:	601c      	str	r4, [r3, #0]
1a002008:	e004      	b.n	1a002014 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a00200a:	4b19      	ldr	r3, [pc, #100]	; (1a002070 <prvAddNewTaskToReadyList+0x94>)
1a00200c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00200e:	6813      	ldr	r3, [r2, #0]
1a002010:	2b01      	cmp	r3, #1
1a002012:	d027      	beq.n	1a002064 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a002014:	4a18      	ldr	r2, [pc, #96]	; (1a002078 <prvAddNewTaskToReadyList+0x9c>)
1a002016:	6813      	ldr	r3, [r2, #0]
1a002018:	3301      	adds	r3, #1
1a00201a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a00201c:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a00201e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002020:	2201      	movs	r2, #1
1a002022:	409a      	lsls	r2, r3
1a002024:	4915      	ldr	r1, [pc, #84]	; (1a00207c <prvAddNewTaskToReadyList+0xa0>)
1a002026:	6808      	ldr	r0, [r1, #0]
1a002028:	4302      	orrs	r2, r0
1a00202a:	600a      	str	r2, [r1, #0]
1a00202c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002030:	009a      	lsls	r2, r3, #2
1a002032:	1d21      	adds	r1, r4, #4
1a002034:	4812      	ldr	r0, [pc, #72]	; (1a002080 <prvAddNewTaskToReadyList+0xa4>)
1a002036:	4410      	add	r0, r2
1a002038:	f7ff febb 	bl	1a001db2 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a00203c:	f000 ff1e 	bl	1a002e7c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a002040:	4b0c      	ldr	r3, [pc, #48]	; (1a002074 <prvAddNewTaskToReadyList+0x98>)
1a002042:	681b      	ldr	r3, [r3, #0]
1a002044:	b16b      	cbz	r3, 1a002062 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a002046:	4b0a      	ldr	r3, [pc, #40]	; (1a002070 <prvAddNewTaskToReadyList+0x94>)
1a002048:	681b      	ldr	r3, [r3, #0]
1a00204a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00204c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00204e:	429a      	cmp	r2, r3
1a002050:	d207      	bcs.n	1a002062 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a002052:	4b0c      	ldr	r3, [pc, #48]	; (1a002084 <prvAddNewTaskToReadyList+0xa8>)
1a002054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002058:	601a      	str	r2, [r3, #0]
1a00205a:	f3bf 8f4f 	dsb	sy
1a00205e:	f3bf 8f6f 	isb	sy
}
1a002062:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a002064:	f7ff ff86 	bl	1a001f74 <prvInitialiseTaskLists>
1a002068:	e7d4      	b.n	1a002014 <prvAddNewTaskToReadyList+0x38>
1a00206a:	bf00      	nop
1a00206c:	10002a10 	.word	0x10002a10
1a002070:	10002978 	.word	0x10002978
1a002074:	10002a6c 	.word	0x10002a6c
1a002078:	10002a20 	.word	0x10002a20
1a00207c:	10002a24 	.word	0x10002a24
1a002080:	10002984 	.word	0x10002984
1a002084:	e000ed04 	.word	0xe000ed04

1a002088 <prvDeleteTCB>:
	{
1a002088:	b510      	push	{r4, lr}
1a00208a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a00208c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a002090:	b163      	cbz	r3, 1a0020ac <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a002092:	2b01      	cmp	r3, #1
1a002094:	d011      	beq.n	1a0020ba <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a002096:	2b02      	cmp	r3, #2
1a002098:	d00e      	beq.n	1a0020b8 <prvDeleteTCB+0x30>
1a00209a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00209e:	f383 8811 	msr	BASEPRI, r3
1a0020a2:	f3bf 8f6f 	isb	sy
1a0020a6:	f3bf 8f4f 	dsb	sy
1a0020aa:	e7fe      	b.n	1a0020aa <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
1a0020ac:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0020ae:	f7ff faaf 	bl	1a001610 <vPortFree>
				vPortFree( pxTCB );
1a0020b2:	4620      	mov	r0, r4
1a0020b4:	f7ff faac 	bl	1a001610 <vPortFree>
	}
1a0020b8:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
1a0020ba:	f7ff faa9 	bl	1a001610 <vPortFree>
1a0020be:	e7fb      	b.n	1a0020b8 <prvDeleteTCB+0x30>

1a0020c0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0020c0:	4b0f      	ldr	r3, [pc, #60]	; (1a002100 <prvCheckTasksWaitingTermination+0x40>)
1a0020c2:	681b      	ldr	r3, [r3, #0]
1a0020c4:	b1d3      	cbz	r3, 1a0020fc <prvCheckTasksWaitingTermination+0x3c>
{
1a0020c6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a0020c8:	f000 feb6 	bl	1a002e38 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0020cc:	4b0d      	ldr	r3, [pc, #52]	; (1a002104 <prvCheckTasksWaitingTermination+0x44>)
1a0020ce:	68db      	ldr	r3, [r3, #12]
1a0020d0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0020d2:	1d20      	adds	r0, r4, #4
1a0020d4:	f7ff fe92 	bl	1a001dfc <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0020d8:	4a0b      	ldr	r2, [pc, #44]	; (1a002108 <prvCheckTasksWaitingTermination+0x48>)
1a0020da:	6813      	ldr	r3, [r2, #0]
1a0020dc:	3b01      	subs	r3, #1
1a0020de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0020e0:	4a07      	ldr	r2, [pc, #28]	; (1a002100 <prvCheckTasksWaitingTermination+0x40>)
1a0020e2:	6813      	ldr	r3, [r2, #0]
1a0020e4:	3b01      	subs	r3, #1
1a0020e6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0020e8:	f000 fec8 	bl	1a002e7c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0020ec:	4620      	mov	r0, r4
1a0020ee:	f7ff ffcb 	bl	1a002088 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0020f2:	4b03      	ldr	r3, [pc, #12]	; (1a002100 <prvCheckTasksWaitingTermination+0x40>)
1a0020f4:	681b      	ldr	r3, [r3, #0]
1a0020f6:	2b00      	cmp	r3, #0
1a0020f8:	d1e6      	bne.n	1a0020c8 <prvCheckTasksWaitingTermination+0x8>
}
1a0020fa:	bd10      	pop	{r4, pc}
1a0020fc:	4770      	bx	lr
1a0020fe:	bf00      	nop
1a002100:	10002a14 	.word	0x10002a14
1a002104:	10002a84 	.word	0x10002a84
1a002108:	10002a10 	.word	0x10002a10

1a00210c <prvIdleTask>:
{
1a00210c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00210e:	f7ff ffd7 	bl	1a0020c0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a002112:	4b06      	ldr	r3, [pc, #24]	; (1a00212c <prvIdleTask+0x20>)
1a002114:	681b      	ldr	r3, [r3, #0]
1a002116:	2b01      	cmp	r3, #1
1a002118:	d9f9      	bls.n	1a00210e <prvIdleTask+0x2>
				taskYIELD();
1a00211a:	4b05      	ldr	r3, [pc, #20]	; (1a002130 <prvIdleTask+0x24>)
1a00211c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002120:	601a      	str	r2, [r3, #0]
1a002122:	f3bf 8f4f 	dsb	sy
1a002126:	f3bf 8f6f 	isb	sy
1a00212a:	e7f0      	b.n	1a00210e <prvIdleTask+0x2>
1a00212c:	10002984 	.word	0x10002984
1a002130:	e000ed04 	.word	0xe000ed04

1a002134 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a002134:	b570      	push	{r4, r5, r6, lr}
1a002136:	4604      	mov	r4, r0
1a002138:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00213a:	4b1d      	ldr	r3, [pc, #116]	; (1a0021b0 <prvAddCurrentTaskToDelayedList+0x7c>)
1a00213c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00213e:	4b1d      	ldr	r3, [pc, #116]	; (1a0021b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a002140:	6818      	ldr	r0, [r3, #0]
1a002142:	3004      	adds	r0, #4
1a002144:	f7ff fe5a 	bl	1a001dfc <uxListRemove>
1a002148:	b950      	cbnz	r0, 1a002160 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00214a:	4b1a      	ldr	r3, [pc, #104]	; (1a0021b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a00214c:	681b      	ldr	r3, [r3, #0]
1a00214e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002150:	2301      	movs	r3, #1
1a002152:	fa03 f202 	lsl.w	r2, r3, r2
1a002156:	4918      	ldr	r1, [pc, #96]	; (1a0021b8 <prvAddCurrentTaskToDelayedList+0x84>)
1a002158:	680b      	ldr	r3, [r1, #0]
1a00215a:	ea23 0302 	bic.w	r3, r3, r2
1a00215e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a002160:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a002164:	d00d      	beq.n	1a002182 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a002166:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a002168:	4b12      	ldr	r3, [pc, #72]	; (1a0021b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a00216a:	681b      	ldr	r3, [r3, #0]
1a00216c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00216e:	42a5      	cmp	r5, r4
1a002170:	d910      	bls.n	1a002194 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002172:	4b12      	ldr	r3, [pc, #72]	; (1a0021bc <prvAddCurrentTaskToDelayedList+0x88>)
1a002174:	6818      	ldr	r0, [r3, #0]
1a002176:	4b0f      	ldr	r3, [pc, #60]	; (1a0021b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a002178:	6819      	ldr	r1, [r3, #0]
1a00217a:	3104      	adds	r1, #4
1a00217c:	f7ff fe24 	bl	1a001dc8 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a002180:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a002182:	2e00      	cmp	r6, #0
1a002184:	d0ef      	beq.n	1a002166 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002186:	4b0b      	ldr	r3, [pc, #44]	; (1a0021b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a002188:	6819      	ldr	r1, [r3, #0]
1a00218a:	3104      	adds	r1, #4
1a00218c:	480c      	ldr	r0, [pc, #48]	; (1a0021c0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00218e:	f7ff fe10 	bl	1a001db2 <vListInsertEnd>
1a002192:	e7f5      	b.n	1a002180 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002194:	4b0b      	ldr	r3, [pc, #44]	; (1a0021c4 <prvAddCurrentTaskToDelayedList+0x90>)
1a002196:	6818      	ldr	r0, [r3, #0]
1a002198:	4b06      	ldr	r3, [pc, #24]	; (1a0021b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a00219a:	6819      	ldr	r1, [r3, #0]
1a00219c:	3104      	adds	r1, #4
1a00219e:	f7ff fe13 	bl	1a001dc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
1a0021a2:	4b09      	ldr	r3, [pc, #36]	; (1a0021c8 <prvAddCurrentTaskToDelayedList+0x94>)
1a0021a4:	681b      	ldr	r3, [r3, #0]
1a0021a6:	42a3      	cmp	r3, r4
1a0021a8:	d9ea      	bls.n	1a002180 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
1a0021aa:	4b07      	ldr	r3, [pc, #28]	; (1a0021c8 <prvAddCurrentTaskToDelayedList+0x94>)
1a0021ac:	601c      	str	r4, [r3, #0]
}
1a0021ae:	e7e7      	b.n	1a002180 <prvAddCurrentTaskToDelayedList+0x4c>
1a0021b0:	10002a98 	.word	0x10002a98
1a0021b4:	10002978 	.word	0x10002978
1a0021b8:	10002a24 	.word	0x10002a24
1a0021bc:	10002980 	.word	0x10002980
1a0021c0:	10002a70 	.word	0x10002a70
1a0021c4:	1000297c 	.word	0x1000297c
1a0021c8:	10002a50 	.word	0x10002a50

1a0021cc <xTaskCreateStatic>:
	{
1a0021cc:	b570      	push	{r4, r5, r6, lr}
1a0021ce:	b086      	sub	sp, #24
1a0021d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0021d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a0021d4:	b175      	cbz	r5, 1a0021f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
1a0021d6:	b1b4      	cbz	r4, 1a002206 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
1a0021d8:	2660      	movs	r6, #96	; 0x60
1a0021da:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a0021dc:	9e04      	ldr	r6, [sp, #16]
1a0021de:	2e60      	cmp	r6, #96	; 0x60
1a0021e0:	d01a      	beq.n	1a002218 <xTaskCreateStatic+0x4c>
1a0021e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021e6:	f383 8811 	msr	BASEPRI, r3
1a0021ea:	f3bf 8f6f 	isb	sy
1a0021ee:	f3bf 8f4f 	dsb	sy
1a0021f2:	e7fe      	b.n	1a0021f2 <xTaskCreateStatic+0x26>
1a0021f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021f8:	f383 8811 	msr	BASEPRI, r3
1a0021fc:	f3bf 8f6f 	isb	sy
1a002200:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
1a002204:	e7fe      	b.n	1a002204 <xTaskCreateStatic+0x38>
1a002206:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00220a:	f383 8811 	msr	BASEPRI, r3
1a00220e:	f3bf 8f6f 	isb	sy
1a002212:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
1a002216:	e7fe      	b.n	1a002216 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a002218:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a00221a:	2502      	movs	r5, #2
1a00221c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a002220:	2500      	movs	r5, #0
1a002222:	9503      	str	r5, [sp, #12]
1a002224:	9402      	str	r4, [sp, #8]
1a002226:	ad05      	add	r5, sp, #20
1a002228:	9501      	str	r5, [sp, #4]
1a00222a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00222c:	9500      	str	r5, [sp, #0]
1a00222e:	f7ff fe59 	bl	1a001ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a002232:	4620      	mov	r0, r4
1a002234:	f7ff fed2 	bl	1a001fdc <prvAddNewTaskToReadyList>
	}
1a002238:	9805      	ldr	r0, [sp, #20]
1a00223a:	b006      	add	sp, #24
1a00223c:	bd70      	pop	{r4, r5, r6, pc}

1a00223e <xTaskCreate>:
	{
1a00223e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a002242:	b085      	sub	sp, #20
1a002244:	4607      	mov	r7, r0
1a002246:	4688      	mov	r8, r1
1a002248:	4615      	mov	r5, r2
1a00224a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00224c:	0090      	lsls	r0, r2, #2
1a00224e:	f7ff f951 	bl	1a0014f4 <pvPortMalloc>
			if( pxStack != NULL )
1a002252:	b1f8      	cbz	r0, 1a002294 <xTaskCreate+0x56>
1a002254:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a002256:	2060      	movs	r0, #96	; 0x60
1a002258:	f7ff f94c 	bl	1a0014f4 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a00225c:	4604      	mov	r4, r0
1a00225e:	b1a8      	cbz	r0, 1a00228c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
1a002260:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a002262:	b1e4      	cbz	r4, 1a00229e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a002264:	2300      	movs	r3, #0
1a002266:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00226a:	9303      	str	r3, [sp, #12]
1a00226c:	9402      	str	r4, [sp, #8]
1a00226e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a002270:	9301      	str	r3, [sp, #4]
1a002272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a002274:	9300      	str	r3, [sp, #0]
1a002276:	464b      	mov	r3, r9
1a002278:	462a      	mov	r2, r5
1a00227a:	4641      	mov	r1, r8
1a00227c:	4638      	mov	r0, r7
1a00227e:	f7ff fe31 	bl	1a001ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a002282:	4620      	mov	r0, r4
1a002284:	f7ff feaa 	bl	1a001fdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a002288:	2001      	movs	r0, #1
1a00228a:	e005      	b.n	1a002298 <xTaskCreate+0x5a>
					vPortFree( pxStack );
1a00228c:	4630      	mov	r0, r6
1a00228e:	f7ff f9bf 	bl	1a001610 <vPortFree>
1a002292:	e7e6      	b.n	1a002262 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a002294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a002298:	b005      	add	sp, #20
1a00229a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a00229e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0022a2:	e7f9      	b.n	1a002298 <xTaskCreate+0x5a>

1a0022a4 <vTaskStartScheduler>:
{
1a0022a4:	b510      	push	{r4, lr}
1a0022a6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0022a8:	2400      	movs	r4, #0
1a0022aa:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a0022ac:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a0022ae:	aa07      	add	r2, sp, #28
1a0022b0:	a906      	add	r1, sp, #24
1a0022b2:	a805      	add	r0, sp, #20
1a0022b4:	f7ff fdb6 	bl	1a001e24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a0022b8:	9b05      	ldr	r3, [sp, #20]
1a0022ba:	9302      	str	r3, [sp, #8]
1a0022bc:	9b06      	ldr	r3, [sp, #24]
1a0022be:	9301      	str	r3, [sp, #4]
1a0022c0:	9400      	str	r4, [sp, #0]
1a0022c2:	4623      	mov	r3, r4
1a0022c4:	9a07      	ldr	r2, [sp, #28]
1a0022c6:	4917      	ldr	r1, [pc, #92]	; (1a002324 <vTaskStartScheduler+0x80>)
1a0022c8:	4817      	ldr	r0, [pc, #92]	; (1a002328 <vTaskStartScheduler+0x84>)
1a0022ca:	f7ff ff7f 	bl	1a0021cc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0022ce:	b140      	cbz	r0, 1a0022e2 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a0022d0:	f000 fb8c 	bl	1a0029ec <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a0022d4:	2801      	cmp	r0, #1
1a0022d6:	d006      	beq.n	1a0022e6 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0022d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0022dc:	d018      	beq.n	1a002310 <vTaskStartScheduler+0x6c>
}
1a0022de:	b008      	add	sp, #32
1a0022e0:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a0022e2:	2000      	movs	r0, #0
1a0022e4:	e7f6      	b.n	1a0022d4 <vTaskStartScheduler+0x30>
1a0022e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022ea:	f383 8811 	msr	BASEPRI, r3
1a0022ee:	f3bf 8f6f 	isb	sy
1a0022f2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0022f6:	4b0d      	ldr	r3, [pc, #52]	; (1a00232c <vTaskStartScheduler+0x88>)
1a0022f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0022fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0022fe:	4b0c      	ldr	r3, [pc, #48]	; (1a002330 <vTaskStartScheduler+0x8c>)
1a002300:	2201      	movs	r2, #1
1a002302:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a002304:	4b0b      	ldr	r3, [pc, #44]	; (1a002334 <vTaskStartScheduler+0x90>)
1a002306:	2200      	movs	r2, #0
1a002308:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a00230a:	f000 fe35 	bl	1a002f78 <xPortStartScheduler>
1a00230e:	e7e6      	b.n	1a0022de <vTaskStartScheduler+0x3a>
1a002310:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002314:	f383 8811 	msr	BASEPRI, r3
1a002318:	f3bf 8f6f 	isb	sy
1a00231c:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a002320:	e7fe      	b.n	1a002320 <vTaskStartScheduler+0x7c>
1a002322:	bf00      	nop
1a002324:	1a006954 	.word	0x1a006954
1a002328:	1a00210d 	.word	0x1a00210d
1a00232c:	10002a50 	.word	0x10002a50
1a002330:	10002a6c 	.word	0x10002a6c
1a002334:	10002a98 	.word	0x10002a98

1a002338 <vTaskEndScheduler>:
{
1a002338:	b508      	push	{r3, lr}
1a00233a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00233e:	f383 8811 	msr	BASEPRI, r3
1a002342:	f3bf 8f6f 	isb	sy
1a002346:	f3bf 8f4f 	dsb	sy
	xSchedulerRunning = pdFALSE;
1a00234a:	4b03      	ldr	r3, [pc, #12]	; (1a002358 <vTaskEndScheduler+0x20>)
1a00234c:	2200      	movs	r2, #0
1a00234e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
1a002350:	f000 fd60 	bl	1a002e14 <vPortEndScheduler>
}
1a002354:	bd08      	pop	{r3, pc}
1a002356:	bf00      	nop
1a002358:	10002a6c 	.word	0x10002a6c

1a00235c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a00235c:	4a02      	ldr	r2, [pc, #8]	; (1a002368 <vTaskSuspendAll+0xc>)
1a00235e:	6813      	ldr	r3, [r2, #0]
1a002360:	3301      	adds	r3, #1
1a002362:	6013      	str	r3, [r2, #0]
}
1a002364:	4770      	bx	lr
1a002366:	bf00      	nop
1a002368:	10002a1c 	.word	0x10002a1c

1a00236c <xTaskGetTickCount>:
		xTicks = xTickCount;
1a00236c:	4b01      	ldr	r3, [pc, #4]	; (1a002374 <xTaskGetTickCount+0x8>)
1a00236e:	6818      	ldr	r0, [r3, #0]
}
1a002370:	4770      	bx	lr
1a002372:	bf00      	nop
1a002374:	10002a98 	.word	0x10002a98

1a002378 <xTaskIncrementTick>:
{
1a002378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00237a:	4b3a      	ldr	r3, [pc, #232]	; (1a002464 <xTaskIncrementTick+0xec>)
1a00237c:	681b      	ldr	r3, [r3, #0]
1a00237e:	2b00      	cmp	r3, #0
1a002380:	d164      	bne.n	1a00244c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a002382:	4b39      	ldr	r3, [pc, #228]	; (1a002468 <xTaskIncrementTick+0xf0>)
1a002384:	681d      	ldr	r5, [r3, #0]
1a002386:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a002388:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a00238a:	b9c5      	cbnz	r5, 1a0023be <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a00238c:	4b37      	ldr	r3, [pc, #220]	; (1a00246c <xTaskIncrementTick+0xf4>)
1a00238e:	681b      	ldr	r3, [r3, #0]
1a002390:	681b      	ldr	r3, [r3, #0]
1a002392:	b143      	cbz	r3, 1a0023a6 <xTaskIncrementTick+0x2e>
1a002394:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002398:	f383 8811 	msr	BASEPRI, r3
1a00239c:	f3bf 8f6f 	isb	sy
1a0023a0:	f3bf 8f4f 	dsb	sy
1a0023a4:	e7fe      	b.n	1a0023a4 <xTaskIncrementTick+0x2c>
1a0023a6:	4a31      	ldr	r2, [pc, #196]	; (1a00246c <xTaskIncrementTick+0xf4>)
1a0023a8:	6811      	ldr	r1, [r2, #0]
1a0023aa:	4b31      	ldr	r3, [pc, #196]	; (1a002470 <xTaskIncrementTick+0xf8>)
1a0023ac:	6818      	ldr	r0, [r3, #0]
1a0023ae:	6010      	str	r0, [r2, #0]
1a0023b0:	6019      	str	r1, [r3, #0]
1a0023b2:	4a30      	ldr	r2, [pc, #192]	; (1a002474 <xTaskIncrementTick+0xfc>)
1a0023b4:	6813      	ldr	r3, [r2, #0]
1a0023b6:	3301      	adds	r3, #1
1a0023b8:	6013      	str	r3, [r2, #0]
1a0023ba:	f7ff fd7d 	bl	1a001eb8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0023be:	4b2e      	ldr	r3, [pc, #184]	; (1a002478 <xTaskIncrementTick+0x100>)
1a0023c0:	681b      	ldr	r3, [r3, #0]
1a0023c2:	42ab      	cmp	r3, r5
1a0023c4:	d938      	bls.n	1a002438 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0023c6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0023c8:	4b2c      	ldr	r3, [pc, #176]	; (1a00247c <xTaskIncrementTick+0x104>)
1a0023ca:	681b      	ldr	r3, [r3, #0]
1a0023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0023ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0023d2:	009a      	lsls	r2, r3, #2
1a0023d4:	4b2a      	ldr	r3, [pc, #168]	; (1a002480 <xTaskIncrementTick+0x108>)
1a0023d6:	589b      	ldr	r3, [r3, r2]
1a0023d8:	2b01      	cmp	r3, #1
1a0023da:	d93c      	bls.n	1a002456 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a0023dc:	2401      	movs	r4, #1
1a0023de:	e03a      	b.n	1a002456 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a0023e0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0023e2:	4b22      	ldr	r3, [pc, #136]	; (1a00246c <xTaskIncrementTick+0xf4>)
1a0023e4:	681b      	ldr	r3, [r3, #0]
1a0023e6:	681b      	ldr	r3, [r3, #0]
1a0023e8:	b343      	cbz	r3, 1a00243c <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0023ea:	4b20      	ldr	r3, [pc, #128]	; (1a00246c <xTaskIncrementTick+0xf4>)
1a0023ec:	681b      	ldr	r3, [r3, #0]
1a0023ee:	68db      	ldr	r3, [r3, #12]
1a0023f0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0023f2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a0023f4:	429d      	cmp	r5, r3
1a0023f6:	d326      	bcc.n	1a002446 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0023f8:	1d37      	adds	r7, r6, #4
1a0023fa:	4638      	mov	r0, r7
1a0023fc:	f7ff fcfe 	bl	1a001dfc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a002400:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a002402:	b11b      	cbz	r3, 1a00240c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a002404:	f106 0018 	add.w	r0, r6, #24
1a002408:	f7ff fcf8 	bl	1a001dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00240c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a00240e:	2201      	movs	r2, #1
1a002410:	409a      	lsls	r2, r3
1a002412:	491c      	ldr	r1, [pc, #112]	; (1a002484 <xTaskIncrementTick+0x10c>)
1a002414:	6808      	ldr	r0, [r1, #0]
1a002416:	4302      	orrs	r2, r0
1a002418:	600a      	str	r2, [r1, #0]
1a00241a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00241e:	009a      	lsls	r2, r3, #2
1a002420:	4639      	mov	r1, r7
1a002422:	4817      	ldr	r0, [pc, #92]	; (1a002480 <xTaskIncrementTick+0x108>)
1a002424:	4410      	add	r0, r2
1a002426:	f7ff fcc4 	bl	1a001db2 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00242a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a00242c:	4b13      	ldr	r3, [pc, #76]	; (1a00247c <xTaskIncrementTick+0x104>)
1a00242e:	681b      	ldr	r3, [r3, #0]
1a002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002432:	429a      	cmp	r2, r3
1a002434:	d2d4      	bcs.n	1a0023e0 <xTaskIncrementTick+0x68>
1a002436:	e7d4      	b.n	1a0023e2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a002438:	2400      	movs	r4, #0
1a00243a:	e7d2      	b.n	1a0023e2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00243c:	4b0e      	ldr	r3, [pc, #56]	; (1a002478 <xTaskIncrementTick+0x100>)
1a00243e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002442:	601a      	str	r2, [r3, #0]
					break;
1a002444:	e7c0      	b.n	1a0023c8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a002446:	4a0c      	ldr	r2, [pc, #48]	; (1a002478 <xTaskIncrementTick+0x100>)
1a002448:	6013      	str	r3, [r2, #0]
						break;
1a00244a:	e7bd      	b.n	1a0023c8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a00244c:	4a0e      	ldr	r2, [pc, #56]	; (1a002488 <xTaskIncrementTick+0x110>)
1a00244e:	6813      	ldr	r3, [r2, #0]
1a002450:	3301      	adds	r3, #1
1a002452:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a002454:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a002456:	4b0d      	ldr	r3, [pc, #52]	; (1a00248c <xTaskIncrementTick+0x114>)
1a002458:	681b      	ldr	r3, [r3, #0]
1a00245a:	b103      	cbz	r3, 1a00245e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a00245c:	2401      	movs	r4, #1
}
1a00245e:	4620      	mov	r0, r4
1a002460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002462:	bf00      	nop
1a002464:	10002a1c 	.word	0x10002a1c
1a002468:	10002a98 	.word	0x10002a98
1a00246c:	1000297c 	.word	0x1000297c
1a002470:	10002980 	.word	0x10002980
1a002474:	10002a54 	.word	0x10002a54
1a002478:	10002a50 	.word	0x10002a50
1a00247c:	10002978 	.word	0x10002978
1a002480:	10002984 	.word	0x10002984
1a002484:	10002a24 	.word	0x10002a24
1a002488:	10002a18 	.word	0x10002a18
1a00248c:	10002a9c 	.word	0x10002a9c

1a002490 <xTaskResumeAll>:
{
1a002490:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a002492:	4b35      	ldr	r3, [pc, #212]	; (1a002568 <xTaskResumeAll+0xd8>)
1a002494:	681b      	ldr	r3, [r3, #0]
1a002496:	b943      	cbnz	r3, 1a0024aa <xTaskResumeAll+0x1a>
1a002498:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00249c:	f383 8811 	msr	BASEPRI, r3
1a0024a0:	f3bf 8f6f 	isb	sy
1a0024a4:	f3bf 8f4f 	dsb	sy
1a0024a8:	e7fe      	b.n	1a0024a8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a0024aa:	f000 fcc5 	bl	1a002e38 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a0024ae:	4b2e      	ldr	r3, [pc, #184]	; (1a002568 <xTaskResumeAll+0xd8>)
1a0024b0:	681a      	ldr	r2, [r3, #0]
1a0024b2:	3a01      	subs	r2, #1
1a0024b4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0024b6:	681b      	ldr	r3, [r3, #0]
1a0024b8:	2b00      	cmp	r3, #0
1a0024ba:	d14d      	bne.n	1a002558 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0024bc:	4b2b      	ldr	r3, [pc, #172]	; (1a00256c <xTaskResumeAll+0xdc>)
1a0024be:	681b      	ldr	r3, [r3, #0]
1a0024c0:	b90b      	cbnz	r3, 1a0024c6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a0024c2:	2400      	movs	r4, #0
1a0024c4:	e049      	b.n	1a00255a <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a0024c6:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0024c8:	4b29      	ldr	r3, [pc, #164]	; (1a002570 <xTaskResumeAll+0xe0>)
1a0024ca:	681b      	ldr	r3, [r3, #0]
1a0024cc:	b31b      	cbz	r3, 1a002516 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0024ce:	4b28      	ldr	r3, [pc, #160]	; (1a002570 <xTaskResumeAll+0xe0>)
1a0024d0:	68db      	ldr	r3, [r3, #12]
1a0024d2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0024d4:	f104 0018 	add.w	r0, r4, #24
1a0024d8:	f7ff fc90 	bl	1a001dfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0024dc:	1d25      	adds	r5, r4, #4
1a0024de:	4628      	mov	r0, r5
1a0024e0:	f7ff fc8c 	bl	1a001dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0024e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0024e6:	2201      	movs	r2, #1
1a0024e8:	409a      	lsls	r2, r3
1a0024ea:	4922      	ldr	r1, [pc, #136]	; (1a002574 <xTaskResumeAll+0xe4>)
1a0024ec:	6808      	ldr	r0, [r1, #0]
1a0024ee:	4302      	orrs	r2, r0
1a0024f0:	600a      	str	r2, [r1, #0]
1a0024f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0024f6:	009a      	lsls	r2, r3, #2
1a0024f8:	4629      	mov	r1, r5
1a0024fa:	481f      	ldr	r0, [pc, #124]	; (1a002578 <xTaskResumeAll+0xe8>)
1a0024fc:	4410      	add	r0, r2
1a0024fe:	f7ff fc58 	bl	1a001db2 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a002502:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002504:	4b1d      	ldr	r3, [pc, #116]	; (1a00257c <xTaskResumeAll+0xec>)
1a002506:	681b      	ldr	r3, [r3, #0]
1a002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00250a:	429a      	cmp	r2, r3
1a00250c:	d3dc      	bcc.n	1a0024c8 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a00250e:	4b1c      	ldr	r3, [pc, #112]	; (1a002580 <xTaskResumeAll+0xf0>)
1a002510:	2201      	movs	r2, #1
1a002512:	601a      	str	r2, [r3, #0]
1a002514:	e7d8      	b.n	1a0024c8 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a002516:	b10c      	cbz	r4, 1a00251c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a002518:	f7ff fcce 	bl	1a001eb8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00251c:	4b19      	ldr	r3, [pc, #100]	; (1a002584 <xTaskResumeAll+0xf4>)
1a00251e:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a002520:	b974      	cbnz	r4, 1a002540 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a002522:	4b17      	ldr	r3, [pc, #92]	; (1a002580 <xTaskResumeAll+0xf0>)
1a002524:	681b      	ldr	r3, [r3, #0]
1a002526:	b1e3      	cbz	r3, 1a002562 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a002528:	4b17      	ldr	r3, [pc, #92]	; (1a002588 <xTaskResumeAll+0xf8>)
1a00252a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00252e:	601a      	str	r2, [r3, #0]
1a002530:	f3bf 8f4f 	dsb	sy
1a002534:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a002538:	2401      	movs	r4, #1
1a00253a:	e00e      	b.n	1a00255a <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a00253c:	3c01      	subs	r4, #1
1a00253e:	d007      	beq.n	1a002550 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a002540:	f7ff ff1a 	bl	1a002378 <xTaskIncrementTick>
1a002544:	2800      	cmp	r0, #0
1a002546:	d0f9      	beq.n	1a00253c <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a002548:	4b0d      	ldr	r3, [pc, #52]	; (1a002580 <xTaskResumeAll+0xf0>)
1a00254a:	2201      	movs	r2, #1
1a00254c:	601a      	str	r2, [r3, #0]
1a00254e:	e7f5      	b.n	1a00253c <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a002550:	4b0c      	ldr	r3, [pc, #48]	; (1a002584 <xTaskResumeAll+0xf4>)
1a002552:	2200      	movs	r2, #0
1a002554:	601a      	str	r2, [r3, #0]
1a002556:	e7e4      	b.n	1a002522 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a002558:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00255a:	f000 fc8f 	bl	1a002e7c <vPortExitCritical>
}
1a00255e:	4620      	mov	r0, r4
1a002560:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a002562:	2400      	movs	r4, #0
1a002564:	e7f9      	b.n	1a00255a <xTaskResumeAll+0xca>
1a002566:	bf00      	nop
1a002568:	10002a1c 	.word	0x10002a1c
1a00256c:	10002a10 	.word	0x10002a10
1a002570:	10002a58 	.word	0x10002a58
1a002574:	10002a24 	.word	0x10002a24
1a002578:	10002984 	.word	0x10002984
1a00257c:	10002978 	.word	0x10002978
1a002580:	10002a9c 	.word	0x10002a9c
1a002584:	10002a18 	.word	0x10002a18
1a002588:	e000ed04 	.word	0xe000ed04

1a00258c <vTaskDelay>:
	{
1a00258c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a00258e:	b1a8      	cbz	r0, 1a0025bc <vTaskDelay+0x30>
1a002590:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a002592:	4b0f      	ldr	r3, [pc, #60]	; (1a0025d0 <vTaskDelay+0x44>)
1a002594:	681b      	ldr	r3, [r3, #0]
1a002596:	b143      	cbz	r3, 1a0025aa <vTaskDelay+0x1e>
1a002598:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00259c:	f383 8811 	msr	BASEPRI, r3
1a0025a0:	f3bf 8f6f 	isb	sy
1a0025a4:	f3bf 8f4f 	dsb	sy
1a0025a8:	e7fe      	b.n	1a0025a8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a0025aa:	f7ff fed7 	bl	1a00235c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a0025ae:	2100      	movs	r1, #0
1a0025b0:	4620      	mov	r0, r4
1a0025b2:	f7ff fdbf 	bl	1a002134 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a0025b6:	f7ff ff6b 	bl	1a002490 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0025ba:	b938      	cbnz	r0, 1a0025cc <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a0025bc:	4b05      	ldr	r3, [pc, #20]	; (1a0025d4 <vTaskDelay+0x48>)
1a0025be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0025c2:	601a      	str	r2, [r3, #0]
1a0025c4:	f3bf 8f4f 	dsb	sy
1a0025c8:	f3bf 8f6f 	isb	sy
	}
1a0025cc:	bd10      	pop	{r4, pc}
1a0025ce:	bf00      	nop
1a0025d0:	10002a1c 	.word	0x10002a1c
1a0025d4:	e000ed04 	.word	0xe000ed04

1a0025d8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0025d8:	4b2d      	ldr	r3, [pc, #180]	; (1a002690 <vTaskSwitchContext+0xb8>)
1a0025da:	681b      	ldr	r3, [r3, #0]
1a0025dc:	b11b      	cbz	r3, 1a0025e6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0025de:	4b2d      	ldr	r3, [pc, #180]	; (1a002694 <vTaskSwitchContext+0xbc>)
1a0025e0:	2201      	movs	r2, #1
1a0025e2:	601a      	str	r2, [r3, #0]
1a0025e4:	4770      	bx	lr
{
1a0025e6:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0025e8:	4b2a      	ldr	r3, [pc, #168]	; (1a002694 <vTaskSwitchContext+0xbc>)
1a0025ea:	2200      	movs	r2, #0
1a0025ec:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0025ee:	4b2a      	ldr	r3, [pc, #168]	; (1a002698 <vTaskSwitchContext+0xc0>)
1a0025f0:	681b      	ldr	r3, [r3, #0]
1a0025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0025f4:	681a      	ldr	r2, [r3, #0]
1a0025f6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0025fa:	d103      	bne.n	1a002604 <vTaskSwitchContext+0x2c>
1a0025fc:	685a      	ldr	r2, [r3, #4]
1a0025fe:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002602:	d01b      	beq.n	1a00263c <vTaskSwitchContext+0x64>
1a002604:	4b24      	ldr	r3, [pc, #144]	; (1a002698 <vTaskSwitchContext+0xc0>)
1a002606:	6818      	ldr	r0, [r3, #0]
1a002608:	6819      	ldr	r1, [r3, #0]
1a00260a:	3134      	adds	r1, #52	; 0x34
1a00260c:	f7ff fc46 	bl	1a001e9c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002610:	4b22      	ldr	r3, [pc, #136]	; (1a00269c <vTaskSwitchContext+0xc4>)
1a002612:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a002614:	fab3 f383 	clz	r3, r3
1a002618:	b2db      	uxtb	r3, r3
1a00261a:	f1c3 031f 	rsb	r3, r3, #31
1a00261e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a002622:	008a      	lsls	r2, r1, #2
1a002624:	491e      	ldr	r1, [pc, #120]	; (1a0026a0 <vTaskSwitchContext+0xc8>)
1a002626:	588a      	ldr	r2, [r1, r2]
1a002628:	b98a      	cbnz	r2, 1a00264e <vTaskSwitchContext+0x76>
	__asm volatile
1a00262a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00262e:	f383 8811 	msr	BASEPRI, r3
1a002632:	f3bf 8f6f 	isb	sy
1a002636:	f3bf 8f4f 	dsb	sy
1a00263a:	e7fe      	b.n	1a00263a <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a00263c:	689a      	ldr	r2, [r3, #8]
1a00263e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002642:	d1df      	bne.n	1a002604 <vTaskSwitchContext+0x2c>
1a002644:	68db      	ldr	r3, [r3, #12]
1a002646:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00264a:	d1db      	bne.n	1a002604 <vTaskSwitchContext+0x2c>
1a00264c:	e7e0      	b.n	1a002610 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00264e:	4814      	ldr	r0, [pc, #80]	; (1a0026a0 <vTaskSwitchContext+0xc8>)
1a002650:	009a      	lsls	r2, r3, #2
1a002652:	18d4      	adds	r4, r2, r3
1a002654:	00a1      	lsls	r1, r4, #2
1a002656:	4401      	add	r1, r0
1a002658:	684c      	ldr	r4, [r1, #4]
1a00265a:	6864      	ldr	r4, [r4, #4]
1a00265c:	604c      	str	r4, [r1, #4]
1a00265e:	441a      	add	r2, r3
1a002660:	0091      	lsls	r1, r2, #2
1a002662:	3108      	adds	r1, #8
1a002664:	4408      	add	r0, r1
1a002666:	4284      	cmp	r4, r0
1a002668:	d009      	beq.n	1a00267e <vTaskSwitchContext+0xa6>
1a00266a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00266e:	009a      	lsls	r2, r3, #2
1a002670:	4b0b      	ldr	r3, [pc, #44]	; (1a0026a0 <vTaskSwitchContext+0xc8>)
1a002672:	4413      	add	r3, r2
1a002674:	685b      	ldr	r3, [r3, #4]
1a002676:	68da      	ldr	r2, [r3, #12]
1a002678:	4b07      	ldr	r3, [pc, #28]	; (1a002698 <vTaskSwitchContext+0xc0>)
1a00267a:	601a      	str	r2, [r3, #0]
}
1a00267c:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00267e:	6860      	ldr	r0, [r4, #4]
1a002680:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a002684:	0091      	lsls	r1, r2, #2
1a002686:	4a06      	ldr	r2, [pc, #24]	; (1a0026a0 <vTaskSwitchContext+0xc8>)
1a002688:	440a      	add	r2, r1
1a00268a:	6050      	str	r0, [r2, #4]
1a00268c:	e7ed      	b.n	1a00266a <vTaskSwitchContext+0x92>
1a00268e:	bf00      	nop
1a002690:	10002a1c 	.word	0x10002a1c
1a002694:	10002a9c 	.word	0x10002a9c
1a002698:	10002978 	.word	0x10002978
1a00269c:	10002a24 	.word	0x10002a24
1a0026a0:	10002984 	.word	0x10002984

1a0026a4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0026a4:	b158      	cbz	r0, 1a0026be <vTaskPlaceOnEventList+0x1a>
{
1a0026a6:	b510      	push	{r4, lr}
1a0026a8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0026aa:	4b09      	ldr	r3, [pc, #36]	; (1a0026d0 <vTaskPlaceOnEventList+0x2c>)
1a0026ac:	6819      	ldr	r1, [r3, #0]
1a0026ae:	3118      	adds	r1, #24
1a0026b0:	f7ff fb8a 	bl	1a001dc8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0026b4:	2101      	movs	r1, #1
1a0026b6:	4620      	mov	r0, r4
1a0026b8:	f7ff fd3c 	bl	1a002134 <prvAddCurrentTaskToDelayedList>
}
1a0026bc:	bd10      	pop	{r4, pc}
1a0026be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026c2:	f383 8811 	msr	BASEPRI, r3
1a0026c6:	f3bf 8f6f 	isb	sy
1a0026ca:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a0026ce:	e7fe      	b.n	1a0026ce <vTaskPlaceOnEventList+0x2a>
1a0026d0:	10002978 	.word	0x10002978

1a0026d4 <vTaskPlaceOnEventListRestricted>:
	{
1a0026d4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0026d6:	b170      	cbz	r0, 1a0026f6 <vTaskPlaceOnEventListRestricted+0x22>
1a0026d8:	460c      	mov	r4, r1
1a0026da:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0026dc:	4a0a      	ldr	r2, [pc, #40]	; (1a002708 <vTaskPlaceOnEventListRestricted+0x34>)
1a0026de:	6811      	ldr	r1, [r2, #0]
1a0026e0:	3118      	adds	r1, #24
1a0026e2:	f7ff fb66 	bl	1a001db2 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0026e6:	b10d      	cbz	r5, 1a0026ec <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a0026e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0026ec:	4629      	mov	r1, r5
1a0026ee:	4620      	mov	r0, r4
1a0026f0:	f7ff fd20 	bl	1a002134 <prvAddCurrentTaskToDelayedList>
	}
1a0026f4:	bd38      	pop	{r3, r4, r5, pc}
1a0026f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026fa:	f383 8811 	msr	BASEPRI, r3
1a0026fe:	f3bf 8f6f 	isb	sy
1a002702:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a002706:	e7fe      	b.n	1a002706 <vTaskPlaceOnEventListRestricted+0x32>
1a002708:	10002978 	.word	0x10002978

1a00270c <xTaskRemoveFromEventList>:
{
1a00270c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a00270e:	68c3      	ldr	r3, [r0, #12]
1a002710:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a002712:	b324      	cbz	r4, 1a00275e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a002714:	f104 0518 	add.w	r5, r4, #24
1a002718:	4628      	mov	r0, r5
1a00271a:	f7ff fb6f 	bl	1a001dfc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00271e:	4b18      	ldr	r3, [pc, #96]	; (1a002780 <xTaskRemoveFromEventList+0x74>)
1a002720:	681b      	ldr	r3, [r3, #0]
1a002722:	bb2b      	cbnz	r3, 1a002770 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a002724:	1d25      	adds	r5, r4, #4
1a002726:	4628      	mov	r0, r5
1a002728:	f7ff fb68 	bl	1a001dfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00272c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00272e:	2201      	movs	r2, #1
1a002730:	409a      	lsls	r2, r3
1a002732:	4914      	ldr	r1, [pc, #80]	; (1a002784 <xTaskRemoveFromEventList+0x78>)
1a002734:	6808      	ldr	r0, [r1, #0]
1a002736:	4302      	orrs	r2, r0
1a002738:	600a      	str	r2, [r1, #0]
1a00273a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00273e:	009a      	lsls	r2, r3, #2
1a002740:	4629      	mov	r1, r5
1a002742:	4811      	ldr	r0, [pc, #68]	; (1a002788 <xTaskRemoveFromEventList+0x7c>)
1a002744:	4410      	add	r0, r2
1a002746:	f7ff fb34 	bl	1a001db2 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00274a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00274c:	4b0f      	ldr	r3, [pc, #60]	; (1a00278c <xTaskRemoveFromEventList+0x80>)
1a00274e:	681b      	ldr	r3, [r3, #0]
1a002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002752:	429a      	cmp	r2, r3
1a002754:	d911      	bls.n	1a00277a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a002756:	2001      	movs	r0, #1
1a002758:	4b0d      	ldr	r3, [pc, #52]	; (1a002790 <xTaskRemoveFromEventList+0x84>)
1a00275a:	6018      	str	r0, [r3, #0]
1a00275c:	e00e      	b.n	1a00277c <xTaskRemoveFromEventList+0x70>
1a00275e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002762:	f383 8811 	msr	BASEPRI, r3
1a002766:	f3bf 8f6f 	isb	sy
1a00276a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a00276e:	e7fe      	b.n	1a00276e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a002770:	4629      	mov	r1, r5
1a002772:	4808      	ldr	r0, [pc, #32]	; (1a002794 <xTaskRemoveFromEventList+0x88>)
1a002774:	f7ff fb1d 	bl	1a001db2 <vListInsertEnd>
1a002778:	e7e7      	b.n	1a00274a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a00277a:	2000      	movs	r0, #0
}
1a00277c:	bd38      	pop	{r3, r4, r5, pc}
1a00277e:	bf00      	nop
1a002780:	10002a1c 	.word	0x10002a1c
1a002784:	10002a24 	.word	0x10002a24
1a002788:	10002984 	.word	0x10002984
1a00278c:	10002978 	.word	0x10002978
1a002790:	10002a9c 	.word	0x10002a9c
1a002794:	10002a58 	.word	0x10002a58

1a002798 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a002798:	4b03      	ldr	r3, [pc, #12]	; (1a0027a8 <vTaskInternalSetTimeOutState+0x10>)
1a00279a:	681b      	ldr	r3, [r3, #0]
1a00279c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a00279e:	4b03      	ldr	r3, [pc, #12]	; (1a0027ac <vTaskInternalSetTimeOutState+0x14>)
1a0027a0:	681b      	ldr	r3, [r3, #0]
1a0027a2:	6043      	str	r3, [r0, #4]
}
1a0027a4:	4770      	bx	lr
1a0027a6:	bf00      	nop
1a0027a8:	10002a54 	.word	0x10002a54
1a0027ac:	10002a98 	.word	0x10002a98

1a0027b0 <xTaskCheckForTimeOut>:
{
1a0027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0027b2:	b1c8      	cbz	r0, 1a0027e8 <xTaskCheckForTimeOut+0x38>
1a0027b4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0027b6:	b301      	cbz	r1, 1a0027fa <xTaskCheckForTimeOut+0x4a>
1a0027b8:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0027ba:	f000 fb3d 	bl	1a002e38 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0027be:	4b1b      	ldr	r3, [pc, #108]	; (1a00282c <xTaskCheckForTimeOut+0x7c>)
1a0027c0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0027c2:	686b      	ldr	r3, [r5, #4]
1a0027c4:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
1a0027c6:	6822      	ldr	r2, [r4, #0]
1a0027c8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
1a0027cc:	d026      	beq.n	1a00281c <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0027ce:	682f      	ldr	r7, [r5, #0]
1a0027d0:	4e17      	ldr	r6, [pc, #92]	; (1a002830 <xTaskCheckForTimeOut+0x80>)
1a0027d2:	6836      	ldr	r6, [r6, #0]
1a0027d4:	42b7      	cmp	r7, r6
1a0027d6:	d001      	beq.n	1a0027dc <xTaskCheckForTimeOut+0x2c>
1a0027d8:	428b      	cmp	r3, r1
1a0027da:	d924      	bls.n	1a002826 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a0027dc:	4282      	cmp	r2, r0
1a0027de:	d815      	bhi.n	1a00280c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a0027e0:	2300      	movs	r3, #0
1a0027e2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0027e4:	2401      	movs	r4, #1
1a0027e6:	e01a      	b.n	1a00281e <xTaskCheckForTimeOut+0x6e>
1a0027e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027ec:	f383 8811 	msr	BASEPRI, r3
1a0027f0:	f3bf 8f6f 	isb	sy
1a0027f4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a0027f8:	e7fe      	b.n	1a0027f8 <xTaskCheckForTimeOut+0x48>
1a0027fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027fe:	f383 8811 	msr	BASEPRI, r3
1a002802:	f3bf 8f6f 	isb	sy
1a002806:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a00280a:	e7fe      	b.n	1a00280a <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a00280c:	1a5b      	subs	r3, r3, r1
1a00280e:	4413      	add	r3, r2
1a002810:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a002812:	4628      	mov	r0, r5
1a002814:	f7ff ffc0 	bl	1a002798 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a002818:	2400      	movs	r4, #0
1a00281a:	e000      	b.n	1a00281e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
1a00281c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00281e:	f000 fb2d 	bl	1a002e7c <vPortExitCritical>
}
1a002822:	4620      	mov	r0, r4
1a002824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
1a002826:	2401      	movs	r4, #1
1a002828:	e7f9      	b.n	1a00281e <xTaskCheckForTimeOut+0x6e>
1a00282a:	bf00      	nop
1a00282c:	10002a98 	.word	0x10002a98
1a002830:	10002a54 	.word	0x10002a54

1a002834 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a002834:	4b01      	ldr	r3, [pc, #4]	; (1a00283c <vTaskMissedYield+0x8>)
1a002836:	2201      	movs	r2, #1
1a002838:	601a      	str	r2, [r3, #0]
}
1a00283a:	4770      	bx	lr
1a00283c:	10002a9c 	.word	0x10002a9c

1a002840 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a002840:	4b05      	ldr	r3, [pc, #20]	; (1a002858 <xTaskGetSchedulerState+0x18>)
1a002842:	681b      	ldr	r3, [r3, #0]
1a002844:	b133      	cbz	r3, 1a002854 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002846:	4b05      	ldr	r3, [pc, #20]	; (1a00285c <xTaskGetSchedulerState+0x1c>)
1a002848:	681b      	ldr	r3, [r3, #0]
1a00284a:	b10b      	cbz	r3, 1a002850 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a00284c:	2000      	movs	r0, #0
	}
1a00284e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a002850:	2002      	movs	r0, #2
1a002852:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a002854:	2001      	movs	r0, #1
1a002856:	4770      	bx	lr
1a002858:	10002a6c 	.word	0x10002a6c
1a00285c:	10002a1c 	.word	0x10002a1c

1a002860 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a002860:	2800      	cmp	r0, #0
1a002862:	d04c      	beq.n	1a0028fe <xTaskPriorityDisinherit+0x9e>
	{
1a002864:	b538      	push	{r3, r4, r5, lr}
1a002866:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a002868:	4a27      	ldr	r2, [pc, #156]	; (1a002908 <xTaskPriorityDisinherit+0xa8>)
1a00286a:	6812      	ldr	r2, [r2, #0]
1a00286c:	4282      	cmp	r2, r0
1a00286e:	d008      	beq.n	1a002882 <xTaskPriorityDisinherit+0x22>
1a002870:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002874:	f383 8811 	msr	BASEPRI, r3
1a002878:	f3bf 8f6f 	isb	sy
1a00287c:	f3bf 8f4f 	dsb	sy
1a002880:	e7fe      	b.n	1a002880 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a002882:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a002884:	b942      	cbnz	r2, 1a002898 <xTaskPriorityDisinherit+0x38>
1a002886:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00288a:	f383 8811 	msr	BASEPRI, r3
1a00288e:	f3bf 8f6f 	isb	sy
1a002892:	f3bf 8f4f 	dsb	sy
1a002896:	e7fe      	b.n	1a002896 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a002898:	3a01      	subs	r2, #1
1a00289a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a00289c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a00289e:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0028a0:	4288      	cmp	r0, r1
1a0028a2:	d02e      	beq.n	1a002902 <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0028a4:	b10a      	cbz	r2, 1a0028aa <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a0028a6:	2000      	movs	r0, #0
	}
1a0028a8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0028aa:	1d25      	adds	r5, r4, #4
1a0028ac:	4628      	mov	r0, r5
1a0028ae:	f7ff faa5 	bl	1a001dfc <uxListRemove>
1a0028b2:	b970      	cbnz	r0, 1a0028d2 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0028b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0028b6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a0028ba:	008b      	lsls	r3, r1, #2
1a0028bc:	4913      	ldr	r1, [pc, #76]	; (1a00290c <xTaskPriorityDisinherit+0xac>)
1a0028be:	58cb      	ldr	r3, [r1, r3]
1a0028c0:	b93b      	cbnz	r3, 1a0028d2 <xTaskPriorityDisinherit+0x72>
1a0028c2:	2301      	movs	r3, #1
1a0028c4:	fa03 f202 	lsl.w	r2, r3, r2
1a0028c8:	4911      	ldr	r1, [pc, #68]	; (1a002910 <xTaskPriorityDisinherit+0xb0>)
1a0028ca:	680b      	ldr	r3, [r1, #0]
1a0028cc:	ea23 0302 	bic.w	r3, r3, r2
1a0028d0:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a0028d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0028d4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0028d6:	f1c3 0207 	rsb	r2, r3, #7
1a0028da:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a0028dc:	2401      	movs	r4, #1
1a0028de:	fa04 f203 	lsl.w	r2, r4, r3
1a0028e2:	490b      	ldr	r1, [pc, #44]	; (1a002910 <xTaskPriorityDisinherit+0xb0>)
1a0028e4:	6808      	ldr	r0, [r1, #0]
1a0028e6:	4302      	orrs	r2, r0
1a0028e8:	600a      	str	r2, [r1, #0]
1a0028ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0028ee:	009a      	lsls	r2, r3, #2
1a0028f0:	4629      	mov	r1, r5
1a0028f2:	4806      	ldr	r0, [pc, #24]	; (1a00290c <xTaskPriorityDisinherit+0xac>)
1a0028f4:	4410      	add	r0, r2
1a0028f6:	f7ff fa5c 	bl	1a001db2 <vListInsertEnd>
					xReturn = pdTRUE;
1a0028fa:	4620      	mov	r0, r4
1a0028fc:	e7d4      	b.n	1a0028a8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a0028fe:	2000      	movs	r0, #0
	}
1a002900:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a002902:	2000      	movs	r0, #0
1a002904:	e7d0      	b.n	1a0028a8 <xTaskPriorityDisinherit+0x48>
1a002906:	bf00      	nop
1a002908:	10002978 	.word	0x10002978
1a00290c:	10002984 	.word	0x10002984
1a002910:	10002a24 	.word	0x10002a24

1a002914 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a002914:	4b06      	ldr	r3, [pc, #24]	; (1a002930 <prvGetNextExpireTime+0x1c>)
1a002916:	681a      	ldr	r2, [r3, #0]
1a002918:	6813      	ldr	r3, [r2, #0]
1a00291a:	fab3 f383 	clz	r3, r3
1a00291e:	095b      	lsrs	r3, r3, #5
1a002920:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a002922:	b913      	cbnz	r3, 1a00292a <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002924:	68d3      	ldr	r3, [r2, #12]
1a002926:	6818      	ldr	r0, [r3, #0]
1a002928:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a00292a:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a00292c:	4770      	bx	lr
1a00292e:	bf00      	nop
1a002930:	10002aa0 	.word	0x10002aa0

1a002934 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a002934:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a002936:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002938:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a00293a:	4291      	cmp	r1, r2
1a00293c:	d80c      	bhi.n	1a002958 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00293e:	1ad2      	subs	r2, r2, r3
1a002940:	6983      	ldr	r3, [r0, #24]
1a002942:	429a      	cmp	r2, r3
1a002944:	d301      	bcc.n	1a00294a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a002946:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a002948:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00294a:	1d01      	adds	r1, r0, #4
1a00294c:	4b09      	ldr	r3, [pc, #36]	; (1a002974 <prvInsertTimerInActiveList+0x40>)
1a00294e:	6818      	ldr	r0, [r3, #0]
1a002950:	f7ff fa3a 	bl	1a001dc8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002954:	2000      	movs	r0, #0
1a002956:	e7f7      	b.n	1a002948 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a002958:	429a      	cmp	r2, r3
1a00295a:	d201      	bcs.n	1a002960 <prvInsertTimerInActiveList+0x2c>
1a00295c:	4299      	cmp	r1, r3
1a00295e:	d206      	bcs.n	1a00296e <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002960:	1d01      	adds	r1, r0, #4
1a002962:	4b05      	ldr	r3, [pc, #20]	; (1a002978 <prvInsertTimerInActiveList+0x44>)
1a002964:	6818      	ldr	r0, [r3, #0]
1a002966:	f7ff fa2f 	bl	1a001dc8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00296a:	2000      	movs	r0, #0
1a00296c:	e7ec      	b.n	1a002948 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a00296e:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a002970:	e7ea      	b.n	1a002948 <prvInsertTimerInActiveList+0x14>
1a002972:	bf00      	nop
1a002974:	10002aa4 	.word	0x10002aa4
1a002978:	10002aa0 	.word	0x10002aa0

1a00297c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a00297c:	b530      	push	{r4, r5, lr}
1a00297e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a002980:	f000 fa5a 	bl	1a002e38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a002984:	4b11      	ldr	r3, [pc, #68]	; (1a0029cc <prvCheckForValidListAndQueue+0x50>)
1a002986:	681b      	ldr	r3, [r3, #0]
1a002988:	b11b      	cbz	r3, 1a002992 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a00298a:	f000 fa77 	bl	1a002e7c <vPortExitCritical>
}
1a00298e:	b003      	add	sp, #12
1a002990:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a002992:	4d0f      	ldr	r5, [pc, #60]	; (1a0029d0 <prvCheckForValidListAndQueue+0x54>)
1a002994:	4628      	mov	r0, r5
1a002996:	f7ff f9fe 	bl	1a001d96 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a00299a:	4c0e      	ldr	r4, [pc, #56]	; (1a0029d4 <prvCheckForValidListAndQueue+0x58>)
1a00299c:	4620      	mov	r0, r4
1a00299e:	f7ff f9fa 	bl	1a001d96 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0029a2:	4b0d      	ldr	r3, [pc, #52]	; (1a0029d8 <prvCheckForValidListAndQueue+0x5c>)
1a0029a4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0029a6:	4b0d      	ldr	r3, [pc, #52]	; (1a0029dc <prvCheckForValidListAndQueue+0x60>)
1a0029a8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0029aa:	2300      	movs	r3, #0
1a0029ac:	9300      	str	r3, [sp, #0]
1a0029ae:	4b0c      	ldr	r3, [pc, #48]	; (1a0029e0 <prvCheckForValidListAndQueue+0x64>)
1a0029b0:	4a0c      	ldr	r2, [pc, #48]	; (1a0029e4 <prvCheckForValidListAndQueue+0x68>)
1a0029b2:	2110      	movs	r1, #16
1a0029b4:	200a      	movs	r0, #10
1a0029b6:	f7fe ff56 	bl	1a001866 <xQueueGenericCreateStatic>
1a0029ba:	4b04      	ldr	r3, [pc, #16]	; (1a0029cc <prvCheckForValidListAndQueue+0x50>)
1a0029bc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a0029be:	2800      	cmp	r0, #0
1a0029c0:	d0e3      	beq.n	1a00298a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a0029c2:	4909      	ldr	r1, [pc, #36]	; (1a0029e8 <prvCheckForValidListAndQueue+0x6c>)
1a0029c4:	f7ff f9aa 	bl	1a001d1c <vQueueAddToRegistry>
1a0029c8:	e7df      	b.n	1a00298a <prvCheckForValidListAndQueue+0xe>
1a0029ca:	bf00      	nop
1a0029cc:	10002bc4 	.word	0x10002bc4
1a0029d0:	10002b48 	.word	0x10002b48
1a0029d4:	10002b5c 	.word	0x10002b5c
1a0029d8:	10002aa0 	.word	0x10002aa0
1a0029dc:	10002aa4 	.word	0x10002aa4
1a0029e0:	10002b74 	.word	0x10002b74
1a0029e4:	10002aa8 	.word	0x10002aa8
1a0029e8:	1a00695c 	.word	0x1a00695c

1a0029ec <xTimerCreateTimerTask>:
{
1a0029ec:	b510      	push	{r4, lr}
1a0029ee:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a0029f0:	f7ff ffc4 	bl	1a00297c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a0029f4:	4b12      	ldr	r3, [pc, #72]	; (1a002a40 <xTimerCreateTimerTask+0x54>)
1a0029f6:	681b      	ldr	r3, [r3, #0]
1a0029f8:	b1cb      	cbz	r3, 1a002a2e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a0029fa:	2400      	movs	r4, #0
1a0029fc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a0029fe:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002a00:	aa07      	add	r2, sp, #28
1a002a02:	a906      	add	r1, sp, #24
1a002a04:	a805      	add	r0, sp, #20
1a002a06:	f7ff fa19 	bl	1a001e3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a002a0a:	9b05      	ldr	r3, [sp, #20]
1a002a0c:	9302      	str	r3, [sp, #8]
1a002a0e:	9b06      	ldr	r3, [sp, #24]
1a002a10:	9301      	str	r3, [sp, #4]
1a002a12:	2304      	movs	r3, #4
1a002a14:	9300      	str	r3, [sp, #0]
1a002a16:	4623      	mov	r3, r4
1a002a18:	9a07      	ldr	r2, [sp, #28]
1a002a1a:	490a      	ldr	r1, [pc, #40]	; (1a002a44 <xTimerCreateTimerTask+0x58>)
1a002a1c:	480a      	ldr	r0, [pc, #40]	; (1a002a48 <xTimerCreateTimerTask+0x5c>)
1a002a1e:	f7ff fbd5 	bl	1a0021cc <xTaskCreateStatic>
1a002a22:	4b0a      	ldr	r3, [pc, #40]	; (1a002a4c <xTimerCreateTimerTask+0x60>)
1a002a24:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a002a26:	b110      	cbz	r0, 1a002a2e <xTimerCreateTimerTask+0x42>
}
1a002a28:	2001      	movs	r0, #1
1a002a2a:	b008      	add	sp, #32
1a002a2c:	bd10      	pop	{r4, pc}
1a002a2e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a32:	f383 8811 	msr	BASEPRI, r3
1a002a36:	f3bf 8f6f 	isb	sy
1a002a3a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
1a002a3e:	e7fe      	b.n	1a002a3e <xTimerCreateTimerTask+0x52>
1a002a40:	10002bc4 	.word	0x10002bc4
1a002a44:	1a006964 	.word	0x1a006964
1a002a48:	1a002d31 	.word	0x1a002d31
1a002a4c:	10002bc8 	.word	0x10002bc8

1a002a50 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002a50:	b1c0      	cbz	r0, 1a002a84 <xTimerGenericCommand+0x34>
{
1a002a52:	b530      	push	{r4, r5, lr}
1a002a54:	b085      	sub	sp, #20
1a002a56:	4615      	mov	r5, r2
1a002a58:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a002a5a:	4a17      	ldr	r2, [pc, #92]	; (1a002ab8 <xTimerGenericCommand+0x68>)
1a002a5c:	6810      	ldr	r0, [r2, #0]
1a002a5e:	b340      	cbz	r0, 1a002ab2 <xTimerGenericCommand+0x62>
1a002a60:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a002a62:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002a64:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a002a66:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a002a68:	2905      	cmp	r1, #5
1a002a6a:	dc1c      	bgt.n	1a002aa6 <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002a6c:	f7ff fee8 	bl	1a002840 <xTaskGetSchedulerState>
1a002a70:	2802      	cmp	r0, #2
1a002a72:	d010      	beq.n	1a002a96 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a002a74:	2300      	movs	r3, #0
1a002a76:	461a      	mov	r2, r3
1a002a78:	4669      	mov	r1, sp
1a002a7a:	480f      	ldr	r0, [pc, #60]	; (1a002ab8 <xTimerGenericCommand+0x68>)
1a002a7c:	6800      	ldr	r0, [r0, #0]
1a002a7e:	f7fe ff63 	bl	1a001948 <xQueueGenericSend>
1a002a82:	e014      	b.n	1a002aae <xTimerGenericCommand+0x5e>
1a002a84:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a88:	f383 8811 	msr	BASEPRI, r3
1a002a8c:	f3bf 8f6f 	isb	sy
1a002a90:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a002a94:	e7fe      	b.n	1a002a94 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a002a96:	2300      	movs	r3, #0
1a002a98:	9a08      	ldr	r2, [sp, #32]
1a002a9a:	4669      	mov	r1, sp
1a002a9c:	4806      	ldr	r0, [pc, #24]	; (1a002ab8 <xTimerGenericCommand+0x68>)
1a002a9e:	6800      	ldr	r0, [r0, #0]
1a002aa0:	f7fe ff52 	bl	1a001948 <xQueueGenericSend>
1a002aa4:	e003      	b.n	1a002aae <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a002aa6:	2300      	movs	r3, #0
1a002aa8:	4669      	mov	r1, sp
1a002aaa:	f7ff f80d 	bl	1a001ac8 <xQueueGenericSendFromISR>
}
1a002aae:	b005      	add	sp, #20
1a002ab0:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a002ab2:	2000      	movs	r0, #0
	return xReturn;
1a002ab4:	e7fb      	b.n	1a002aae <xTimerGenericCommand+0x5e>
1a002ab6:	bf00      	nop
1a002ab8:	10002bc4 	.word	0x10002bc4

1a002abc <prvSwitchTimerLists>:
{
1a002abc:	b570      	push	{r4, r5, r6, lr}
1a002abe:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002ac0:	4b1a      	ldr	r3, [pc, #104]	; (1a002b2c <prvSwitchTimerLists+0x70>)
1a002ac2:	681b      	ldr	r3, [r3, #0]
1a002ac4:	681a      	ldr	r2, [r3, #0]
1a002ac6:	b352      	cbz	r2, 1a002b1e <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002ac8:	68db      	ldr	r3, [r3, #12]
1a002aca:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002acc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002ace:	1d25      	adds	r5, r4, #4
1a002ad0:	4628      	mov	r0, r5
1a002ad2:	f7ff f993 	bl	1a001dfc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002ad8:	4620      	mov	r0, r4
1a002ada:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002adc:	69e3      	ldr	r3, [r4, #28]
1a002ade:	2b01      	cmp	r3, #1
1a002ae0:	d1ee      	bne.n	1a002ac0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002ae2:	69a3      	ldr	r3, [r4, #24]
1a002ae4:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a002ae6:	429e      	cmp	r6, r3
1a002ae8:	d207      	bcs.n	1a002afa <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002aea:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002aec:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002aee:	4629      	mov	r1, r5
1a002af0:	4b0e      	ldr	r3, [pc, #56]	; (1a002b2c <prvSwitchTimerLists+0x70>)
1a002af2:	6818      	ldr	r0, [r3, #0]
1a002af4:	f7ff f968 	bl	1a001dc8 <vListInsert>
1a002af8:	e7e2      	b.n	1a002ac0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002afa:	2100      	movs	r1, #0
1a002afc:	9100      	str	r1, [sp, #0]
1a002afe:	460b      	mov	r3, r1
1a002b00:	4632      	mov	r2, r6
1a002b02:	4620      	mov	r0, r4
1a002b04:	f7ff ffa4 	bl	1a002a50 <xTimerGenericCommand>
				configASSERT( xResult );
1a002b08:	2800      	cmp	r0, #0
1a002b0a:	d1d9      	bne.n	1a002ac0 <prvSwitchTimerLists+0x4>
1a002b0c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b10:	f383 8811 	msr	BASEPRI, r3
1a002b14:	f3bf 8f6f 	isb	sy
1a002b18:	f3bf 8f4f 	dsb	sy
1a002b1c:	e7fe      	b.n	1a002b1c <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002b1e:	4a04      	ldr	r2, [pc, #16]	; (1a002b30 <prvSwitchTimerLists+0x74>)
1a002b20:	6810      	ldr	r0, [r2, #0]
1a002b22:	4902      	ldr	r1, [pc, #8]	; (1a002b2c <prvSwitchTimerLists+0x70>)
1a002b24:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a002b26:	6013      	str	r3, [r2, #0]
}
1a002b28:	b002      	add	sp, #8
1a002b2a:	bd70      	pop	{r4, r5, r6, pc}
1a002b2c:	10002aa0 	.word	0x10002aa0
1a002b30:	10002aa4 	.word	0x10002aa4

1a002b34 <prvSampleTimeNow>:
{
1a002b34:	b538      	push	{r3, r4, r5, lr}
1a002b36:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002b38:	f7ff fc18 	bl	1a00236c <xTaskGetTickCount>
1a002b3c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002b3e:	4b07      	ldr	r3, [pc, #28]	; (1a002b5c <prvSampleTimeNow+0x28>)
1a002b40:	681b      	ldr	r3, [r3, #0]
1a002b42:	4283      	cmp	r3, r0
1a002b44:	d805      	bhi.n	1a002b52 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a002b46:	2300      	movs	r3, #0
1a002b48:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002b4a:	4b04      	ldr	r3, [pc, #16]	; (1a002b5c <prvSampleTimeNow+0x28>)
1a002b4c:	601c      	str	r4, [r3, #0]
}
1a002b4e:	4620      	mov	r0, r4
1a002b50:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a002b52:	f7ff ffb3 	bl	1a002abc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a002b56:	2301      	movs	r3, #1
1a002b58:	602b      	str	r3, [r5, #0]
1a002b5a:	e7f6      	b.n	1a002b4a <prvSampleTimeNow+0x16>
1a002b5c:	10002b70 	.word	0x10002b70

1a002b60 <prvProcessExpiredTimer>:
{
1a002b60:	b570      	push	{r4, r5, r6, lr}
1a002b62:	b082      	sub	sp, #8
1a002b64:	4605      	mov	r5, r0
1a002b66:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002b68:	4b14      	ldr	r3, [pc, #80]	; (1a002bbc <prvProcessExpiredTimer+0x5c>)
1a002b6a:	681b      	ldr	r3, [r3, #0]
1a002b6c:	68db      	ldr	r3, [r3, #12]
1a002b6e:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002b70:	1d20      	adds	r0, r4, #4
1a002b72:	f7ff f943 	bl	1a001dfc <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002b76:	69e3      	ldr	r3, [r4, #28]
1a002b78:	2b01      	cmp	r3, #1
1a002b7a:	d004      	beq.n	1a002b86 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002b7e:	4620      	mov	r0, r4
1a002b80:	4798      	blx	r3
}
1a002b82:	b002      	add	sp, #8
1a002b84:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a002b86:	69a1      	ldr	r1, [r4, #24]
1a002b88:	462b      	mov	r3, r5
1a002b8a:	4632      	mov	r2, r6
1a002b8c:	4429      	add	r1, r5
1a002b8e:	4620      	mov	r0, r4
1a002b90:	f7ff fed0 	bl	1a002934 <prvInsertTimerInActiveList>
1a002b94:	2800      	cmp	r0, #0
1a002b96:	d0f1      	beq.n	1a002b7c <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002b98:	2100      	movs	r1, #0
1a002b9a:	9100      	str	r1, [sp, #0]
1a002b9c:	460b      	mov	r3, r1
1a002b9e:	462a      	mov	r2, r5
1a002ba0:	4620      	mov	r0, r4
1a002ba2:	f7ff ff55 	bl	1a002a50 <xTimerGenericCommand>
			configASSERT( xResult );
1a002ba6:	2800      	cmp	r0, #0
1a002ba8:	d1e8      	bne.n	1a002b7c <prvProcessExpiredTimer+0x1c>
1a002baa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002bae:	f383 8811 	msr	BASEPRI, r3
1a002bb2:	f3bf 8f6f 	isb	sy
1a002bb6:	f3bf 8f4f 	dsb	sy
1a002bba:	e7fe      	b.n	1a002bba <prvProcessExpiredTimer+0x5a>
1a002bbc:	10002aa0 	.word	0x10002aa0

1a002bc0 <prvProcessTimerOrBlockTask>:
{
1a002bc0:	b570      	push	{r4, r5, r6, lr}
1a002bc2:	b082      	sub	sp, #8
1a002bc4:	4606      	mov	r6, r0
1a002bc6:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002bc8:	f7ff fbc8 	bl	1a00235c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002bcc:	a801      	add	r0, sp, #4
1a002bce:	f7ff ffb1 	bl	1a002b34 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a002bd2:	9b01      	ldr	r3, [sp, #4]
1a002bd4:	bb1b      	cbnz	r3, 1a002c1e <prvProcessTimerOrBlockTask+0x5e>
1a002bd6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002bd8:	b90c      	cbnz	r4, 1a002bde <prvProcessTimerOrBlockTask+0x1e>
1a002bda:	42b0      	cmp	r0, r6
1a002bdc:	d218      	bcs.n	1a002c10 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002bde:	b12c      	cbz	r4, 1a002bec <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002be0:	4b11      	ldr	r3, [pc, #68]	; (1a002c28 <prvProcessTimerOrBlockTask+0x68>)
1a002be2:	681b      	ldr	r3, [r3, #0]
1a002be4:	681c      	ldr	r4, [r3, #0]
1a002be6:	fab4 f484 	clz	r4, r4
1a002bea:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002bec:	4622      	mov	r2, r4
1a002bee:	1b71      	subs	r1, r6, r5
1a002bf0:	4b0e      	ldr	r3, [pc, #56]	; (1a002c2c <prvProcessTimerOrBlockTask+0x6c>)
1a002bf2:	6818      	ldr	r0, [r3, #0]
1a002bf4:	f7ff f8a6 	bl	1a001d44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002bf8:	f7ff fc4a 	bl	1a002490 <xTaskResumeAll>
1a002bfc:	b988      	cbnz	r0, 1a002c22 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002bfe:	4b0c      	ldr	r3, [pc, #48]	; (1a002c30 <prvProcessTimerOrBlockTask+0x70>)
1a002c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002c04:	601a      	str	r2, [r3, #0]
1a002c06:	f3bf 8f4f 	dsb	sy
1a002c0a:	f3bf 8f6f 	isb	sy
1a002c0e:	e008      	b.n	1a002c22 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002c10:	f7ff fc3e 	bl	1a002490 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002c14:	4629      	mov	r1, r5
1a002c16:	4630      	mov	r0, r6
1a002c18:	f7ff ffa2 	bl	1a002b60 <prvProcessExpiredTimer>
1a002c1c:	e001      	b.n	1a002c22 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002c1e:	f7ff fc37 	bl	1a002490 <xTaskResumeAll>
}
1a002c22:	b002      	add	sp, #8
1a002c24:	bd70      	pop	{r4, r5, r6, pc}
1a002c26:	bf00      	nop
1a002c28:	10002aa4 	.word	0x10002aa4
1a002c2c:	10002bc4 	.word	0x10002bc4
1a002c30:	e000ed04 	.word	0xe000ed04

1a002c34 <prvProcessReceivedCommands>:
{
1a002c34:	b530      	push	{r4, r5, lr}
1a002c36:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002c38:	e006      	b.n	1a002c48 <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a002c3a:	9907      	ldr	r1, [sp, #28]
1a002c3c:	9806      	ldr	r0, [sp, #24]
1a002c3e:	9b05      	ldr	r3, [sp, #20]
1a002c40:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002c42:	9b04      	ldr	r3, [sp, #16]
1a002c44:	2b00      	cmp	r3, #0
1a002c46:	da0b      	bge.n	1a002c60 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002c48:	2200      	movs	r2, #0
1a002c4a:	a904      	add	r1, sp, #16
1a002c4c:	4b37      	ldr	r3, [pc, #220]	; (1a002d2c <prvProcessReceivedCommands+0xf8>)
1a002c4e:	6818      	ldr	r0, [r3, #0]
1a002c50:	f7fe ffa2 	bl	1a001b98 <xQueueReceive>
1a002c54:	2800      	cmp	r0, #0
1a002c56:	d066      	beq.n	1a002d26 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002c58:	9b04      	ldr	r3, [sp, #16]
1a002c5a:	2b00      	cmp	r3, #0
1a002c5c:	daf1      	bge.n	1a002c42 <prvProcessReceivedCommands+0xe>
1a002c5e:	e7ec      	b.n	1a002c3a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002c60:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002c62:	6963      	ldr	r3, [r4, #20]
1a002c64:	b113      	cbz	r3, 1a002c6c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002c66:	1d20      	adds	r0, r4, #4
1a002c68:	f7ff f8c8 	bl	1a001dfc <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002c6c:	a803      	add	r0, sp, #12
1a002c6e:	f7ff ff61 	bl	1a002b34 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a002c72:	9b04      	ldr	r3, [sp, #16]
1a002c74:	2b09      	cmp	r3, #9
1a002c76:	d8e7      	bhi.n	1a002c48 <prvProcessReceivedCommands+0x14>
1a002c78:	a201      	add	r2, pc, #4	; (adr r2, 1a002c80 <prvProcessReceivedCommands+0x4c>)
1a002c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002c7e:	bf00      	nop
1a002c80:	1a002ca9 	.word	0x1a002ca9
1a002c84:	1a002ca9 	.word	0x1a002ca9
1a002c88:	1a002ca9 	.word	0x1a002ca9
1a002c8c:	1a002c49 	.word	0x1a002c49
1a002c90:	1a002cf1 	.word	0x1a002cf1
1a002c94:	1a002d17 	.word	0x1a002d17
1a002c98:	1a002ca9 	.word	0x1a002ca9
1a002c9c:	1a002ca9 	.word	0x1a002ca9
1a002ca0:	1a002c49 	.word	0x1a002c49
1a002ca4:	1a002cf1 	.word	0x1a002cf1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002ca8:	9905      	ldr	r1, [sp, #20]
1a002caa:	69a5      	ldr	r5, [r4, #24]
1a002cac:	460b      	mov	r3, r1
1a002cae:	4602      	mov	r2, r0
1a002cb0:	4429      	add	r1, r5
1a002cb2:	4620      	mov	r0, r4
1a002cb4:	f7ff fe3e 	bl	1a002934 <prvInsertTimerInActiveList>
1a002cb8:	2800      	cmp	r0, #0
1a002cba:	d0c5      	beq.n	1a002c48 <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002cbe:	4620      	mov	r0, r4
1a002cc0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002cc2:	69e3      	ldr	r3, [r4, #28]
1a002cc4:	2b01      	cmp	r3, #1
1a002cc6:	d1bf      	bne.n	1a002c48 <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002cc8:	69a2      	ldr	r2, [r4, #24]
1a002cca:	2100      	movs	r1, #0
1a002ccc:	9100      	str	r1, [sp, #0]
1a002cce:	460b      	mov	r3, r1
1a002cd0:	9805      	ldr	r0, [sp, #20]
1a002cd2:	4402      	add	r2, r0
1a002cd4:	4620      	mov	r0, r4
1a002cd6:	f7ff febb 	bl	1a002a50 <xTimerGenericCommand>
							configASSERT( xResult );
1a002cda:	2800      	cmp	r0, #0
1a002cdc:	d1b4      	bne.n	1a002c48 <prvProcessReceivedCommands+0x14>
1a002cde:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ce2:	f383 8811 	msr	BASEPRI, r3
1a002ce6:	f3bf 8f6f 	isb	sy
1a002cea:	f3bf 8f4f 	dsb	sy
1a002cee:	e7fe      	b.n	1a002cee <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002cf0:	9905      	ldr	r1, [sp, #20]
1a002cf2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002cf4:	b131      	cbz	r1, 1a002d04 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002cf6:	4603      	mov	r3, r0
1a002cf8:	4602      	mov	r2, r0
1a002cfa:	4401      	add	r1, r0
1a002cfc:	4620      	mov	r0, r4
1a002cfe:	f7ff fe19 	bl	1a002934 <prvInsertTimerInActiveList>
					break;
1a002d02:	e7a1      	b.n	1a002c48 <prvProcessReceivedCommands+0x14>
1a002d04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d08:	f383 8811 	msr	BASEPRI, r3
1a002d0c:	f3bf 8f6f 	isb	sy
1a002d10:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002d14:	e7fe      	b.n	1a002d14 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002d16:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002d1a:	2b00      	cmp	r3, #0
1a002d1c:	d194      	bne.n	1a002c48 <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
1a002d1e:	4620      	mov	r0, r4
1a002d20:	f7fe fc76 	bl	1a001610 <vPortFree>
1a002d24:	e790      	b.n	1a002c48 <prvProcessReceivedCommands+0x14>
}
1a002d26:	b009      	add	sp, #36	; 0x24
1a002d28:	bd30      	pop	{r4, r5, pc}
1a002d2a:	bf00      	nop
1a002d2c:	10002bc4 	.word	0x10002bc4

1a002d30 <prvTimerTask>:
{
1a002d30:	b500      	push	{lr}
1a002d32:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002d34:	a801      	add	r0, sp, #4
1a002d36:	f7ff fded 	bl	1a002914 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002d3a:	9901      	ldr	r1, [sp, #4]
1a002d3c:	f7ff ff40 	bl	1a002bc0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002d40:	f7ff ff78 	bl	1a002c34 <prvProcessReceivedCommands>
1a002d44:	e7f6      	b.n	1a002d34 <prvTimerTask+0x4>
1a002d46:	Address 0x000000001a002d46 is out of bounds.


1a002d48 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002d48:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002d4a:	2300      	movs	r3, #0
1a002d4c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002d4e:	4b0d      	ldr	r3, [pc, #52]	; (1a002d84 <prvTaskExitError+0x3c>)
1a002d50:	681b      	ldr	r3, [r3, #0]
1a002d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002d56:	d008      	beq.n	1a002d6a <prvTaskExitError+0x22>
1a002d58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d5c:	f383 8811 	msr	BASEPRI, r3
1a002d60:	f3bf 8f6f 	isb	sy
1a002d64:	f3bf 8f4f 	dsb	sy
1a002d68:	e7fe      	b.n	1a002d68 <prvTaskExitError+0x20>
1a002d6a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d6e:	f383 8811 	msr	BASEPRI, r3
1a002d72:	f3bf 8f6f 	isb	sy
1a002d76:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002d7a:	9b01      	ldr	r3, [sp, #4]
1a002d7c:	2b00      	cmp	r3, #0
1a002d7e:	d0fc      	beq.n	1a002d7a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002d80:	b002      	add	sp, #8
1a002d82:	4770      	bx	lr
1a002d84:	10000000 	.word	0x10000000

1a002d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002d88:	4808      	ldr	r0, [pc, #32]	; (1a002dac <prvPortStartFirstTask+0x24>)
1a002d8a:	6800      	ldr	r0, [r0, #0]
1a002d8c:	6800      	ldr	r0, [r0, #0]
1a002d8e:	f380 8808 	msr	MSP, r0
1a002d92:	f04f 0000 	mov.w	r0, #0
1a002d96:	f380 8814 	msr	CONTROL, r0
1a002d9a:	b662      	cpsie	i
1a002d9c:	b661      	cpsie	f
1a002d9e:	f3bf 8f4f 	dsb	sy
1a002da2:	f3bf 8f6f 	isb	sy
1a002da6:	df00      	svc	0
1a002da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a002daa:	0000      	.short	0x0000
1a002dac:	e000ed08 	.word	0xe000ed08

1a002db0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002db0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002dc0 <vPortEnableVFP+0x10>
1a002db4:	6801      	ldr	r1, [r0, #0]
1a002db6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002dba:	6001      	str	r1, [r0, #0]
1a002dbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a002dbe:	0000      	.short	0x0000
1a002dc0:	e000ed88 	.word	0xe000ed88

1a002dc4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002dc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002dc8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002dcc:	f021 0101 	bic.w	r1, r1, #1
1a002dd0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002dd4:	4b05      	ldr	r3, [pc, #20]	; (1a002dec <pxPortInitialiseStack+0x28>)
1a002dd6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002dda:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002dde:	f06f 0302 	mvn.w	r3, #2
1a002de2:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002de6:	3844      	subs	r0, #68	; 0x44
1a002de8:	4770      	bx	lr
1a002dea:	bf00      	nop
1a002dec:	1a002d49 	.word	0x1a002d49

1a002df0 <SVC_Handler>:
	__asm volatile (
1a002df0:	4b07      	ldr	r3, [pc, #28]	; (1a002e10 <pxCurrentTCBConst2>)
1a002df2:	6819      	ldr	r1, [r3, #0]
1a002df4:	6808      	ldr	r0, [r1, #0]
1a002df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002dfa:	f380 8809 	msr	PSP, r0
1a002dfe:	f3bf 8f6f 	isb	sy
1a002e02:	f04f 0000 	mov.w	r0, #0
1a002e06:	f380 8811 	msr	BASEPRI, r0
1a002e0a:	4770      	bx	lr
1a002e0c:	f3af 8000 	nop.w

1a002e10 <pxCurrentTCBConst2>:
1a002e10:	10002978 	.word	0x10002978

1a002e14 <vPortEndScheduler>:
	configASSERT( uxCriticalNesting == 1000UL );
1a002e14:	4b07      	ldr	r3, [pc, #28]	; (1a002e34 <vPortEndScheduler+0x20>)
1a002e16:	681b      	ldr	r3, [r3, #0]
1a002e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1a002e1c:	d008      	beq.n	1a002e30 <vPortEndScheduler+0x1c>
1a002e1e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002e22:	f383 8811 	msr	BASEPRI, r3
1a002e26:	f3bf 8f6f 	isb	sy
1a002e2a:	f3bf 8f4f 	dsb	sy
1a002e2e:	e7fe      	b.n	1a002e2e <vPortEndScheduler+0x1a>
}
1a002e30:	4770      	bx	lr
1a002e32:	bf00      	nop
1a002e34:	10000000 	.word	0x10000000

1a002e38 <vPortEnterCritical>:
1a002e38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002e3c:	f383 8811 	msr	BASEPRI, r3
1a002e40:	f3bf 8f6f 	isb	sy
1a002e44:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002e48:	4a0a      	ldr	r2, [pc, #40]	; (1a002e74 <vPortEnterCritical+0x3c>)
1a002e4a:	6813      	ldr	r3, [r2, #0]
1a002e4c:	3301      	adds	r3, #1
1a002e4e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a002e50:	2b01      	cmp	r3, #1
1a002e52:	d000      	beq.n	1a002e56 <vPortEnterCritical+0x1e>
}
1a002e54:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002e56:	4b08      	ldr	r3, [pc, #32]	; (1a002e78 <vPortEnterCritical+0x40>)
1a002e58:	681b      	ldr	r3, [r3, #0]
1a002e5a:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002e5e:	d0f9      	beq.n	1a002e54 <vPortEnterCritical+0x1c>
1a002e60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002e64:	f383 8811 	msr	BASEPRI, r3
1a002e68:	f3bf 8f6f 	isb	sy
1a002e6c:	f3bf 8f4f 	dsb	sy
1a002e70:	e7fe      	b.n	1a002e70 <vPortEnterCritical+0x38>
1a002e72:	bf00      	nop
1a002e74:	10000000 	.word	0x10000000
1a002e78:	e000ed04 	.word	0xe000ed04

1a002e7c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002e7c:	4b09      	ldr	r3, [pc, #36]	; (1a002ea4 <vPortExitCritical+0x28>)
1a002e7e:	681b      	ldr	r3, [r3, #0]
1a002e80:	b943      	cbnz	r3, 1a002e94 <vPortExitCritical+0x18>
1a002e82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002e86:	f383 8811 	msr	BASEPRI, r3
1a002e8a:	f3bf 8f6f 	isb	sy
1a002e8e:	f3bf 8f4f 	dsb	sy
1a002e92:	e7fe      	b.n	1a002e92 <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002e94:	3b01      	subs	r3, #1
1a002e96:	4a03      	ldr	r2, [pc, #12]	; (1a002ea4 <vPortExitCritical+0x28>)
1a002e98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002e9a:	b90b      	cbnz	r3, 1a002ea0 <vPortExitCritical+0x24>
	__asm volatile
1a002e9c:	f383 8811 	msr	BASEPRI, r3
}
1a002ea0:	4770      	bx	lr
1a002ea2:	bf00      	nop
1a002ea4:	10000000 	.word	0x10000000
1a002ea8:	ffffffff 	.word	0xffffffff
1a002eac:	ffffffff 	.word	0xffffffff

1a002eb0 <PendSV_Handler>:
	__asm volatile
1a002eb0:	f3ef 8009 	mrs	r0, PSP
1a002eb4:	f3bf 8f6f 	isb	sy
1a002eb8:	4b15      	ldr	r3, [pc, #84]	; (1a002f10 <pxCurrentTCBConst>)
1a002eba:	681a      	ldr	r2, [r3, #0]
1a002ebc:	f01e 0f10 	tst.w	lr, #16
1a002ec0:	bf08      	it	eq
1a002ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002eca:	6010      	str	r0, [r2, #0]
1a002ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002ed0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002ed4:	f380 8811 	msr	BASEPRI, r0
1a002ed8:	f3bf 8f4f 	dsb	sy
1a002edc:	f3bf 8f6f 	isb	sy
1a002ee0:	f7ff fb7a 	bl	1a0025d8 <vTaskSwitchContext>
1a002ee4:	f04f 0000 	mov.w	r0, #0
1a002ee8:	f380 8811 	msr	BASEPRI, r0
1a002eec:	bc09      	pop	{r0, r3}
1a002eee:	6819      	ldr	r1, [r3, #0]
1a002ef0:	6808      	ldr	r0, [r1, #0]
1a002ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002ef6:	f01e 0f10 	tst.w	lr, #16
1a002efa:	bf08      	it	eq
1a002efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002f00:	f380 8809 	msr	PSP, r0
1a002f04:	f3bf 8f6f 	isb	sy
1a002f08:	4770      	bx	lr
1a002f0a:	bf00      	nop
1a002f0c:	f3af 8000 	nop.w

1a002f10 <pxCurrentTCBConst>:
1a002f10:	10002978 	.word	0x10002978

1a002f14 <SysTick_Handler>:
{
1a002f14:	b508      	push	{r3, lr}
	__asm volatile
1a002f16:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f1a:	f383 8811 	msr	BASEPRI, r3
1a002f1e:	f3bf 8f6f 	isb	sy
1a002f22:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002f26:	f7ff fa27 	bl	1a002378 <xTaskIncrementTick>
1a002f2a:	b118      	cbz	r0, 1a002f34 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002f2c:	4b03      	ldr	r3, [pc, #12]	; (1a002f3c <SysTick_Handler+0x28>)
1a002f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002f32:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002f34:	2300      	movs	r3, #0
1a002f36:	f383 8811 	msr	BASEPRI, r3
}
1a002f3a:	bd08      	pop	{r3, pc}
1a002f3c:	e000ed04 	.word	0xe000ed04

1a002f40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002f40:	4a08      	ldr	r2, [pc, #32]	; (1a002f64 <vPortSetupTimerInterrupt+0x24>)
1a002f42:	2300      	movs	r3, #0
1a002f44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002f46:	4908      	ldr	r1, [pc, #32]	; (1a002f68 <vPortSetupTimerInterrupt+0x28>)
1a002f48:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002f4a:	4b08      	ldr	r3, [pc, #32]	; (1a002f6c <vPortSetupTimerInterrupt+0x2c>)
1a002f4c:	681b      	ldr	r3, [r3, #0]
1a002f4e:	4908      	ldr	r1, [pc, #32]	; (1a002f70 <vPortSetupTimerInterrupt+0x30>)
1a002f50:	fba1 1303 	umull	r1, r3, r1, r3
1a002f54:	099b      	lsrs	r3, r3, #6
1a002f56:	3b01      	subs	r3, #1
1a002f58:	4906      	ldr	r1, [pc, #24]	; (1a002f74 <vPortSetupTimerInterrupt+0x34>)
1a002f5a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a002f5c:	2307      	movs	r3, #7
1a002f5e:	6013      	str	r3, [r2, #0]
}
1a002f60:	4770      	bx	lr
1a002f62:	bf00      	nop
1a002f64:	e000e010 	.word	0xe000e010
1a002f68:	e000e018 	.word	0xe000e018
1a002f6c:	10002d88 	.word	0x10002d88
1a002f70:	10624dd3 	.word	0x10624dd3
1a002f74:	e000e014 	.word	0xe000e014

1a002f78 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002f78:	4b3a      	ldr	r3, [pc, #232]	; (1a003064 <xPortStartScheduler+0xec>)
1a002f7a:	681a      	ldr	r2, [r3, #0]
1a002f7c:	4b3a      	ldr	r3, [pc, #232]	; (1a003068 <xPortStartScheduler+0xf0>)
1a002f7e:	429a      	cmp	r2, r3
1a002f80:	d029      	beq.n	1a002fd6 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002f82:	4b38      	ldr	r3, [pc, #224]	; (1a003064 <xPortStartScheduler+0xec>)
1a002f84:	681a      	ldr	r2, [r3, #0]
1a002f86:	4b39      	ldr	r3, [pc, #228]	; (1a00306c <xPortStartScheduler+0xf4>)
1a002f88:	429a      	cmp	r2, r3
1a002f8a:	d02d      	beq.n	1a002fe8 <xPortStartScheduler+0x70>
{
1a002f8c:	b510      	push	{r4, lr}
1a002f8e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002f90:	4b37      	ldr	r3, [pc, #220]	; (1a003070 <xPortStartScheduler+0xf8>)
1a002f92:	781a      	ldrb	r2, [r3, #0]
1a002f94:	b2d2      	uxtb	r2, r2
1a002f96:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002f98:	22ff      	movs	r2, #255	; 0xff
1a002f9a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002f9c:	781b      	ldrb	r3, [r3, #0]
1a002f9e:	b2db      	uxtb	r3, r3
1a002fa0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002fa4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002fa8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002fac:	4a31      	ldr	r2, [pc, #196]	; (1a003074 <xPortStartScheduler+0xfc>)
1a002fae:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002fb0:	4b31      	ldr	r3, [pc, #196]	; (1a003078 <xPortStartScheduler+0x100>)
1a002fb2:	2207      	movs	r2, #7
1a002fb4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002fb6:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002fba:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002fbe:	d01c      	beq.n	1a002ffa <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a002fc0:	4a2d      	ldr	r2, [pc, #180]	; (1a003078 <xPortStartScheduler+0x100>)
1a002fc2:	6813      	ldr	r3, [r2, #0]
1a002fc4:	3b01      	subs	r3, #1
1a002fc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002fc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002fcc:	005b      	lsls	r3, r3, #1
1a002fce:	b2db      	uxtb	r3, r3
1a002fd0:	f88d 3003 	strb.w	r3, [sp, #3]
1a002fd4:	e7ef      	b.n	1a002fb6 <xPortStartScheduler+0x3e>
	__asm volatile
1a002fd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002fda:	f383 8811 	msr	BASEPRI, r3
1a002fde:	f3bf 8f6f 	isb	sy
1a002fe2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002fe6:	e7fe      	b.n	1a002fe6 <xPortStartScheduler+0x6e>
1a002fe8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002fec:	f383 8811 	msr	BASEPRI, r3
1a002ff0:	f3bf 8f6f 	isb	sy
1a002ff4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002ff8:	e7fe      	b.n	1a002ff8 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002ffa:	4b1f      	ldr	r3, [pc, #124]	; (1a003078 <xPortStartScheduler+0x100>)
1a002ffc:	681b      	ldr	r3, [r3, #0]
1a002ffe:	2b04      	cmp	r3, #4
1a003000:	d008      	beq.n	1a003014 <xPortStartScheduler+0x9c>
1a003002:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003006:	f383 8811 	msr	BASEPRI, r3
1a00300a:	f3bf 8f6f 	isb	sy
1a00300e:	f3bf 8f4f 	dsb	sy
1a003012:	e7fe      	b.n	1a003012 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a003014:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a003016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00301a:	4a17      	ldr	r2, [pc, #92]	; (1a003078 <xPortStartScheduler+0x100>)
1a00301c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00301e:	9b01      	ldr	r3, [sp, #4]
1a003020:	b2db      	uxtb	r3, r3
1a003022:	4a13      	ldr	r2, [pc, #76]	; (1a003070 <xPortStartScheduler+0xf8>)
1a003024:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a003026:	4b15      	ldr	r3, [pc, #84]	; (1a00307c <xPortStartScheduler+0x104>)
1a003028:	681a      	ldr	r2, [r3, #0]
1a00302a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00302e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a003030:	681a      	ldr	r2, [r3, #0]
1a003032:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a003036:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a003038:	f7ff ff82 	bl	1a002f40 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00303c:	2400      	movs	r4, #0
1a00303e:	4b10      	ldr	r3, [pc, #64]	; (1a003080 <xPortStartScheduler+0x108>)
1a003040:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a003042:	f7ff feb5 	bl	1a002db0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a003046:	4a0f      	ldr	r2, [pc, #60]	; (1a003084 <xPortStartScheduler+0x10c>)
1a003048:	6813      	ldr	r3, [r2, #0]
1a00304a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00304e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a003050:	f7ff fe9a 	bl	1a002d88 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a003054:	f7ff fac0 	bl	1a0025d8 <vTaskSwitchContext>
	prvTaskExitError();
1a003058:	f7ff fe76 	bl	1a002d48 <prvTaskExitError>
}
1a00305c:	4620      	mov	r0, r4
1a00305e:	b002      	add	sp, #8
1a003060:	bd10      	pop	{r4, pc}
1a003062:	bf00      	nop
1a003064:	e000ed00 	.word	0xe000ed00
1a003068:	410fc271 	.word	0x410fc271
1a00306c:	410fc270 	.word	0x410fc270
1a003070:	e000e400 	.word	0xe000e400
1a003074:	10002bcc 	.word	0x10002bcc
1a003078:	10002bd0 	.word	0x10002bd0
1a00307c:	e000ed20 	.word	0xe000ed20
1a003080:	10000000 	.word	0x10000000
1a003084:	e000ef34 	.word	0xe000ef34

1a003088 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a003088:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00308c:	2b0f      	cmp	r3, #15
1a00308e:	d90f      	bls.n	1a0030b0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a003090:	4a10      	ldr	r2, [pc, #64]	; (1a0030d4 <vPortValidateInterruptPriority+0x4c>)
1a003092:	5c9b      	ldrb	r3, [r3, r2]
1a003094:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a003096:	4a10      	ldr	r2, [pc, #64]	; (1a0030d8 <vPortValidateInterruptPriority+0x50>)
1a003098:	7812      	ldrb	r2, [r2, #0]
1a00309a:	429a      	cmp	r2, r3
1a00309c:	d908      	bls.n	1a0030b0 <vPortValidateInterruptPriority+0x28>
1a00309e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0030a2:	f383 8811 	msr	BASEPRI, r3
1a0030a6:	f3bf 8f6f 	isb	sy
1a0030aa:	f3bf 8f4f 	dsb	sy
1a0030ae:	e7fe      	b.n	1a0030ae <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a0030b0:	4b0a      	ldr	r3, [pc, #40]	; (1a0030dc <vPortValidateInterruptPriority+0x54>)
1a0030b2:	681b      	ldr	r3, [r3, #0]
1a0030b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0030b8:	4a09      	ldr	r2, [pc, #36]	; (1a0030e0 <vPortValidateInterruptPriority+0x58>)
1a0030ba:	6812      	ldr	r2, [r2, #0]
1a0030bc:	4293      	cmp	r3, r2
1a0030be:	d908      	bls.n	1a0030d2 <vPortValidateInterruptPriority+0x4a>
1a0030c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0030c4:	f383 8811 	msr	BASEPRI, r3
1a0030c8:	f3bf 8f6f 	isb	sy
1a0030cc:	f3bf 8f4f 	dsb	sy
1a0030d0:	e7fe      	b.n	1a0030d0 <vPortValidateInterruptPriority+0x48>
	}
1a0030d2:	4770      	bx	lr
1a0030d4:	e000e3f0 	.word	0xe000e3f0
1a0030d8:	10002bcc 	.word	0x10002bcc
1a0030dc:	e000ed0c 	.word	0xe000ed0c
1a0030e0:	10002bd0 	.word	0x10002bd0

1a0030e4 <_kbhit>:
#endif

static int keyIdx;

int _kbhit()
{
1a0030e4:	b510      	push	{r4, lr}
   for ( int i=0; i<CONIO_KEYS; i++ )
1a0030e6:	2400      	movs	r4, #0
1a0030e8:	2c03      	cmp	r4, #3
1a0030ea:	dc0a      	bgt.n	1a003102 <_kbhit+0x1e>
      if ( gpioRead(keys[i]) == 0 ) {
1a0030ec:	4b06      	ldr	r3, [pc, #24]	; (1a003108 <_kbhit+0x24>)
1a0030ee:	5718      	ldrsb	r0, [r3, r4]
1a0030f0:	f001 fa9b 	bl	1a00462a <gpioRead>
1a0030f4:	b108      	cbz	r0, 1a0030fa <_kbhit+0x16>
   for ( int i=0; i<CONIO_KEYS; i++ )
1a0030f6:	3401      	adds	r4, #1
1a0030f8:	e7f6      	b.n	1a0030e8 <_kbhit+0x4>
         keyIdx = i;
1a0030fa:	4b04      	ldr	r3, [pc, #16]	; (1a00310c <_kbhit+0x28>)
1a0030fc:	601c      	str	r4, [r3, #0]
         return 1;
1a0030fe:	2001      	movs	r0, #1
1a003100:	e000      	b.n	1a003104 <_kbhit+0x20>
      }
   return 0;
1a003102:	2000      	movs	r0, #0
}
1a003104:	bd10      	pop	{r4, pc}
1a003106:	bf00      	nop
1a003108:	1a00696c 	.word	0x1a00696c
1a00310c:	10002bd4 	.word	0x10002bd4

1a003110 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a003110:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003112:	4b05      	ldr	r3, [pc, #20]	; (1a003128 <DAC_IRQHandler+0x18>)
1a003114:	2201      	movs	r2, #1
1a003116:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a00311a:	4b04      	ldr	r3, [pc, #16]	; (1a00312c <DAC_IRQHandler+0x1c>)
1a00311c:	681b      	ldr	r3, [r3, #0]
1a00311e:	b113      	cbz	r3, 1a003126 <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a003120:	4b02      	ldr	r3, [pc, #8]	; (1a00312c <DAC_IRQHandler+0x1c>)
1a003122:	681b      	ldr	r3, [r3, #0]
1a003124:	4798      	blx	r3
   }
}
1a003126:	bd08      	pop	{r3, pc}
1a003128:	e000e100 	.word	0xe000e100
1a00312c:	10002bd8 	.word	0x10002bd8

1a003130 <vPrintString>:
BaseType_t xKeyPressesStopApplication = pdTRUE;

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
1a003130:	b510      	push	{r4, lr}
1a003132:	4604      	mov	r4, r0
   BaseType_t xKeyHit = pdFALSE;

   // Print the string, using a critical section as a crude method of mutual
   // exclusion.
   taskENTER_CRITICAL();
1a003134:	f7ff fe80 	bl	1a002e38 <vPortEnterCritical>
   {
      printf( "%s", pcString );
1a003138:	4621      	mov	r1, r4
1a00313a:	480c      	ldr	r0, [pc, #48]	; (1a00316c <vPrintString+0x3c>)
1a00313c:	f002 fe10 	bl	1a005d60 <iprintf>
      fflush( stdout );
1a003140:	4b0b      	ldr	r3, [pc, #44]	; (1a003170 <vPrintString+0x40>)
1a003142:	681b      	ldr	r3, [r3, #0]
1a003144:	6898      	ldr	r0, [r3, #8]
1a003146:	f002 fc1f 	bl	1a005988 <fflush>

      // Allow any key to stop the application.
      if( xKeyPressesStopApplication == pdTRUE ) {
1a00314a:	4b0a      	ldr	r3, [pc, #40]	; (1a003174 <vPrintString+0x44>)
1a00314c:	681b      	ldr	r3, [r3, #0]
1a00314e:	2b01      	cmp	r3, #1
1a003150:	d002      	beq.n	1a003158 <vPrintString+0x28>
         xKeyHit = _kbhit();
      }
   }
   taskEXIT_CRITICAL();
1a003152:	f7ff fe93 	bl	1a002e7c <vPortExitCritical>
   // Allow any key to stop the application running. A real application that
   // actually used the key value should protect access to the keyboard too.
   if( xKeyHit != pdFALSE ) {
      vTaskEndScheduler();
   }
}
1a003156:	bd10      	pop	{r4, pc}
         xKeyHit = _kbhit();
1a003158:	f7ff ffc4 	bl	1a0030e4 <_kbhit>
1a00315c:	4604      	mov	r4, r0
   taskEXIT_CRITICAL();
1a00315e:	f7ff fe8d 	bl	1a002e7c <vPortExitCritical>
   if( xKeyHit != pdFALSE ) {
1a003162:	2c00      	cmp	r4, #0
1a003164:	d0f7      	beq.n	1a003156 <vPrintString+0x26>
      vTaskEndScheduler();
1a003166:	f7ff f8e7 	bl	1a002338 <vTaskEndScheduler>
}
1a00316a:	e7f4      	b.n	1a003156 <vPrintString+0x26>
1a00316c:	1a006970 	.word	0x1a006970
1a003170:	10000050 	.word	0x10000050
1a003174:	10000004 	.word	0x10000004

1a003178 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003178:	2200      	movs	r2, #0
1a00317a:	2a05      	cmp	r2, #5
1a00317c:	d819      	bhi.n	1a0031b2 <Board_LED_Init+0x3a>
{
1a00317e:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a003180:	490c      	ldr	r1, [pc, #48]	; (1a0031b4 <Board_LED_Init+0x3c>)
1a003182:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a003186:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00318a:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a00318c:	4b0a      	ldr	r3, [pc, #40]	; (1a0031b8 <Board_LED_Init+0x40>)
1a00318e:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a003192:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a003196:	2001      	movs	r0, #1
1a003198:	40a0      	lsls	r0, r4
1a00319a:	4301      	orrs	r1, r0
1a00319c:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0031a0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0031a4:	2100      	movs	r1, #0
1a0031a6:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0031a8:	3201      	adds	r2, #1
1a0031aa:	2a05      	cmp	r2, #5
1a0031ac:	d9e8      	bls.n	1a003180 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0031ae:	bc70      	pop	{r4, r5, r6}
1a0031b0:	4770      	bx	lr
1a0031b2:	4770      	bx	lr
1a0031b4:	1a006980 	.word	0x1a006980
1a0031b8:	400f4000 	.word	0x400f4000

1a0031bc <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0031bc:	2300      	movs	r3, #0
1a0031be:	2b03      	cmp	r3, #3
1a0031c0:	d816      	bhi.n	1a0031f0 <Board_TEC_Init+0x34>
{
1a0031c2:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0031c4:	490b      	ldr	r1, [pc, #44]	; (1a0031f4 <Board_TEC_Init+0x38>)
1a0031c6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0031ca:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0031ce:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0031d0:	4c09      	ldr	r4, [pc, #36]	; (1a0031f8 <Board_TEC_Init+0x3c>)
1a0031d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0031d6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0031da:	2001      	movs	r0, #1
1a0031dc:	40a8      	lsls	r0, r5
1a0031de:	ea21 0100 	bic.w	r1, r1, r0
1a0031e2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0031e6:	3301      	adds	r3, #1
1a0031e8:	2b03      	cmp	r3, #3
1a0031ea:	d9eb      	bls.n	1a0031c4 <Board_TEC_Init+0x8>
   }
}
1a0031ec:	bc30      	pop	{r4, r5}
1a0031ee:	4770      	bx	lr
1a0031f0:	4770      	bx	lr
1a0031f2:	bf00      	nop
1a0031f4:	1a006978 	.word	0x1a006978
1a0031f8:	400f4000 	.word	0x400f4000

1a0031fc <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0031fc:	2300      	movs	r3, #0
1a0031fe:	2b08      	cmp	r3, #8
1a003200:	d816      	bhi.n	1a003230 <Board_GPIO_Init+0x34>
{
1a003202:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003204:	490b      	ldr	r1, [pc, #44]	; (1a003234 <Board_GPIO_Init+0x38>)
1a003206:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00320a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00320e:	784d      	ldrb	r5, [r1, #1]
1a003210:	4c09      	ldr	r4, [pc, #36]	; (1a003238 <Board_GPIO_Init+0x3c>)
1a003212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003216:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00321a:	2001      	movs	r0, #1
1a00321c:	40a8      	lsls	r0, r5
1a00321e:	ea21 0100 	bic.w	r1, r1, r0
1a003222:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003226:	3301      	adds	r3, #1
1a003228:	2b08      	cmp	r3, #8
1a00322a:	d9eb      	bls.n	1a003204 <Board_GPIO_Init+0x8>
   }
}
1a00322c:	bc30      	pop	{r4, r5}
1a00322e:	4770      	bx	lr
1a003230:	4770      	bx	lr
1a003232:	bf00      	nop
1a003234:	1a00698c 	.word	0x1a00698c
1a003238:	400f4000 	.word	0x400f4000

1a00323c <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a00323c:	b510      	push	{r4, lr}
1a00323e:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a003240:	4c08      	ldr	r4, [pc, #32]	; (1a003264 <Board_ADC_Init+0x28>)
1a003242:	4669      	mov	r1, sp
1a003244:	4620      	mov	r0, r4
1a003246:	f000 f9d9 	bl	1a0035fc <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00324a:	4a07      	ldr	r2, [pc, #28]	; (1a003268 <Board_ADC_Init+0x2c>)
1a00324c:	4669      	mov	r1, sp
1a00324e:	4620      	mov	r0, r4
1a003250:	f000 f9f4 	bl	1a00363c <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a003254:	2200      	movs	r2, #0
1a003256:	4669      	mov	r1, sp
1a003258:	4620      	mov	r0, r4
1a00325a:	f000 fa08 	bl	1a00366e <Chip_ADC_SetResolution>
}
1a00325e:	b002      	add	sp, #8
1a003260:	bd10      	pop	{r4, pc}
1a003262:	bf00      	nop
1a003264:	400e3000 	.word	0x400e3000
1a003268:	00061a80 	.word	0x00061a80

1a00326c <Board_SPI_Init>:
{
1a00326c:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00326e:	4c0b      	ldr	r4, [pc, #44]	; (1a00329c <Board_SPI_Init+0x30>)
1a003270:	4620      	mov	r0, r4
1a003272:	f000 ff7d 	bl	1a004170 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003276:	6863      	ldr	r3, [r4, #4]
1a003278:	f023 0304 	bic.w	r3, r3, #4
1a00327c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00327e:	6823      	ldr	r3, [r4, #0]
1a003280:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003284:	f043 0307 	orr.w	r3, r3, #7
1a003288:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00328a:	4905      	ldr	r1, [pc, #20]	; (1a0032a0 <Board_SPI_Init+0x34>)
1a00328c:	4620      	mov	r0, r4
1a00328e:	f000 ff50 	bl	1a004132 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a003292:	6863      	ldr	r3, [r4, #4]
1a003294:	f043 0302 	orr.w	r3, r3, #2
1a003298:	6063      	str	r3, [r4, #4]
}
1a00329a:	bd10      	pop	{r4, pc}
1a00329c:	400c5000 	.word	0x400c5000
1a0032a0:	000186a0 	.word	0x000186a0

1a0032a4 <Board_I2C_Init>:
{
1a0032a4:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0032a6:	2000      	movs	r0, #0
1a0032a8:	f000 fe9e 	bl	1a003fe8 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0032ac:	4b04      	ldr	r3, [pc, #16]	; (1a0032c0 <Board_I2C_Init+0x1c>)
1a0032ae:	f640 0208 	movw	r2, #2056	; 0x808
1a0032b2:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0032b6:	4903      	ldr	r1, [pc, #12]	; (1a0032c4 <Board_I2C_Init+0x20>)
1a0032b8:	2000      	movs	r0, #0
1a0032ba:	f000 fea7 	bl	1a00400c <Chip_I2C_SetClockRate>
}
1a0032be:	bd08      	pop	{r3, pc}
1a0032c0:	40086000 	.word	0x40086000
1a0032c4:	000f4240 	.word	0x000f4240

1a0032c8 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0032c8:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0032ca:	4c07      	ldr	r4, [pc, #28]	; (1a0032e8 <Board_Debug_Init+0x20>)
1a0032cc:	4620      	mov	r0, r4
1a0032ce:	f000 f8b9 	bl	1a003444 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0032d2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0032d6:	4620      	mov	r0, r4
1a0032d8:	f000 f8fe 	bl	1a0034d8 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0032dc:	2303      	movs	r3, #3
1a0032de:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0032e0:	2301      	movs	r3, #1
1a0032e2:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0032e4:	bd10      	pop	{r4, pc}
1a0032e6:	bf00      	nop
1a0032e8:	400c1000 	.word	0x400c1000

1a0032ec <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0032ec:	4b03      	ldr	r3, [pc, #12]	; (1a0032fc <Board_UARTPutChar+0x10>)
1a0032ee:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0032f0:	f013 0f20 	tst.w	r3, #32
1a0032f4:	d0fa      	beq.n	1a0032ec <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0032f6:	4b01      	ldr	r3, [pc, #4]	; (1a0032fc <Board_UARTPutChar+0x10>)
1a0032f8:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0032fa:	4770      	bx	lr
1a0032fc:	400c1000 	.word	0x400c1000

1a003300 <Board_UARTGetChar>:
	return pUART->LSR;
1a003300:	4b05      	ldr	r3, [pc, #20]	; (1a003318 <Board_UARTGetChar+0x18>)
1a003302:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a003304:	f013 0f01 	tst.w	r3, #1
1a003308:	d003      	beq.n	1a003312 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00330a:	4b03      	ldr	r3, [pc, #12]	; (1a003318 <Board_UARTGetChar+0x18>)
1a00330c:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00330e:	b2c0      	uxtb	r0, r0
1a003310:	4770      	bx	lr
   }
   return EOF;
1a003312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a003316:	4770      	bx	lr
1a003318:	400c1000 	.word	0x400c1000

1a00331c <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a00331c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00331e:	f7ff ffd3 	bl	1a0032c8 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a003322:	4809      	ldr	r0, [pc, #36]	; (1a003348 <Board_Init+0x2c>)
1a003324:	f000 fd13 	bl	1a003d4e <Chip_GPIO_Init>

   Board_GPIO_Init();
1a003328:	f7ff ff68 	bl	1a0031fc <Board_GPIO_Init>
   Board_ADC_Init();
1a00332c:	f7ff ff86 	bl	1a00323c <Board_ADC_Init>
   Board_SPI_Init();
1a003330:	f7ff ff9c 	bl	1a00326c <Board_SPI_Init>
   Board_I2C_Init();
1a003334:	f7ff ffb6 	bl	1a0032a4 <Board_I2C_Init>

   Board_LED_Init();
1a003338:	f7ff ff1e 	bl	1a003178 <Board_LED_Init>
   Board_TEC_Init();
1a00333c:	f7ff ff3e 	bl	1a0031bc <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a003340:	f000 fc62 	bl	1a003c08 <SystemCoreClockUpdate>
}
1a003344:	bd08      	pop	{r3, pc}
1a003346:	bf00      	nop
1a003348:	400f4000 	.word	0x400f4000

1a00334c <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a00334c:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00334e:	b2c0      	uxtb	r0, r0
1a003350:	f7ff ffcc 	bl	1a0032ec <Board_UARTPutChar>
}
1a003354:	bd08      	pop	{r3, pc}

1a003356 <__stdio_getchar>:

int __stdio_getchar()
{
1a003356:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a003358:	f7ff ffd2 	bl	1a003300 <Board_UARTGetChar>
}
1a00335c:	bd08      	pop	{r3, pc}

1a00335e <__stdio_init>:

void __stdio_init()
{
1a00335e:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a003360:	f7ff ffb2 	bl	1a0032c8 <Board_Debug_Init>
1a003364:	bd08      	pop	{r3, pc}
1a003366:	Address 0x000000001a003366 is out of bounds.


1a003368 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003368:	2300      	movs	r3, #0
1a00336a:	2b1c      	cmp	r3, #28
1a00336c:	d812      	bhi.n	1a003394 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00336e:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a003370:	4a09      	ldr	r2, [pc, #36]	; (1a003398 <Board_SetupMuxing+0x30>)
1a003372:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a003376:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00337a:	784a      	ldrb	r2, [r1, #1]
1a00337c:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00337e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a003382:	4906      	ldr	r1, [pc, #24]	; (1a00339c <Board_SetupMuxing+0x34>)
1a003384:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003388:	3301      	adds	r3, #1
1a00338a:	2b1c      	cmp	r3, #28
1a00338c:	d9f0      	bls.n	1a003370 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00338e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003392:	4770      	bx	lr
1a003394:	4770      	bx	lr
1a003396:	bf00      	nop
1a003398:	1a0069a8 	.word	0x1a0069a8
1a00339c:	40086000 	.word	0x40086000

1a0033a0 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0033a0:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0033a2:	4a17      	ldr	r2, [pc, #92]	; (1a003400 <Board_SetupClocking+0x60>)
1a0033a4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0033a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0033ac:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0033b0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0033b4:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0033b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0033bc:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0033c0:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0033c4:	2201      	movs	r2, #1
1a0033c6:	490f      	ldr	r1, [pc, #60]	; (1a003404 <Board_SetupClocking+0x64>)
1a0033c8:	2006      	movs	r0, #6
1a0033ca:	f000 fcc1 	bl	1a003d50 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0033ce:	2400      	movs	r4, #0
1a0033d0:	b14c      	cbz	r4, 1a0033e6 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0033d2:	4b0b      	ldr	r3, [pc, #44]	; (1a003400 <Board_SetupClocking+0x60>)
1a0033d4:	685a      	ldr	r2, [r3, #4]
1a0033d6:	f022 020c 	bic.w	r2, r2, #12
1a0033da:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0033dc:	685a      	ldr	r2, [r3, #4]
1a0033de:	f042 0203 	orr.w	r2, r2, #3
1a0033e2:	605a      	str	r2, [r3, #4]
}
1a0033e4:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0033e6:	4808      	ldr	r0, [pc, #32]	; (1a003408 <Board_SetupClocking+0x68>)
1a0033e8:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0033ec:	2301      	movs	r3, #1
1a0033ee:	788a      	ldrb	r2, [r1, #2]
1a0033f0:	7849      	ldrb	r1, [r1, #1]
1a0033f2:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0033f6:	f000 fb63 	bl	1a003ac0 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0033fa:	3401      	adds	r4, #1
1a0033fc:	e7e8      	b.n	1a0033d0 <Board_SetupClocking+0x30>
1a0033fe:	bf00      	nop
1a003400:	40043000 	.word	0x40043000
1a003404:	0c28cb00 	.word	0x0c28cb00
1a003408:	1a0069a4 	.word	0x1a0069a4

1a00340c <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a00340c:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00340e:	f7ff ffab 	bl	1a003368 <Board_SetupMuxing>
    Board_SetupClocking();
1a003412:	f7ff ffc5 	bl	1a0033a0 <Board_SetupClocking>
}
1a003416:	bd08      	pop	{r3, pc}

1a003418 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003418:	4b09      	ldr	r3, [pc, #36]	; (1a003440 <Chip_UART_GetIndex+0x28>)
1a00341a:	4298      	cmp	r0, r3
1a00341c:	d009      	beq.n	1a003432 <Chip_UART_GetIndex+0x1a>
1a00341e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a003422:	4298      	cmp	r0, r3
1a003424:	d007      	beq.n	1a003436 <Chip_UART_GetIndex+0x1e>
1a003426:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00342a:	4298      	cmp	r0, r3
1a00342c:	d005      	beq.n	1a00343a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00342e:	2000      	movs	r0, #0
1a003430:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a003432:	2002      	movs	r0, #2
1a003434:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a003436:	2003      	movs	r0, #3
1a003438:	4770      	bx	lr
			return 1;
1a00343a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a00343c:	4770      	bx	lr
1a00343e:	bf00      	nop
1a003440:	400c1000 	.word	0x400c1000

1a003444 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a003444:	b530      	push	{r4, r5, lr}
1a003446:	b083      	sub	sp, #12
1a003448:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00344a:	f7ff ffe5 	bl	1a003418 <Chip_UART_GetIndex>
1a00344e:	2301      	movs	r3, #1
1a003450:	461a      	mov	r2, r3
1a003452:	4619      	mov	r1, r3
1a003454:	4d0e      	ldr	r5, [pc, #56]	; (1a003490 <Chip_UART_Init+0x4c>)
1a003456:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00345a:	f000 fb77 	bl	1a003b4c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00345e:	2307      	movs	r3, #7
1a003460:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a003462:	2300      	movs	r3, #0
1a003464:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a003466:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003468:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00346a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a00346c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00346e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003470:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a003472:	4b08      	ldr	r3, [pc, #32]	; (1a003494 <Chip_UART_Init+0x50>)
1a003474:	429c      	cmp	r4, r3
1a003476:	d006      	beq.n	1a003486 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003478:	2303      	movs	r3, #3
1a00347a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a00347c:	2310      	movs	r3, #16
1a00347e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003480:	9b01      	ldr	r3, [sp, #4]
}
1a003482:	b003      	add	sp, #12
1a003484:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a003486:	2300      	movs	r3, #0
1a003488:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00348a:	69a3      	ldr	r3, [r4, #24]
1a00348c:	9301      	str	r3, [sp, #4]
1a00348e:	e7f3      	b.n	1a003478 <Chip_UART_Init+0x34>
1a003490:	1a006a24 	.word	0x1a006a24
1a003494:	40082000 	.word	0x40082000

1a003498 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a003498:	b538      	push	{r3, r4, r5, lr}
1a00349a:	4605      	mov	r5, r0
1a00349c:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00349e:	f7ff ffbb 	bl	1a003418 <Chip_UART_GetIndex>
1a0034a2:	4b0c      	ldr	r3, [pc, #48]	; (1a0034d4 <Chip_UART_SetBaud+0x3c>)
1a0034a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0034a8:	f000 fb88 	bl	1a003bbc <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0034ac:	0123      	lsls	r3, r4, #4
1a0034ae:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a0034b2:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0034b4:	68ea      	ldr	r2, [r5, #12]
1a0034b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0034ba:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a0034bc:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a0034be:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a0034c2:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0034c4:	68ea      	ldr	r2, [r5, #12]
1a0034c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0034ca:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0034cc:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0034d0:	0900      	lsrs	r0, r0, #4
1a0034d2:	bd38      	pop	{r3, r4, r5, pc}
1a0034d4:	1a006a1c 	.word	0x1a006a1c

1a0034d8 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0034d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0034dc:	b083      	sub	sp, #12
1a0034de:	9001      	str	r0, [sp, #4]
1a0034e0:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0034e2:	f7ff ff99 	bl	1a003418 <Chip_UART_GetIndex>
1a0034e6:	4b32      	ldr	r3, [pc, #200]	; (1a0035b0 <Chip_UART_SetBaudFDR+0xd8>)
1a0034e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0034ec:	f000 fb66 	bl	1a003bbc <Chip_Clock_GetRate>
1a0034f0:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0034f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0034f6:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0034f8:	f04f 0b00 	mov.w	fp, #0
1a0034fc:	46a2      	mov	sl, r4
1a0034fe:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a003500:	e02a      	b.n	1a003558 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a003502:	4242      	negs	r2, r0
				div ++;
1a003504:	1c4b      	adds	r3, r1, #1
1a003506:	e017      	b.n	1a003538 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003508:	b30a      	cbz	r2, 1a00354e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00350a:	4617      	mov	r7, r2
			sd = d;
1a00350c:	46ab      	mov	fp, r5
			sm = m;
1a00350e:	46a2      	mov	sl, r4
			sdiv = div;
1a003510:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a003512:	3501      	adds	r5, #1
1a003514:	42ac      	cmp	r4, r5
1a003516:	d91e      	bls.n	1a003556 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003518:	0933      	lsrs	r3, r6, #4
1a00351a:	0730      	lsls	r0, r6, #28
1a00351c:	fba4 0100 	umull	r0, r1, r4, r0
1a003520:	fb04 1103 	mla	r1, r4, r3, r1
1a003524:	1962      	adds	r2, r4, r5
1a003526:	fb08 f202 	mul.w	r2, r8, r2
1a00352a:	2300      	movs	r3, #0
1a00352c:	f001 ffe8 	bl	1a005500 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003530:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a003532:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a003534:	2800      	cmp	r0, #0
1a003536:	dbe4      	blt.n	1a003502 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003538:	4297      	cmp	r7, r2
1a00353a:	d3ea      	bcc.n	1a003512 <Chip_UART_SetBaudFDR+0x3a>
1a00353c:	2b00      	cmp	r3, #0
1a00353e:	d0e8      	beq.n	1a003512 <Chip_UART_SetBaudFDR+0x3a>
1a003540:	0c19      	lsrs	r1, r3, #16
1a003542:	d1e6      	bne.n	1a003512 <Chip_UART_SetBaudFDR+0x3a>
1a003544:	2b02      	cmp	r3, #2
1a003546:	d8df      	bhi.n	1a003508 <Chip_UART_SetBaudFDR+0x30>
1a003548:	2d00      	cmp	r5, #0
1a00354a:	d0dd      	beq.n	1a003508 <Chip_UART_SetBaudFDR+0x30>
1a00354c:	e7e1      	b.n	1a003512 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00354e:	4617      	mov	r7, r2
			sd = d;
1a003550:	46ab      	mov	fp, r5
			sm = m;
1a003552:	46a2      	mov	sl, r4
			sdiv = div;
1a003554:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003556:	3401      	adds	r4, #1
1a003558:	b11f      	cbz	r7, 1a003562 <Chip_UART_SetBaudFDR+0x8a>
1a00355a:	2c0f      	cmp	r4, #15
1a00355c:	d801      	bhi.n	1a003562 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00355e:	2500      	movs	r5, #0
1a003560:	e7d8      	b.n	1a003514 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a003562:	f1b9 0f00 	cmp.w	r9, #0
1a003566:	d01e      	beq.n	1a0035a6 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003568:	9a01      	ldr	r2, [sp, #4]
1a00356a:	4611      	mov	r1, r2
1a00356c:	68d3      	ldr	r3, [r2, #12]
1a00356e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003572:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a003574:	fa5f f389 	uxtb.w	r3, r9
1a003578:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a00357a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00357e:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003580:	68d3      	ldr	r3, [r2, #12]
1a003582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003586:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003588:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00358c:	b2db      	uxtb	r3, r3
1a00358e:	f00b 020f 	and.w	r2, fp, #15
1a003592:	4313      	orrs	r3, r2
1a003594:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a003596:	0933      	lsrs	r3, r6, #4
1a003598:	fb0a f303 	mul.w	r3, sl, r3
1a00359c:	44da      	add	sl, fp
1a00359e:	fb09 f90a 	mul.w	r9, r9, sl
1a0035a2:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0035a6:	4648      	mov	r0, r9
1a0035a8:	b003      	add	sp, #12
1a0035aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0035ae:	bf00      	nop
1a0035b0:	1a006a1c 	.word	0x1a006a1c

1a0035b4 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0035b4:	4b03      	ldr	r3, [pc, #12]	; (1a0035c4 <Chip_ADC_GetClockIndex+0x10>)
1a0035b6:	4298      	cmp	r0, r3
1a0035b8:	d001      	beq.n	1a0035be <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0035ba:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0035bc:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0035be:	2004      	movs	r0, #4
1a0035c0:	4770      	bx	lr
1a0035c2:	bf00      	nop
1a0035c4:	400e4000 	.word	0x400e4000

1a0035c8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0035c8:	b570      	push	{r4, r5, r6, lr}
1a0035ca:	460d      	mov	r5, r1
1a0035cc:	4614      	mov	r4, r2
1a0035ce:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0035d0:	f7ff fff0 	bl	1a0035b4 <Chip_ADC_GetClockIndex>
1a0035d4:	f000 faf2 	bl	1a003bbc <Chip_Clock_GetRate>
	if (burstMode) {
1a0035d8:	b155      	cbz	r5, 1a0035f0 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0035da:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0035de:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0035e2:	0064      	lsls	r4, r4, #1
1a0035e4:	fbb0 f0f4 	udiv	r0, r0, r4
1a0035e8:	b2c0      	uxtb	r0, r0
1a0035ea:	3801      	subs	r0, #1
	return div;
}
1a0035ec:	b2c0      	uxtb	r0, r0
1a0035ee:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0035f0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0035f4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0035f8:	e7f1      	b.n	1a0035de <getClkDiv+0x16>
1a0035fa:	Address 0x000000001a0035fa is out of bounds.


1a0035fc <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0035fc:	b538      	push	{r3, r4, r5, lr}
1a0035fe:	4605      	mov	r5, r0
1a003600:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a003602:	f7ff ffd7 	bl	1a0035b4 <Chip_ADC_GetClockIndex>
1a003606:	2301      	movs	r3, #1
1a003608:	461a      	mov	r2, r3
1a00360a:	4619      	mov	r1, r3
1a00360c:	f000 fa9e 	bl	1a003b4c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003610:	2100      	movs	r1, #0
1a003612:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003614:	4a08      	ldr	r2, [pc, #32]	; (1a003638 <Chip_ADC_Init+0x3c>)
1a003616:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003618:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00361a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a00361c:	230b      	movs	r3, #11
1a00361e:	4628      	mov	r0, r5
1a003620:	f7ff ffd2 	bl	1a0035c8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003624:	0200      	lsls	r0, r0, #8
1a003626:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00362a:	7920      	ldrb	r0, [r4, #4]
1a00362c:	0440      	lsls	r0, r0, #17
1a00362e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003632:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a003634:	6028      	str	r0, [r5, #0]
}
1a003636:	bd38      	pop	{r3, r4, r5, pc}
1a003638:	00061a80 	.word	0x00061a80

1a00363c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a00363c:	b570      	push	{r4, r5, r6, lr}
1a00363e:	4605      	mov	r5, r0
1a003640:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a003642:	6804      	ldr	r4, [r0, #0]
1a003644:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a003648:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a00364c:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00364e:	790b      	ldrb	r3, [r1, #4]
1a003650:	f1c3 030b 	rsb	r3, r3, #11
1a003654:	b2db      	uxtb	r3, r3
1a003656:	7949      	ldrb	r1, [r1, #5]
1a003658:	f7ff ffb6 	bl	1a0035c8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00365c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003660:	7933      	ldrb	r3, [r6, #4]
1a003662:	045b      	lsls	r3, r3, #17
1a003664:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a003668:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a00366a:	602b      	str	r3, [r5, #0]
}
1a00366c:	bd70      	pop	{r4, r5, r6, pc}

1a00366e <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00366e:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a003670:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a003672:	680a      	ldr	r2, [r1, #0]
1a003674:	f7ff ffe2 	bl	1a00363c <Chip_ADC_SetSampleRate>
}
1a003678:	bd08      	pop	{r3, pc}
1a00367a:	Address 0x000000001a00367a is out of bounds.


1a00367c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00367c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00367e:	680b      	ldr	r3, [r1, #0]
1a003680:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003684:	d002      	beq.n	1a00368c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a003686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00368a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a00368c:	4607      	mov	r7, r0
1a00368e:	2501      	movs	r5, #1
1a003690:	e03a      	b.n	1a003708 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a003692:	694b      	ldr	r3, [r1, #20]
1a003694:	fb03 f302 	mul.w	r3, r3, r2
1a003698:	fbb3 f3f5 	udiv	r3, r3, r5
1a00369c:	e01c      	b.n	1a0036d8 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00369e:	461c      	mov	r4, r3
	if (val < 0)
1a0036a0:	ebb0 0c04 	subs.w	ip, r0, r4
1a0036a4:	d427      	bmi.n	1a0036f6 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0036a6:	4567      	cmp	r7, ip
1a0036a8:	d906      	bls.n	1a0036b8 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a0036aa:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0036ac:	1c77      	adds	r7, r6, #1
1a0036ae:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0036b0:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0036b2:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0036b4:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0036b6:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a0036b8:	3201      	adds	r2, #1
1a0036ba:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0036be:	dc1d      	bgt.n	1a0036fc <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a0036c0:	680c      	ldr	r4, [r1, #0]
1a0036c2:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0036c6:	d0e4      	beq.n	1a003692 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0036c8:	1c73      	adds	r3, r6, #1
1a0036ca:	fa02 fc03 	lsl.w	ip, r2, r3
1a0036ce:	694b      	ldr	r3, [r1, #20]
1a0036d0:	fb03 f30c 	mul.w	r3, r3, ip
1a0036d4:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0036d8:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a003714 <pll_calc_divs+0x98>
1a0036dc:	4563      	cmp	r3, ip
1a0036de:	d9eb      	bls.n	1a0036b8 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0036e0:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a003718 <pll_calc_divs+0x9c>
1a0036e4:	4563      	cmp	r3, ip
1a0036e6:	d809      	bhi.n	1a0036fc <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a0036e8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0036ec:	d1d7      	bne.n	1a00369e <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a0036ee:	1c74      	adds	r4, r6, #1
1a0036f0:	fa23 f404 	lsr.w	r4, r3, r4
1a0036f4:	e7d4      	b.n	1a0036a0 <pll_calc_divs+0x24>
		return -val;
1a0036f6:	f1cc 0c00 	rsb	ip, ip, #0
1a0036fa:	e7d4      	b.n	1a0036a6 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a0036fc:	3601      	adds	r6, #1
1a0036fe:	2e03      	cmp	r6, #3
1a003700:	dc01      	bgt.n	1a003706 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a003702:	2201      	movs	r2, #1
1a003704:	e7d9      	b.n	1a0036ba <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a003706:	3501      	adds	r5, #1
1a003708:	2d04      	cmp	r5, #4
1a00370a:	dc01      	bgt.n	1a003710 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a00370c:	2600      	movs	r6, #0
1a00370e:	e7f6      	b.n	1a0036fe <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a003710:	bcf0      	pop	{r4, r5, r6, r7}
1a003712:	4770      	bx	lr
1a003714:	094c5eff 	.word	0x094c5eff
1a003718:	1312d000 	.word	0x1312d000

1a00371c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00371c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00371e:	b099      	sub	sp, #100	; 0x64
1a003720:	4605      	mov	r5, r0
1a003722:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a003724:	225c      	movs	r2, #92	; 0x5c
1a003726:	2100      	movs	r1, #0
1a003728:	a801      	add	r0, sp, #4
1a00372a:	f002 fa68 	bl	1a005bfe <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00372e:	2380      	movs	r3, #128	; 0x80
1a003730:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a003732:	6963      	ldr	r3, [r4, #20]
1a003734:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a003736:	7923      	ldrb	r3, [r4, #4]
1a003738:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a00373c:	4669      	mov	r1, sp
1a00373e:	4628      	mov	r0, r5
1a003740:	f7ff ff9c 	bl	1a00367c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a003744:	9b06      	ldr	r3, [sp, #24]
1a003746:	42ab      	cmp	r3, r5
1a003748:	d027      	beq.n	1a00379a <pll_get_frac+0x7e>
	if (val < 0)
1a00374a:	1aeb      	subs	r3, r5, r3
1a00374c:	d42e      	bmi.n	1a0037ac <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00374e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a003750:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a003752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003756:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003758:	6963      	ldr	r3, [r4, #20]
1a00375a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a00375c:	7923      	ldrb	r3, [r4, #4]
1a00375e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a003762:	a910      	add	r1, sp, #64	; 0x40
1a003764:	4628      	mov	r0, r5
1a003766:	f7ff ff89 	bl	1a00367c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00376a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00376c:	42ab      	cmp	r3, r5
1a00376e:	d01f      	beq.n	1a0037b0 <pll_get_frac+0x94>
	if (val < 0)
1a003770:	1aeb      	subs	r3, r5, r3
1a003772:	d425      	bmi.n	1a0037c0 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a003774:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a003776:	4b2b      	ldr	r3, [pc, #172]	; (1a003824 <pll_get_frac+0x108>)
1a003778:	429d      	cmp	r5, r3
1a00377a:	d923      	bls.n	1a0037c4 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a00377c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00377e:	1aed      	subs	r5, r5, r3
1a003780:	d433      	bmi.n	1a0037ea <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a003782:	42ae      	cmp	r6, r5
1a003784:	dc3b      	bgt.n	1a0037fe <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a003786:	42be      	cmp	r6, r7
1a003788:	dc31      	bgt.n	1a0037ee <pll_get_frac+0xd2>
			*ppll = pll[0];
1a00378a:	466d      	mov	r5, sp
1a00378c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00378e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003790:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003798:	e006      	b.n	1a0037a8 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00379a:	466d      	mov	r5, sp
1a00379c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00379e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0037a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0037a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0037a8:	b019      	add	sp, #100	; 0x64
1a0037aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0037ac:	425b      	negs	r3, r3
1a0037ae:	e7ce      	b.n	1a00374e <pll_get_frac+0x32>
		*ppll = pll[2];
1a0037b0:	ad10      	add	r5, sp, #64	; 0x40
1a0037b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0037b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0037b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0037ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0037be:	e7f3      	b.n	1a0037a8 <pll_get_frac+0x8c>
		return -val;
1a0037c0:	425b      	negs	r3, r3
1a0037c2:	e7d7      	b.n	1a003774 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0037c4:	2340      	movs	r3, #64	; 0x40
1a0037c6:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0037c8:	6963      	ldr	r3, [r4, #20]
1a0037ca:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0037cc:	a908      	add	r1, sp, #32
1a0037ce:	4628      	mov	r0, r5
1a0037d0:	f7ff ff54 	bl	1a00367c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0037d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0037d6:	42ab      	cmp	r3, r5
1a0037d8:	d1d0      	bne.n	1a00377c <pll_get_frac+0x60>
			*ppll = pll[1];
1a0037da:	ad08      	add	r5, sp, #32
1a0037dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0037de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0037e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0037e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0037e8:	e7de      	b.n	1a0037a8 <pll_get_frac+0x8c>
		return -val;
1a0037ea:	426d      	negs	r5, r5
1a0037ec:	e7c9      	b.n	1a003782 <pll_get_frac+0x66>
			*ppll = pll[2];
1a0037ee:	ad10      	add	r5, sp, #64	; 0x40
1a0037f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0037f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0037f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0037f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0037fc:	e7d4      	b.n	1a0037a8 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0037fe:	42af      	cmp	r7, r5
1a003800:	db07      	blt.n	1a003812 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a003802:	ad08      	add	r5, sp, #32
1a003804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003808:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00380c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003810:	e7ca      	b.n	1a0037a8 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a003812:	ad10      	add	r5, sp, #64	; 0x40
1a003814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003818:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00381c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003820:	e7c2      	b.n	1a0037a8 <pll_get_frac+0x8c>
1a003822:	bf00      	nop
1a003824:	068e7780 	.word	0x068e7780

1a003828 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003828:	b430      	push	{r4, r5}
1a00382a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a00382c:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00382e:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003830:	e000      	b.n	1a003834 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a003832:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003834:	281c      	cmp	r0, #28
1a003836:	d118      	bne.n	1a00386a <Chip_Clock_FindBaseClock+0x42>
1a003838:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00383c:	0051      	lsls	r1, r2, #1
1a00383e:	4a0c      	ldr	r2, [pc, #48]	; (1a003870 <Chip_Clock_FindBaseClock+0x48>)
1a003840:	440a      	add	r2, r1
1a003842:	7914      	ldrb	r4, [r2, #4]
1a003844:	4284      	cmp	r4, r0
1a003846:	d010      	beq.n	1a00386a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003848:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a00384c:	004a      	lsls	r2, r1, #1
1a00384e:	4908      	ldr	r1, [pc, #32]	; (1a003870 <Chip_Clock_FindBaseClock+0x48>)
1a003850:	5a8a      	ldrh	r2, [r1, r2]
1a003852:	42aa      	cmp	r2, r5
1a003854:	d8ed      	bhi.n	1a003832 <Chip_Clock_FindBaseClock+0xa>
1a003856:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00385a:	0051      	lsls	r1, r2, #1
1a00385c:	4a04      	ldr	r2, [pc, #16]	; (1a003870 <Chip_Clock_FindBaseClock+0x48>)
1a00385e:	440a      	add	r2, r1
1a003860:	8852      	ldrh	r2, [r2, #2]
1a003862:	42aa      	cmp	r2, r5
1a003864:	d3e5      	bcc.n	1a003832 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a003866:	4620      	mov	r0, r4
1a003868:	e7e4      	b.n	1a003834 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00386a:	bc30      	pop	{r4, r5}
1a00386c:	4770      	bx	lr
1a00386e:	bf00      	nop
1a003870:	1a006a38 	.word	0x1a006a38

1a003874 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a003874:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a003876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00387a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a00387c:	4a0d      	ldr	r2, [pc, #52]	; (1a0038b4 <Chip_Clock_EnableCrystal+0x40>)
1a00387e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a003880:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003884:	6992      	ldr	r2, [r2, #24]
1a003886:	428a      	cmp	r2, r1
1a003888:	d001      	beq.n	1a00388e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00388a:	4a0a      	ldr	r2, [pc, #40]	; (1a0038b4 <Chip_Clock_EnableCrystal+0x40>)
1a00388c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00388e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a003892:	4a09      	ldr	r2, [pc, #36]	; (1a0038b8 <Chip_Clock_EnableCrystal+0x44>)
1a003894:	6811      	ldr	r1, [r2, #0]
1a003896:	4a09      	ldr	r2, [pc, #36]	; (1a0038bc <Chip_Clock_EnableCrystal+0x48>)
1a003898:	4291      	cmp	r1, r2
1a00389a:	d901      	bls.n	1a0038a0 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a00389c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0038a0:	4a04      	ldr	r2, [pc, #16]	; (1a0038b4 <Chip_Clock_EnableCrystal+0x40>)
1a0038a2:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0038a4:	9b01      	ldr	r3, [sp, #4]
1a0038a6:	1e5a      	subs	r2, r3, #1
1a0038a8:	9201      	str	r2, [sp, #4]
1a0038aa:	2b00      	cmp	r3, #0
1a0038ac:	d1fa      	bne.n	1a0038a4 <Chip_Clock_EnableCrystal+0x30>
}
1a0038ae:	b002      	add	sp, #8
1a0038b0:	4770      	bx	lr
1a0038b2:	bf00      	nop
1a0038b4:	40050000 	.word	0x40050000
1a0038b8:	1a0069a0 	.word	0x1a0069a0
1a0038bc:	01312cff 	.word	0x01312cff

1a0038c0 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0038c0:	3012      	adds	r0, #18
1a0038c2:	4b05      	ldr	r3, [pc, #20]	; (1a0038d8 <Chip_Clock_GetDividerSource+0x18>)
1a0038c4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0038c8:	f010 0f01 	tst.w	r0, #1
1a0038cc:	d102      	bne.n	1a0038d4 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0038ce:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0038d2:	4770      	bx	lr
		return CLKINPUT_PD;
1a0038d4:	2011      	movs	r0, #17
}
1a0038d6:	4770      	bx	lr
1a0038d8:	40050000 	.word	0x40050000

1a0038dc <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0038dc:	f100 0212 	add.w	r2, r0, #18
1a0038e0:	4b03      	ldr	r3, [pc, #12]	; (1a0038f0 <Chip_Clock_GetDividerDivisor+0x14>)
1a0038e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0038e6:	4b03      	ldr	r3, [pc, #12]	; (1a0038f4 <Chip_Clock_GetDividerDivisor+0x18>)
1a0038e8:	5c18      	ldrb	r0, [r3, r0]
}
1a0038ea:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0038ee:	4770      	bx	lr
1a0038f0:	40050000 	.word	0x40050000
1a0038f4:	1a006a30 	.word	0x1a006a30

1a0038f8 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0038f8:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0038fa:	2810      	cmp	r0, #16
1a0038fc:	d80a      	bhi.n	1a003914 <Chip_Clock_GetClockInputHz+0x1c>
1a0038fe:	e8df f000 	tbb	[pc, r0]
1a003902:	0b44      	.short	0x0b44
1a003904:	0921180d 	.word	0x0921180d
1a003908:	2d2a2724 	.word	0x2d2a2724
1a00390c:	34300909 	.word	0x34300909
1a003910:	3c38      	.short	0x3c38
1a003912:	40          	.byte	0x40
1a003913:	00          	.byte	0x00
	uint32_t rate = 0;
1a003914:	2000      	movs	r0, #0
1a003916:	e03a      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003918:	481e      	ldr	r0, [pc, #120]	; (1a003994 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00391a:	e038      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00391c:	4b1e      	ldr	r3, [pc, #120]	; (1a003998 <Chip_Clock_GetClockInputHz+0xa0>)
1a00391e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003922:	f003 0307 	and.w	r3, r3, #7
1a003926:	2b04      	cmp	r3, #4
1a003928:	d001      	beq.n	1a00392e <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a00392a:	481c      	ldr	r0, [pc, #112]	; (1a00399c <Chip_Clock_GetClockInputHz+0xa4>)
1a00392c:	e02f      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a00392e:	2000      	movs	r0, #0
1a003930:	e02d      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003932:	4b19      	ldr	r3, [pc, #100]	; (1a003998 <Chip_Clock_GetClockInputHz+0xa0>)
1a003934:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003938:	f003 0307 	and.w	r3, r3, #7
1a00393c:	2b04      	cmp	r3, #4
1a00393e:	d027      	beq.n	1a003990 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003940:	4816      	ldr	r0, [pc, #88]	; (1a00399c <Chip_Clock_GetClockInputHz+0xa4>)
1a003942:	e024      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003944:	4b16      	ldr	r3, [pc, #88]	; (1a0039a0 <Chip_Clock_GetClockInputHz+0xa8>)
1a003946:	6818      	ldr	r0, [r3, #0]
		break;
1a003948:	e021      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00394a:	4b16      	ldr	r3, [pc, #88]	; (1a0039a4 <Chip_Clock_GetClockInputHz+0xac>)
1a00394c:	6818      	ldr	r0, [r3, #0]
		break;
1a00394e:	e01e      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003950:	4b15      	ldr	r3, [pc, #84]	; (1a0039a8 <Chip_Clock_GetClockInputHz+0xb0>)
1a003952:	6818      	ldr	r0, [r3, #0]
		break;
1a003954:	e01b      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a003956:	4b14      	ldr	r3, [pc, #80]	; (1a0039a8 <Chip_Clock_GetClockInputHz+0xb0>)
1a003958:	6858      	ldr	r0, [r3, #4]
		break;
1a00395a:	e018      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a00395c:	f000 f868 	bl	1a003a30 <Chip_Clock_GetMainPLLHz>
		break;
1a003960:	e015      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003962:	2100      	movs	r1, #0
1a003964:	f000 f89a 	bl	1a003a9c <Chip_Clock_GetDivRate>
		break;
1a003968:	e011      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00396a:	2101      	movs	r1, #1
1a00396c:	f000 f896 	bl	1a003a9c <Chip_Clock_GetDivRate>
		break;
1a003970:	e00d      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a003972:	2102      	movs	r1, #2
1a003974:	f000 f892 	bl	1a003a9c <Chip_Clock_GetDivRate>
		break;
1a003978:	e009      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00397a:	2103      	movs	r1, #3
1a00397c:	f000 f88e 	bl	1a003a9c <Chip_Clock_GetDivRate>
		break;
1a003980:	e005      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a003982:	2104      	movs	r1, #4
1a003984:	f000 f88a 	bl	1a003a9c <Chip_Clock_GetDivRate>
		break;
1a003988:	e001      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a00398a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00398e:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a003990:	4806      	ldr	r0, [pc, #24]	; (1a0039ac <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a003992:	e7fc      	b.n	1a00398e <Chip_Clock_GetClockInputHz+0x96>
1a003994:	00b71b00 	.word	0x00b71b00
1a003998:	40043000 	.word	0x40043000
1a00399c:	017d7840 	.word	0x017d7840
1a0039a0:	1a006974 	.word	0x1a006974
1a0039a4:	1a0069a0 	.word	0x1a0069a0
1a0039a8:	10002bdc 	.word	0x10002bdc
1a0039ac:	02faf080 	.word	0x02faf080

1a0039b0 <Chip_Clock_CalcMainPLLValue>:
{
1a0039b0:	b538      	push	{r3, r4, r5, lr}
1a0039b2:	4605      	mov	r5, r0
1a0039b4:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0039b6:	7908      	ldrb	r0, [r1, #4]
1a0039b8:	f7ff ff9e 	bl	1a0038f8 <Chip_Clock_GetClockInputHz>
1a0039bc:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0039be:	4b19      	ldr	r3, [pc, #100]	; (1a003a24 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0039c0:	442b      	add	r3, r5
1a0039c2:	4a19      	ldr	r2, [pc, #100]	; (1a003a28 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0039c4:	4293      	cmp	r3, r2
1a0039c6:	d821      	bhi.n	1a003a0c <Chip_Clock_CalcMainPLLValue+0x5c>
1a0039c8:	b318      	cbz	r0, 1a003a12 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0039ca:	2380      	movs	r3, #128	; 0x80
1a0039cc:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0039ce:	2300      	movs	r3, #0
1a0039d0:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0039d2:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0039d4:	fbb5 f3f0 	udiv	r3, r5, r0
1a0039d8:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0039da:	4a14      	ldr	r2, [pc, #80]	; (1a003a2c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0039dc:	4295      	cmp	r5, r2
1a0039de:	d903      	bls.n	1a0039e8 <Chip_Clock_CalcMainPLLValue+0x38>
1a0039e0:	fb03 f000 	mul.w	r0, r3, r0
1a0039e4:	42a8      	cmp	r0, r5
1a0039e6:	d007      	beq.n	1a0039f8 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0039e8:	4621      	mov	r1, r4
1a0039ea:	4628      	mov	r0, r5
1a0039ec:	f7ff fe96 	bl	1a00371c <pll_get_frac>
		if (!ppll->nsel) {
1a0039f0:	68a3      	ldr	r3, [r4, #8]
1a0039f2:	b18b      	cbz	r3, 1a003a18 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0039f4:	3b01      	subs	r3, #1
1a0039f6:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0039f8:	6923      	ldr	r3, [r4, #16]
1a0039fa:	b183      	cbz	r3, 1a003a1e <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0039fc:	68e2      	ldr	r2, [r4, #12]
1a0039fe:	b10a      	cbz	r2, 1a003a04 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003a00:	3a01      	subs	r2, #1
1a003a02:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003a04:	3b01      	subs	r3, #1
1a003a06:	6123      	str	r3, [r4, #16]
	return 0;
1a003a08:	2000      	movs	r0, #0
}
1a003a0a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003a10:	e7fb      	b.n	1a003a0a <Chip_Clock_CalcMainPLLValue+0x5a>
1a003a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003a16:	e7f8      	b.n	1a003a0a <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003a1c:	e7f5      	b.n	1a003a0a <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a003a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003a22:	e7f2      	b.n	1a003a0a <Chip_Clock_CalcMainPLLValue+0x5a>
1a003a24:	ff6b3a10 	.word	0xff6b3a10
1a003a28:	0b940510 	.word	0x0b940510
1a003a2c:	094c5eff 	.word	0x094c5eff

1a003a30 <Chip_Clock_GetMainPLLHz>:
{
1a003a30:	b530      	push	{r4, r5, lr}
1a003a32:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003a34:	4d17      	ldr	r5, [pc, #92]	; (1a003a94 <Chip_Clock_GetMainPLLHz+0x64>)
1a003a36:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003a38:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003a3c:	f7ff ff5c 	bl	1a0038f8 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003a40:	4b15      	ldr	r3, [pc, #84]	; (1a003a98 <Chip_Clock_GetMainPLLHz+0x68>)
1a003a42:	681b      	ldr	r3, [r3, #0]
1a003a44:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003a46:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003a48:	f013 0f01 	tst.w	r3, #1
1a003a4c:	d020      	beq.n	1a003a90 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a003a4e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a003a52:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003a56:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003a5a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a003a5e:	3301      	adds	r3, #1
	n = nsel + 1;
1a003a60:	3201      	adds	r2, #1
	p = ptab[psel];
1a003a62:	f10d 0c08 	add.w	ip, sp, #8
1a003a66:	4461      	add	r1, ip
1a003a68:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003a6c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003a70:	d108      	bne.n	1a003a84 <Chip_Clock_GetMainPLLHz+0x54>
1a003a72:	b93d      	cbnz	r5, 1a003a84 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a003a74:	0049      	lsls	r1, r1, #1
1a003a76:	fbb3 f3f1 	udiv	r3, r3, r1
1a003a7a:	fbb0 f0f2 	udiv	r0, r0, r2
1a003a7e:	fb00 f003 	mul.w	r0, r0, r3
1a003a82:	e003      	b.n	1a003a8c <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a003a84:	fbb0 f0f2 	udiv	r0, r0, r2
1a003a88:	fb03 f000 	mul.w	r0, r3, r0
}
1a003a8c:	b003      	add	sp, #12
1a003a8e:	bd30      	pop	{r4, r5, pc}
		return 0;
1a003a90:	2000      	movs	r0, #0
1a003a92:	e7fb      	b.n	1a003a8c <Chip_Clock_GetMainPLLHz+0x5c>
1a003a94:	40050000 	.word	0x40050000
1a003a98:	1a006a2c 	.word	0x1a006a2c

1a003a9c <Chip_Clock_GetDivRate>:
{
1a003a9c:	b538      	push	{r3, r4, r5, lr}
1a003a9e:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a003aa0:	4608      	mov	r0, r1
1a003aa2:	f7ff ff0d 	bl	1a0038c0 <Chip_Clock_GetDividerSource>
1a003aa6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003aa8:	4620      	mov	r0, r4
1a003aaa:	f7ff ff17 	bl	1a0038dc <Chip_Clock_GetDividerDivisor>
1a003aae:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a003ab0:	4628      	mov	r0, r5
1a003ab2:	f7ff ff21 	bl	1a0038f8 <Chip_Clock_GetClockInputHz>
1a003ab6:	3401      	adds	r4, #1
}
1a003ab8:	fbb0 f0f4 	udiv	r0, r0, r4
1a003abc:	bd38      	pop	{r3, r4, r5, pc}
1a003abe:	Address 0x000000001a003abe is out of bounds.


1a003ac0 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a003ac0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a003ac2:	f100 0416 	add.w	r4, r0, #22
1a003ac6:	00a4      	lsls	r4, r4, #2
1a003ac8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003acc:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a003ad0:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a003ad2:	281b      	cmp	r0, #27
1a003ad4:	d813      	bhi.n	1a003afe <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003ad6:	2911      	cmp	r1, #17
1a003ad8:	d01a      	beq.n	1a003b10 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003ada:	4d0e      	ldr	r5, [pc, #56]	; (1a003b14 <Chip_Clock_SetBaseClock+0x54>)
1a003adc:	4025      	ands	r5, r4

			if (autoblocken) {
1a003ade:	b10a      	cbz	r2, 1a003ae4 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a003ae0:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003ae4:	b10b      	cbz	r3, 1a003aea <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003ae6:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003aea:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003aee:	3016      	adds	r0, #22
1a003af0:	0080      	lsls	r0, r0, #2
1a003af2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003af6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003afa:	6045      	str	r5, [r0, #4]
1a003afc:	e008      	b.n	1a003b10 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003afe:	f044 0401 	orr.w	r4, r4, #1
1a003b02:	3016      	adds	r0, #22
1a003b04:	0080      	lsls	r0, r0, #2
1a003b06:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003b0a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003b0e:	6044      	str	r4, [r0, #4]
	}
}
1a003b10:	bc30      	pop	{r4, r5}
1a003b12:	4770      	bx	lr
1a003b14:	e0fff7fe 	.word	0xe0fff7fe

1a003b18 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003b18:	281b      	cmp	r0, #27
1a003b1a:	d80c      	bhi.n	1a003b36 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003b1c:	3016      	adds	r0, #22
1a003b1e:	0080      	lsls	r0, r0, #2
1a003b20:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003b24:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003b28:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003b2a:	f010 0f01 	tst.w	r0, #1
1a003b2e:	d104      	bne.n	1a003b3a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003b30:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003b34:	4770      	bx	lr
		return CLKINPUT_PD;
1a003b36:	2011      	movs	r0, #17
1a003b38:	4770      	bx	lr
		return CLKINPUT_PD;
1a003b3a:	2011      	movs	r0, #17
}
1a003b3c:	4770      	bx	lr

1a003b3e <Chip_Clock_GetBaseClocktHz>:
{
1a003b3e:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003b40:	f7ff ffea 	bl	1a003b18 <Chip_Clock_GetBaseClock>
1a003b44:	f7ff fed8 	bl	1a0038f8 <Chip_Clock_GetClockInputHz>
}
1a003b48:	bd08      	pop	{r3, pc}
1a003b4a:	Address 0x000000001a003b4a is out of bounds.


1a003b4c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003b4c:	b971      	cbnz	r1, 1a003b6c <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a003b4e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003b50:	b10a      	cbz	r2, 1a003b56 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a003b52:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003b56:	2b02      	cmp	r3, #2
1a003b58:	d00a      	beq.n	1a003b70 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003b5a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003b5e:	d30a      	bcc.n	1a003b76 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003b60:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003b64:	4b06      	ldr	r3, [pc, #24]	; (1a003b80 <Chip_Clock_EnableOpts+0x34>)
1a003b66:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003b6a:	4770      	bx	lr
		reg |= (1 << 1);
1a003b6c:	2103      	movs	r1, #3
1a003b6e:	e7ef      	b.n	1a003b50 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003b70:	f041 0120 	orr.w	r1, r1, #32
1a003b74:	e7f1      	b.n	1a003b5a <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003b76:	3020      	adds	r0, #32
1a003b78:	4b02      	ldr	r3, [pc, #8]	; (1a003b84 <Chip_Clock_EnableOpts+0x38>)
1a003b7a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003b7e:	4770      	bx	lr
1a003b80:	40052000 	.word	0x40052000
1a003b84:	40051000 	.word	0x40051000

1a003b88 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003b88:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003b8c:	d309      	bcc.n	1a003ba2 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003b8e:	4a09      	ldr	r2, [pc, #36]	; (1a003bb4 <Chip_Clock_Enable+0x2c>)
1a003b90:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003b94:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003b98:	f043 0301 	orr.w	r3, r3, #1
1a003b9c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003ba0:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003ba2:	4a05      	ldr	r2, [pc, #20]	; (1a003bb8 <Chip_Clock_Enable+0x30>)
1a003ba4:	3020      	adds	r0, #32
1a003ba6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003baa:	f043 0301 	orr.w	r3, r3, #1
1a003bae:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003bb2:	4770      	bx	lr
1a003bb4:	40052000 	.word	0x40052000
1a003bb8:	40051000 	.word	0x40051000

1a003bbc <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003bbc:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003bbe:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003bc2:	d309      	bcc.n	1a003bd8 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003bc4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003bc8:	4a0d      	ldr	r2, [pc, #52]	; (1a003c00 <Chip_Clock_GetRate+0x44>)
1a003bca:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003bce:	f014 0f01 	tst.w	r4, #1
1a003bd2:	d107      	bne.n	1a003be4 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003bd4:	2000      	movs	r0, #0
	}

	return rate;
}
1a003bd6:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003bd8:	f100 0320 	add.w	r3, r0, #32
1a003bdc:	4a09      	ldr	r2, [pc, #36]	; (1a003c04 <Chip_Clock_GetRate+0x48>)
1a003bde:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003be2:	e7f4      	b.n	1a003bce <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003be4:	f7ff fe20 	bl	1a003828 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003be8:	f7ff ffa9 	bl	1a003b3e <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003bec:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003bf0:	d103      	bne.n	1a003bfa <Chip_Clock_GetRate+0x3e>
			div = 1;
1a003bf2:	2301      	movs	r3, #1
		rate = rate / div;
1a003bf4:	fbb0 f0f3 	udiv	r0, r0, r3
1a003bf8:	e7ed      	b.n	1a003bd6 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003bfa:	2302      	movs	r3, #2
1a003bfc:	e7fa      	b.n	1a003bf4 <Chip_Clock_GetRate+0x38>
1a003bfe:	bf00      	nop
1a003c00:	40052000 	.word	0x40052000
1a003c04:	40051000 	.word	0x40051000

1a003c08 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003c08:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003c0a:	2069      	movs	r0, #105	; 0x69
1a003c0c:	f7ff ffd6 	bl	1a003bbc <Chip_Clock_GetRate>
1a003c10:	4b01      	ldr	r3, [pc, #4]	; (1a003c18 <SystemCoreClockUpdate+0x10>)
1a003c12:	6018      	str	r0, [r3, #0]
}
1a003c14:	bd08      	pop	{r3, pc}
1a003c16:	bf00      	nop
1a003c18:	10002d88 	.word	0x10002d88

1a003c1c <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003c1c:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a003c1e:	6843      	ldr	r3, [r0, #4]
1a003c20:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003c24:	2b30      	cmp	r3, #48	; 0x30
1a003c26:	d04c      	beq.n	1a003cc2 <Chip_I2CM_XferHandler+0xa6>
1a003c28:	d908      	bls.n	1a003c3c <Chip_I2CM_XferHandler+0x20>
1a003c2a:	2b48      	cmp	r3, #72	; 0x48
1a003c2c:	d06c      	beq.n	1a003d08 <Chip_I2CM_XferHandler+0xec>
1a003c2e:	d934      	bls.n	1a003c9a <Chip_I2CM_XferHandler+0x7e>
1a003c30:	2b58      	cmp	r3, #88	; 0x58
1a003c32:	d058      	beq.n	1a003ce6 <Chip_I2CM_XferHandler+0xca>
1a003c34:	2bf8      	cmp	r3, #248	; 0xf8
1a003c36:	d13e      	bne.n	1a003cb6 <Chip_I2CM_XferHandler+0x9a>
	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
		cclr &= ~I2C_CON_STO;
        break;
    case 0xF8:
      return 0;
1a003c38:	2000      	movs	r0, #0
1a003c3a:	e02b      	b.n	1a003c94 <Chip_I2CM_XferHandler+0x78>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003c3c:	2b10      	cmp	r3, #16
1a003c3e:	d016      	beq.n	1a003c6e <Chip_I2CM_XferHandler+0x52>
1a003c40:	d90e      	bls.n	1a003c60 <Chip_I2CM_XferHandler+0x44>
1a003c42:	2b20      	cmp	r3, #32
1a003c44:	d03d      	beq.n	1a003cc2 <Chip_I2CM_XferHandler+0xa6>
1a003c46:	2b28      	cmp	r3, #40	; 0x28
1a003c48:	d001      	beq.n	1a003c4e <Chip_I2CM_XferHandler+0x32>
1a003c4a:	2b18      	cmp	r3, #24
1a003c4c:	d135      	bne.n	1a003cba <Chip_I2CM_XferHandler+0x9e>
		if (!xfer->txSz) {
1a003c4e:	888b      	ldrh	r3, [r1, #4]
1a003c50:	2b00      	cmp	r3, #0
1a003c52:	d13e      	bne.n	1a003cd2 <Chip_I2CM_XferHandler+0xb6>
			if (xfer->rxSz) {
1a003c54:	88cb      	ldrh	r3, [r1, #6]
1a003c56:	2b00      	cmp	r3, #0
1a003c58:	d15e      	bne.n	1a003d18 <Chip_I2CM_XferHandler+0xfc>
				xfer->status = I2CM_STATUS_OK;
1a003c5a:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a003c5c:	232c      	movs	r3, #44	; 0x2c
1a003c5e:	e00f      	b.n	1a003c80 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003c60:	b91b      	cbnz	r3, 1a003c6a <Chip_I2CM_XferHandler+0x4e>
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a003c62:	2303      	movs	r3, #3
1a003c64:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003c66:	232c      	movs	r3, #44	; 0x2c
        break;
1a003c68:	e00a      	b.n	1a003c80 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003c6a:	2b08      	cmp	r3, #8
1a003c6c:	d125      	bne.n	1a003cba <Chip_I2CM_XferHandler+0x9e>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a003c6e:	780a      	ldrb	r2, [r1, #0]
1a003c70:	888b      	ldrh	r3, [r1, #4]
1a003c72:	fab3 f383 	clz	r3, r3
1a003c76:	095b      	lsrs	r3, r3, #5
1a003c78:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a003c7c:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003c7e:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a003c80:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a003c84:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a003c86:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a003c8a:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a003c8c:	8848      	ldrh	r0, [r1, #2]
1a003c8e:	38ff      	subs	r0, #255	; 0xff
1a003c90:	bf18      	it	ne
1a003c92:	2001      	movne	r0, #1
}
1a003c94:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003c98:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003c9a:	2b38      	cmp	r3, #56	; 0x38
1a003c9c:	d038      	beq.n	1a003d10 <Chip_I2CM_XferHandler+0xf4>
1a003c9e:	2b40      	cmp	r3, #64	; 0x40
1a003ca0:	d10b      	bne.n	1a003cba <Chip_I2CM_XferHandler+0x9e>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003ca2:	88ca      	ldrh	r2, [r1, #6]
1a003ca4:	2a01      	cmp	r2, #1
1a003ca6:	d927      	bls.n	1a003cf8 <Chip_I2CM_XferHandler+0xdc>
			cclr &= ~I2C_CON_AA;
1a003ca8:	2338      	movs	r3, #56	; 0x38
		if (xfer->rxSz == 0) {
1a003caa:	2a00      	cmp	r2, #0
1a003cac:	d1e8      	bne.n	1a003c80 <Chip_I2CM_XferHandler+0x64>
			xfer->status = I2CM_STATUS_OK;
1a003cae:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a003cb0:	f023 0310 	bic.w	r3, r3, #16
1a003cb4:	e7e4      	b.n	1a003c80 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003cb6:	2b50      	cmp	r3, #80	; 0x50
1a003cb8:	d015      	beq.n	1a003ce6 <Chip_I2CM_XferHandler+0xca>
		xfer->status = I2CM_STATUS_ERROR;
1a003cba:	2301      	movs	r3, #1
1a003cbc:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003cbe:	232c      	movs	r3, #44	; 0x2c
        break;
1a003cc0:	e7de      	b.n	1a003c80 <Chip_I2CM_XferHandler+0x64>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a003cc2:	784b      	ldrb	r3, [r1, #1]
1a003cc4:	f013 0f01 	tst.w	r3, #1
1a003cc8:	d1c1      	bne.n	1a003c4e <Chip_I2CM_XferHandler+0x32>
			xfer->status = I2CM_STATUS_NAK;
1a003cca:	2302      	movs	r3, #2
1a003ccc:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a003cce:	232c      	movs	r3, #44	; 0x2c
			break;
1a003cd0:	e7d6      	b.n	1a003c80 <Chip_I2CM_XferHandler+0x64>
			pI2C->DAT = *xfer->txBuff++;
1a003cd2:	688b      	ldr	r3, [r1, #8]
1a003cd4:	1c5a      	adds	r2, r3, #1
1a003cd6:	608a      	str	r2, [r1, #8]
1a003cd8:	781b      	ldrb	r3, [r3, #0]
1a003cda:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003cdc:	888b      	ldrh	r3, [r1, #4]
1a003cde:	3b01      	subs	r3, #1
1a003ce0:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a003ce2:	233c      	movs	r3, #60	; 0x3c
1a003ce4:	e7cc      	b.n	1a003c80 <Chip_I2CM_XferHandler+0x64>
		*xfer->rxBuff++ = pI2C->DAT;
1a003ce6:	6882      	ldr	r2, [r0, #8]
1a003ce8:	68cb      	ldr	r3, [r1, #12]
1a003cea:	1c5c      	adds	r4, r3, #1
1a003cec:	60cc      	str	r4, [r1, #12]
1a003cee:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a003cf0:	88cb      	ldrh	r3, [r1, #6]
1a003cf2:	3b01      	subs	r3, #1
1a003cf4:	80cb      	strh	r3, [r1, #6]
1a003cf6:	e7d4      	b.n	1a003ca2 <Chip_I2CM_XferHandler+0x86>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003cf8:	784b      	ldrb	r3, [r1, #1]
1a003cfa:	f013 0f02 	tst.w	r3, #2
1a003cfe:	d101      	bne.n	1a003d04 <Chip_I2CM_XferHandler+0xe8>
	uint32_t cclr = I2C_CON_FLAGS;
1a003d00:	233c      	movs	r3, #60	; 0x3c
1a003d02:	e7d2      	b.n	1a003caa <Chip_I2CM_XferHandler+0x8e>
			cclr &= ~I2C_CON_AA;
1a003d04:	2338      	movs	r3, #56	; 0x38
1a003d06:	e7d0      	b.n	1a003caa <Chip_I2CM_XferHandler+0x8e>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a003d08:	2304      	movs	r3, #4
1a003d0a:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003d0c:	232c      	movs	r3, #44	; 0x2c
		break;
1a003d0e:	e7b7      	b.n	1a003c80 <Chip_I2CM_XferHandler+0x64>
		xfer->status = I2CM_STATUS_ARBLOST;
1a003d10:	2305      	movs	r3, #5
1a003d12:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a003d14:	233c      	movs	r3, #60	; 0x3c
		break;
1a003d16:	e7b3      	b.n	1a003c80 <Chip_I2CM_XferHandler+0x64>
				cclr &= ~I2C_CON_STA;
1a003d18:	231c      	movs	r3, #28
1a003d1a:	e7b1      	b.n	1a003c80 <Chip_I2CM_XferHandler+0x64>

1a003d1c <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a003d1c:	23ff      	movs	r3, #255	; 0xff
1a003d1e:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a003d20:	232c      	movs	r3, #44	; 0x2c
1a003d22:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a003d24:	2360      	movs	r3, #96	; 0x60
1a003d26:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a003d28:	4770      	bx	lr

1a003d2a <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003d2a:	b538      	push	{r3, r4, r5, lr}
1a003d2c:	4604      	mov	r4, r0
1a003d2e:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a003d30:	f7ff fff4 	bl	1a003d1c <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a003d34:	2000      	movs	r0, #0

	while (ret == 0) {
1a003d36:	e003      	b.n	1a003d40 <Chip_I2CM_XferBlocking+0x16>
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a003d38:	4629      	mov	r1, r5
1a003d3a:	4620      	mov	r0, r4
1a003d3c:	f7ff ff6e 	bl	1a003c1c <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a003d40:	b920      	cbnz	r0, 1a003d4c <Chip_I2CM_XferBlocking+0x22>
	return pI2C->CONSET & I2C_CON_SI;
1a003d42:	6823      	ldr	r3, [r4, #0]
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a003d44:	f013 0f08 	tst.w	r3, #8
1a003d48:	d0fb      	beq.n	1a003d42 <Chip_I2CM_XferBlocking+0x18>
1a003d4a:	e7f5      	b.n	1a003d38 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a003d4c:	bd38      	pop	{r3, r4, r5, pc}

1a003d4e <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003d4e:	4770      	bx	lr

1a003d50 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003d50:	b570      	push	{r4, r5, r6, lr}
1a003d52:	b08a      	sub	sp, #40	; 0x28
1a003d54:	4605      	mov	r5, r0
1a003d56:	460e      	mov	r6, r1
1a003d58:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003d5a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003d5e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003d60:	2806      	cmp	r0, #6
1a003d62:	d018      	beq.n	1a003d96 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003d64:	2300      	movs	r3, #0
1a003d66:	2201      	movs	r2, #1
1a003d68:	4629      	mov	r1, r5
1a003d6a:	2004      	movs	r0, #4
1a003d6c:	f7ff fea8 	bl	1a003ac0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003d70:	4a4a      	ldr	r2, [pc, #296]	; (1a003e9c <Chip_SetupCoreClock+0x14c>)
1a003d72:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003d74:	f043 0301 	orr.w	r3, r3, #1
1a003d78:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003d7a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003d7e:	a901      	add	r1, sp, #4
1a003d80:	4630      	mov	r0, r6
1a003d82:	f7ff fe15 	bl	1a0039b0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003d86:	4b46      	ldr	r3, [pc, #280]	; (1a003ea0 <Chip_SetupCoreClock+0x150>)
1a003d88:	429e      	cmp	r6, r3
1a003d8a:	d916      	bls.n	1a003dba <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003d8c:	9b01      	ldr	r3, [sp, #4]
1a003d8e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003d92:	d003      	beq.n	1a003d9c <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a003d94:	e7fe      	b.n	1a003d94 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003d96:	f7ff fd6d 	bl	1a003874 <Chip_Clock_EnableCrystal>
1a003d9a:	e7e3      	b.n	1a003d64 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a003d9c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003da0:	d005      	beq.n	1a003dae <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003da6:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003da8:	2500      	movs	r5, #0
			direct = 1;
1a003daa:	2601      	movs	r6, #1
1a003dac:	e007      	b.n	1a003dbe <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003dae:	9b04      	ldr	r3, [sp, #16]
1a003db0:	3301      	adds	r3, #1
1a003db2:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003db4:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a003db6:	2600      	movs	r6, #0
1a003db8:	e001      	b.n	1a003dbe <Chip_SetupCoreClock+0x6e>
1a003dba:	2500      	movs	r5, #0
1a003dbc:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003dbe:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003dc2:	9b01      	ldr	r3, [sp, #4]
1a003dc4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003dc8:	9a05      	ldr	r2, [sp, #20]
1a003dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003dce:	9a03      	ldr	r2, [sp, #12]
1a003dd0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003dd4:	9a04      	ldr	r2, [sp, #16]
1a003dd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003dda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003dde:	4a2f      	ldr	r2, [pc, #188]	; (1a003e9c <Chip_SetupCoreClock+0x14c>)
1a003de0:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003de2:	4b2e      	ldr	r3, [pc, #184]	; (1a003e9c <Chip_SetupCoreClock+0x14c>)
1a003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003de6:	f013 0f01 	tst.w	r3, #1
1a003dea:	d0fa      	beq.n	1a003de2 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003dec:	2300      	movs	r3, #0
1a003dee:	2201      	movs	r2, #1
1a003df0:	2109      	movs	r1, #9
1a003df2:	2004      	movs	r0, #4
1a003df4:	f7ff fe64 	bl	1a003ac0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003df8:	b306      	cbz	r6, 1a003e3c <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003dfa:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003dfe:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003e02:	1e5a      	subs	r2, r3, #1
1a003e04:	9209      	str	r2, [sp, #36]	; 0x24
1a003e06:	2b00      	cmp	r3, #0
1a003e08:	d1fa      	bne.n	1a003e00 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003e0a:	9b01      	ldr	r3, [sp, #4]
1a003e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003e10:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003e12:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003e16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003e1a:	9a05      	ldr	r2, [sp, #20]
1a003e1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003e20:	9a03      	ldr	r2, [sp, #12]
1a003e22:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003e26:	9a04      	ldr	r2, [sp, #16]
1a003e28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003e2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003e30:	4a1a      	ldr	r2, [pc, #104]	; (1a003e9c <Chip_SetupCoreClock+0x14c>)
1a003e32:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003e34:	2c00      	cmp	r4, #0
1a003e36:	d12e      	bne.n	1a003e96 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003e38:	b00a      	add	sp, #40	; 0x28
1a003e3a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a003e3c:	2d00      	cmp	r5, #0
1a003e3e:	d0f9      	beq.n	1a003e34 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003e40:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003e44:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003e48:	1e5a      	subs	r2, r3, #1
1a003e4a:	9209      	str	r2, [sp, #36]	; 0x24
1a003e4c:	2b00      	cmp	r3, #0
1a003e4e:	d1fa      	bne.n	1a003e46 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a003e50:	9b04      	ldr	r3, [sp, #16]
1a003e52:	1e5a      	subs	r2, r3, #1
1a003e54:	9204      	str	r2, [sp, #16]
1a003e56:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003e5a:	9b01      	ldr	r3, [sp, #4]
1a003e5c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003e60:	9905      	ldr	r1, [sp, #20]
1a003e62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003e66:	9903      	ldr	r1, [sp, #12]
1a003e68:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003e6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003e70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003e74:	4a09      	ldr	r2, [pc, #36]	; (1a003e9c <Chip_SetupCoreClock+0x14c>)
1a003e76:	6453      	str	r3, [r2, #68]	; 0x44
1a003e78:	e7dc      	b.n	1a003e34 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003e7a:	480a      	ldr	r0, [pc, #40]	; (1a003ea4 <Chip_SetupCoreClock+0x154>)
1a003e7c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003e80:	78cb      	ldrb	r3, [r1, #3]
1a003e82:	788a      	ldrb	r2, [r1, #2]
1a003e84:	7849      	ldrb	r1, [r1, #1]
1a003e86:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003e8a:	f7ff fe19 	bl	1a003ac0 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003e8e:	3401      	adds	r4, #1
1a003e90:	2c11      	cmp	r4, #17
1a003e92:	d9f2      	bls.n	1a003e7a <Chip_SetupCoreClock+0x12a>
1a003e94:	e7d0      	b.n	1a003e38 <Chip_SetupCoreClock+0xe8>
1a003e96:	2400      	movs	r4, #0
1a003e98:	e7fa      	b.n	1a003e90 <Chip_SetupCoreClock+0x140>
1a003e9a:	bf00      	nop
1a003e9c:	40050000 	.word	0x40050000
1a003ea0:	068e7780 	.word	0x068e7780
1a003ea4:	1a006aa4 	.word	0x1a006aa4

1a003ea8 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003ea8:	2901      	cmp	r1, #1
1a003eaa:	d109      	bne.n	1a003ec0 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a003eac:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003eb0:	0082      	lsls	r2, r0, #2
1a003eb2:	4b04      	ldr	r3, [pc, #16]	; (1a003ec4 <Chip_I2C_EventHandler+0x1c>)
1a003eb4:	4413      	add	r3, r2
1a003eb6:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a003eb8:	7d13      	ldrb	r3, [r2, #20]
1a003eba:	b2db      	uxtb	r3, r3
1a003ebc:	2b04      	cmp	r3, #4
1a003ebe:	d0fb      	beq.n	1a003eb8 <Chip_I2C_EventHandler+0x10>
}
1a003ec0:	4770      	bx	lr
1a003ec2:	bf00      	nop
1a003ec4:	10000008 	.word	0x10000008

1a003ec8 <handleMasterXferState>:
{
1a003ec8:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a003eca:	6843      	ldr	r3, [r0, #4]
1a003ecc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a003ed0:	2b58      	cmp	r3, #88	; 0x58
1a003ed2:	d87f      	bhi.n	1a003fd4 <handleMasterXferState+0x10c>
1a003ed4:	e8df f003 	tbb	[pc, r3]
1a003ed8:	7e7e7e7a 	.word	0x7e7e7e7a
1a003edc:	7e7e7e7e 	.word	0x7e7e7e7e
1a003ee0:	7e7e7e2f 	.word	0x7e7e7e2f
1a003ee4:	7e7e7e7e 	.word	0x7e7e7e7e
1a003ee8:	7e7e7e2f 	.word	0x7e7e7e2f
1a003eec:	7e7e7e7e 	.word	0x7e7e7e7e
1a003ef0:	7e7e7e39 	.word	0x7e7e7e39
1a003ef4:	7e7e7e7e 	.word	0x7e7e7e7e
1a003ef8:	7e7e7e6e 	.word	0x7e7e7e6e
1a003efc:	7e7e7e7e 	.word	0x7e7e7e7e
1a003f00:	7e7e7e39 	.word	0x7e7e7e39
1a003f04:	7e7e7e7e 	.word	0x7e7e7e7e
1a003f08:	7e7e7e72 	.word	0x7e7e7e72
1a003f0c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003f10:	7e7e7e76 	.word	0x7e7e7e76
1a003f14:	7e7e7e7e 	.word	0x7e7e7e7e
1a003f18:	7e7e7e6c 	.word	0x7e7e7e6c
1a003f1c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003f20:	7e7e7e6e 	.word	0x7e7e7e6e
1a003f24:	7e7e7e7e 	.word	0x7e7e7e7e
1a003f28:	7e7e7e2d 	.word	0x7e7e7e2d
1a003f2c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003f30:	4f          	.byte	0x4f
1a003f31:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a003f32:	233c      	movs	r3, #60	; 0x3c
1a003f34:	e020      	b.n	1a003f78 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a003f36:	780a      	ldrb	r2, [r1, #0]
1a003f38:	688b      	ldr	r3, [r1, #8]
1a003f3a:	fab3 f383 	clz	r3, r3
1a003f3e:	095b      	lsrs	r3, r3, #5
1a003f40:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a003f44:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003f46:	233c      	movs	r3, #60	; 0x3c
		break;
1a003f48:	e023      	b.n	1a003f92 <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a003f4a:	688b      	ldr	r3, [r1, #8]
1a003f4c:	b94b      	cbnz	r3, 1a003f62 <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a003f4e:	690b      	ldr	r3, [r1, #16]
1a003f50:	b123      	cbz	r3, 1a003f5c <handleMasterXferState+0x94>
1a003f52:	f06f 0320 	mvn.w	r3, #32
1a003f56:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a003f5a:	e01a      	b.n	1a003f92 <handleMasterXferState+0xca>
1a003f5c:	f06f 0310 	mvn.w	r3, #16
1a003f60:	e7f9      	b.n	1a003f56 <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a003f62:	684b      	ldr	r3, [r1, #4]
1a003f64:	1c5a      	adds	r2, r3, #1
1a003f66:	604a      	str	r2, [r1, #4]
1a003f68:	781b      	ldrb	r3, [r3, #0]
1a003f6a:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003f6c:	688b      	ldr	r3, [r1, #8]
1a003f6e:	3b01      	subs	r3, #1
1a003f70:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003f72:	233c      	movs	r3, #60	; 0x3c
1a003f74:	e00d      	b.n	1a003f92 <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a003f76:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a003f78:	6884      	ldr	r4, [r0, #8]
1a003f7a:	68ca      	ldr	r2, [r1, #12]
1a003f7c:	1c55      	adds	r5, r2, #1
1a003f7e:	60cd      	str	r5, [r1, #12]
1a003f80:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a003f82:	690a      	ldr	r2, [r1, #16]
1a003f84:	3a01      	subs	r2, #1
1a003f86:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a003f88:	690a      	ldr	r2, [r1, #16]
1a003f8a:	2a01      	cmp	r2, #1
1a003f8c:	dd01      	ble.n	1a003f92 <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a003f8e:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a003f92:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a003f96:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a003f98:	f023 0210 	bic.w	r2, r3, #16
1a003f9c:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a003f9e:	f013 0f10 	tst.w	r3, #16
1a003fa2:	d019      	beq.n	1a003fd8 <handleMasterXferState+0x110>
1a003fa4:	7d0b      	ldrb	r3, [r1, #20]
1a003fa6:	2b02      	cmp	r3, #2
1a003fa8:	d016      	beq.n	1a003fd8 <handleMasterXferState+0x110>
	return 1;
1a003faa:	2001      	movs	r0, #1
}
1a003fac:	bc30      	pop	{r4, r5}
1a003fae:	4770      	bx	lr
	uint32_t cclr = I2C_CON_FLAGS;
1a003fb0:	233c      	movs	r3, #60	; 0x3c
1a003fb2:	e7e9      	b.n	1a003f88 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a003fb4:	2305      	movs	r3, #5
1a003fb6:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003fb8:	232c      	movs	r3, #44	; 0x2c
		break;
1a003fba:	e7ea      	b.n	1a003f92 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a003fbc:	2301      	movs	r3, #1
1a003fbe:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003fc0:	232c      	movs	r3, #44	; 0x2c
		break;
1a003fc2:	e7e6      	b.n	1a003f92 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a003fc4:	2302      	movs	r3, #2
1a003fc6:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a003fc8:	233c      	movs	r3, #60	; 0x3c
		break;
1a003fca:	e7e2      	b.n	1a003f92 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a003fcc:	2303      	movs	r3, #3
1a003fce:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003fd0:	232c      	movs	r3, #44	; 0x2c
1a003fd2:	e7de      	b.n	1a003f92 <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a003fd4:	233c      	movs	r3, #60	; 0x3c
1a003fd6:	e7dc      	b.n	1a003f92 <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a003fd8:	7d0b      	ldrb	r3, [r1, #20]
1a003fda:	2b04      	cmp	r3, #4
1a003fdc:	d001      	beq.n	1a003fe2 <handleMasterXferState+0x11a>
		return 0;
1a003fde:	2000      	movs	r0, #0
1a003fe0:	e7e4      	b.n	1a003fac <handleMasterXferState+0xe4>
			xfer->status = I2C_STATUS_DONE;
1a003fe2:	2300      	movs	r3, #0
1a003fe4:	750b      	strb	r3, [r1, #20]
1a003fe6:	e7fa      	b.n	1a003fde <handleMasterXferState+0x116>

1a003fe8 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003fe8:	b570      	push	{r4, r5, r6, lr}
1a003fea:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003fec:	4e06      	ldr	r6, [pc, #24]	; (1a004008 <Chip_I2C_Init+0x20>)
1a003fee:	00c4      	lsls	r4, r0, #3
1a003ff0:	1a22      	subs	r2, r4, r0
1a003ff2:	0093      	lsls	r3, r2, #2
1a003ff4:	4433      	add	r3, r6
1a003ff6:	8898      	ldrh	r0, [r3, #4]
1a003ff8:	f7ff fdc6 	bl	1a003b88 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003ffc:	1b64      	subs	r4, r4, r5
1a003ffe:	00a3      	lsls	r3, r4, #2
1a004000:	58f3      	ldr	r3, [r6, r3]
1a004002:	226c      	movs	r2, #108	; 0x6c
1a004004:	619a      	str	r2, [r3, #24]
}
1a004006:	bd70      	pop	{r4, r5, r6, pc}
1a004008:	10000008 	.word	0x10000008

1a00400c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a00400c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004010:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a004012:	4e0b      	ldr	r6, [pc, #44]	; (1a004040 <Chip_I2C_SetClockRate+0x34>)
1a004014:	00c5      	lsls	r5, r0, #3
1a004016:	1a2b      	subs	r3, r5, r0
1a004018:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a00401c:	eb06 0308 	add.w	r3, r6, r8
1a004020:	8898      	ldrh	r0, [r3, #4]
1a004022:	f7ff fdcb 	bl	1a003bbc <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a004026:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a00402a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00402e:	0842      	lsrs	r2, r0, #1
1a004030:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a004032:	f856 3008 	ldr.w	r3, [r6, r8]
1a004036:	691a      	ldr	r2, [r3, #16]
1a004038:	1a80      	subs	r0, r0, r2
1a00403a:	6158      	str	r0, [r3, #20]
}
1a00403c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004040:	10000008 	.word	0x10000008

1a004044 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a004044:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a004048:	009a      	lsls	r2, r3, #2
1a00404a:	4b09      	ldr	r3, [pc, #36]	; (1a004070 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a00404c:	4413      	add	r3, r2
1a00404e:	691b      	ldr	r3, [r3, #16]
1a004050:	b153      	cbz	r3, 1a004068 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a004052:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a004056:	0082      	lsls	r2, r0, #2
1a004058:	4b05      	ldr	r3, [pc, #20]	; (1a004070 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a00405a:	4413      	add	r3, r2
1a00405c:	6898      	ldr	r0, [r3, #8]
}
1a00405e:	4288      	cmp	r0, r1
1a004060:	bf14      	ite	ne
1a004062:	2000      	movne	r0, #0
1a004064:	2001      	moveq	r0, #1
1a004066:	4770      	bx	lr
		iic->mEvent = event;
1a004068:	4b01      	ldr	r3, [pc, #4]	; (1a004070 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a00406a:	4413      	add	r3, r2
1a00406c:	6099      	str	r1, [r3, #8]
1a00406e:	e7f0      	b.n	1a004052 <Chip_I2C_SetMasterEventHandler+0xe>
1a004070:	10000008 	.word	0x10000008

1a004074 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a004074:	b510      	push	{r4, lr}
1a004076:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a004078:	4809      	ldr	r0, [pc, #36]	; (1a0040a0 <Chip_I2C_MasterStateHandler+0x2c>)
1a00407a:	00e3      	lsls	r3, r4, #3
1a00407c:	1b1b      	subs	r3, r3, r4
1a00407e:	009a      	lsls	r2, r3, #2
1a004080:	1883      	adds	r3, r0, r2
1a004082:	6919      	ldr	r1, [r3, #16]
1a004084:	5880      	ldr	r0, [r0, r2]
1a004086:	f7ff ff1f 	bl	1a003ec8 <handleMasterXferState>
1a00408a:	b940      	cbnz	r0, 1a00409e <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a00408c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a004090:	009a      	lsls	r2, r3, #2
1a004092:	4b03      	ldr	r3, [pc, #12]	; (1a0040a0 <Chip_I2C_MasterStateHandler+0x2c>)
1a004094:	4413      	add	r3, r2
1a004096:	689b      	ldr	r3, [r3, #8]
1a004098:	2102      	movs	r1, #2
1a00409a:	4620      	mov	r0, r4
1a00409c:	4798      	blx	r3
	}
}
1a00409e:	bd10      	pop	{r4, pc}
1a0040a0:	10000008 	.word	0x10000008

1a0040a4 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a0040a4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0040a8:	0083      	lsls	r3, r0, #2
1a0040aa:	4a03      	ldr	r2, [pc, #12]	; (1a0040b8 <Chip_I2C_IsStateChanged+0x14>)
1a0040ac:	58d3      	ldr	r3, [r2, r3]
1a0040ae:	6818      	ldr	r0, [r3, #0]
}
1a0040b0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a0040b4:	4770      	bx	lr
1a0040b6:	bf00      	nop
1a0040b8:	10000008 	.word	0x10000008

1a0040bc <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a0040bc:	2901      	cmp	r1, #1
1a0040be:	d115      	bne.n	1a0040ec <Chip_I2C_EventHandlerPolling+0x30>
{
1a0040c0:	b538      	push	{r3, r4, r5, lr}
1a0040c2:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a0040c4:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0040c8:	009a      	lsls	r2, r3, #2
1a0040ca:	4b09      	ldr	r3, [pc, #36]	; (1a0040f0 <Chip_I2C_EventHandlerPolling+0x34>)
1a0040cc:	4413      	add	r3, r2
1a0040ce:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a0040d0:	7d2b      	ldrb	r3, [r5, #20]
1a0040d2:	b2db      	uxtb	r3, r3
1a0040d4:	2b04      	cmp	r3, #4
1a0040d6:	d108      	bne.n	1a0040ea <Chip_I2C_EventHandlerPolling+0x2e>
		if (Chip_I2C_IsStateChanged(id)) {
1a0040d8:	4620      	mov	r0, r4
1a0040da:	f7ff ffe3 	bl	1a0040a4 <Chip_I2C_IsStateChanged>
1a0040de:	2800      	cmp	r0, #0
1a0040e0:	d0f6      	beq.n	1a0040d0 <Chip_I2C_EventHandlerPolling+0x14>
			Chip_I2C_MasterStateHandler(id);
1a0040e2:	4620      	mov	r0, r4
1a0040e4:	f7ff ffc6 	bl	1a004074 <Chip_I2C_MasterStateHandler>
1a0040e8:	e7f2      	b.n	1a0040d0 <Chip_I2C_EventHandlerPolling+0x14>
}
1a0040ea:	bd38      	pop	{r3, r4, r5, pc}
1a0040ec:	4770      	bx	lr
1a0040ee:	bf00      	nop
1a0040f0:	10000008 	.word	0x10000008

1a0040f4 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0040f4:	4b03      	ldr	r3, [pc, #12]	; (1a004104 <Chip_SSP_GetClockIndex+0x10>)
1a0040f6:	4298      	cmp	r0, r3
1a0040f8:	d001      	beq.n	1a0040fe <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0040fa:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0040fc:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0040fe:	20a5      	movs	r0, #165	; 0xa5
1a004100:	4770      	bx	lr
1a004102:	bf00      	nop
1a004104:	400c5000 	.word	0x400c5000

1a004108 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004108:	4b04      	ldr	r3, [pc, #16]	; (1a00411c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00410a:	4298      	cmp	r0, r3
1a00410c:	d002      	beq.n	1a004114 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00410e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a004112:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a004114:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a004118:	4770      	bx	lr
1a00411a:	bf00      	nop
1a00411c:	400c5000 	.word	0x400c5000

1a004120 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a004120:	6803      	ldr	r3, [r0, #0]
1a004122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a004126:	0209      	lsls	r1, r1, #8
1a004128:	b289      	uxth	r1, r1
1a00412a:	4319      	orrs	r1, r3
1a00412c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00412e:	6102      	str	r2, [r0, #16]
}
1a004130:	4770      	bx	lr

1a004132 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a004132:	b570      	push	{r4, r5, r6, lr}
1a004134:	4606      	mov	r6, r0
1a004136:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a004138:	f7ff ffe6 	bl	1a004108 <Chip_SSP_GetPeriphClockIndex>
1a00413c:	f7ff fd3e 	bl	1a003bbc <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a004140:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a004142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a004146:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a004148:	e000      	b.n	1a00414c <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00414a:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a00414c:	42ab      	cmp	r3, r5
1a00414e:	d90b      	bls.n	1a004168 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a004150:	1c4c      	adds	r4, r1, #1
1a004152:	fb02 f304 	mul.w	r3, r2, r4
1a004156:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00415a:	429d      	cmp	r5, r3
1a00415c:	d2f6      	bcs.n	1a00414c <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00415e:	2cff      	cmp	r4, #255	; 0xff
1a004160:	d9f3      	bls.n	1a00414a <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a004162:	3202      	adds	r2, #2
				cr0_div = 0;
1a004164:	2100      	movs	r1, #0
1a004166:	e7f1      	b.n	1a00414c <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a004168:	4630      	mov	r0, r6
1a00416a:	f7ff ffd9 	bl	1a004120 <Chip_SSP_SetClockRate>
}
1a00416e:	bd70      	pop	{r4, r5, r6, pc}

1a004170 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a004170:	b510      	push	{r4, lr}
1a004172:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a004174:	f7ff ffbe 	bl	1a0040f4 <Chip_SSP_GetClockIndex>
1a004178:	f7ff fd06 	bl	1a003b88 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00417c:	4620      	mov	r0, r4
1a00417e:	f7ff ffc3 	bl	1a004108 <Chip_SSP_GetPeriphClockIndex>
1a004182:	f7ff fd01 	bl	1a003b88 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a004186:	6863      	ldr	r3, [r4, #4]
1a004188:	f023 0304 	bic.w	r3, r3, #4
1a00418c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00418e:	6823      	ldr	r3, [r4, #0]
1a004190:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a004194:	f043 0307 	orr.w	r3, r3, #7
1a004198:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00419a:	4902      	ldr	r1, [pc, #8]	; (1a0041a4 <Chip_SSP_Init+0x34>)
1a00419c:	4620      	mov	r0, r4
1a00419e:	f7ff ffc8 	bl	1a004132 <Chip_SSP_SetBitRate>
}
1a0041a2:	bd10      	pop	{r4, pc}
1a0041a4:	000186a0 	.word	0x000186a0

1a0041a8 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0041a8:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0041aa:	4a0b      	ldr	r2, [pc, #44]	; (1a0041d8 <SystemInit+0x30>)
1a0041ac:	4b0b      	ldr	r3, [pc, #44]	; (1a0041dc <SystemInit+0x34>)
1a0041ae:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0041b0:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0041b4:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0041b6:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0041ba:	2b20      	cmp	r3, #32
1a0041bc:	d004      	beq.n	1a0041c8 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0041be:	f7ff f925 	bl	1a00340c <Board_SystemInit>
   Board_Init();
1a0041c2:	f7ff f8ab 	bl	1a00331c <Board_Init>
}
1a0041c6:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0041c8:	4a04      	ldr	r2, [pc, #16]	; (1a0041dc <SystemInit+0x34>)
1a0041ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0041ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0041d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0041d6:	e7f2      	b.n	1a0041be <SystemInit+0x16>
1a0041d8:	1a000000 	.word	0x1a000000
1a0041dc:	e000ed00 	.word	0xe000ed00

1a0041e0 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0041e0:	4b04      	ldr	r3, [pc, #16]	; (1a0041f4 <cyclesCounterInit+0x14>)
1a0041e2:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0041e4:	4a04      	ldr	r2, [pc, #16]	; (1a0041f8 <cyclesCounterInit+0x18>)
1a0041e6:	6813      	ldr	r3, [r2, #0]
1a0041e8:	f043 0301 	orr.w	r3, r3, #1
1a0041ec:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0041ee:	2001      	movs	r0, #1
1a0041f0:	4770      	bx	lr
1a0041f2:	bf00      	nop
1a0041f4:	10000040 	.word	0x10000040
1a0041f8:	e0001000 	.word	0xe0001000

1a0041fc <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0041fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004200:	0083      	lsls	r3, r0, #2
1a004202:	4a03      	ldr	r2, [pc, #12]	; (1a004210 <uartTxReady+0x14>)
1a004204:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a004206:	6958      	ldr	r0, [r3, #20]
}
1a004208:	f000 0020 	and.w	r0, r0, #32
1a00420c:	4770      	bx	lr
1a00420e:	bf00      	nop
1a004210:	1a006aec 	.word	0x1a006aec

1a004214 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a004214:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004218:	0083      	lsls	r3, r0, #2
1a00421a:	4a02      	ldr	r2, [pc, #8]	; (1a004224 <uartTxWrite+0x10>)
1a00421c:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a00421e:	6019      	str	r1, [r3, #0]
}
1a004220:	4770      	bx	lr
1a004222:	bf00      	nop
1a004224:	1a006aec 	.word	0x1a006aec

1a004228 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a004228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00422c:	4680      	mov	r8, r0
1a00422e:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a004230:	4c19      	ldr	r4, [pc, #100]	; (1a004298 <uartInit+0x70>)
1a004232:	0045      	lsls	r5, r0, #1
1a004234:	182a      	adds	r2, r5, r0
1a004236:	0093      	lsls	r3, r2, #2
1a004238:	18e6      	adds	r6, r4, r3
1a00423a:	58e7      	ldr	r7, [r4, r3]
1a00423c:	4638      	mov	r0, r7
1a00423e:	f7ff f901 	bl	1a003444 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a004242:	4649      	mov	r1, r9
1a004244:	4638      	mov	r0, r7
1a004246:	f7ff f927 	bl	1a003498 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a00424a:	2307      	movs	r3, #7
1a00424c:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00424e:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a004250:	2301      	movs	r3, #1
1a004252:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a004254:	7930      	ldrb	r0, [r6, #4]
1a004256:	7973      	ldrb	r3, [r6, #5]
1a004258:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00425a:	f042 0218 	orr.w	r2, r2, #24
1a00425e:	490f      	ldr	r1, [pc, #60]	; (1a00429c <uartInit+0x74>)
1a004260:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a004268:	79f0      	ldrb	r0, [r6, #7]
1a00426a:	7a33      	ldrb	r3, [r6, #8]
1a00426c:	7a72      	ldrb	r2, [r6, #9]
1a00426e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004272:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a00427a:	f1b8 0f01 	cmp.w	r8, #1
1a00427e:	d001      	beq.n	1a004284 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a004280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a004284:	4a06      	ldr	r2, [pc, #24]	; (1a0042a0 <uartInit+0x78>)
1a004286:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a004288:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00428c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00428e:	221a      	movs	r2, #26
1a004290:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a004294:	e7f4      	b.n	1a004280 <uartInit+0x58>
1a004296:	bf00      	nop
1a004298:	1a006aec 	.word	0x1a006aec
1a00429c:	40086000 	.word	0x40086000
1a0042a0:	40081000 	.word	0x40081000

1a0042a4 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a0042a4:	b538      	push	{r3, r4, r5, lr}
1a0042a6:	4604      	mov	r4, r0
1a0042a8:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a0042aa:	4620      	mov	r0, r4
1a0042ac:	f7ff ffa6 	bl	1a0041fc <uartTxReady>
1a0042b0:	2800      	cmp	r0, #0
1a0042b2:	d0fa      	beq.n	1a0042aa <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a0042b4:	4629      	mov	r1, r5
1a0042b6:	4620      	mov	r0, r4
1a0042b8:	f7ff ffac 	bl	1a004214 <uartTxWrite>
}
1a0042bc:	bd38      	pop	{r3, r4, r5, pc}

1a0042be <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a0042be:	b538      	push	{r3, r4, r5, lr}
1a0042c0:	4605      	mov	r5, r0
1a0042c2:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a0042c4:	7821      	ldrb	r1, [r4, #0]
1a0042c6:	b121      	cbz	r1, 1a0042d2 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a0042c8:	4628      	mov	r0, r5
1a0042ca:	f7ff ffeb 	bl	1a0042a4 <uartWriteByte>
      str++;
1a0042ce:	3401      	adds	r4, #1
1a0042d0:	e7f8      	b.n	1a0042c4 <uartWriteString+0x6>
   }
}
1a0042d2:	bd38      	pop	{r3, r4, r5, pc}

1a0042d4 <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a0042d4:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
1a0042d6:	f7fe f849 	bl	1a00236c <xTaskGetTickCount>
   #else
      return tickCounter;
   #endif
}
1a0042da:	2100      	movs	r1, #0
1a0042dc:	bd08      	pop	{r3, pc}
1a0042de:	Address 0x000000001a0042de is out of bounds.


1a0042e0 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a0042e0:	b538      	push	{r3, r4, r5, lr}
1a0042e2:	4604      	mov	r4, r0
1a0042e4:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0042e6:	4b08      	ldr	r3, [pc, #32]	; (1a004308 <i2cHardwareInit+0x28>)
1a0042e8:	f640 0208 	movw	r2, #2056	; 0x808
1a0042ec:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE ); // Equal for CIAA-NXP and EDU-CIAA-NXP on I2C0

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a0042f0:	f7ff fe7a 	bl	1a003fe8 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a0042f4:	4629      	mov	r1, r5
1a0042f6:	4620      	mov	r0, r4
1a0042f8:	f7ff fe88 	bl	1a00400c <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a0042fc:	4903      	ldr	r1, [pc, #12]	; (1a00430c <i2cHardwareInit+0x2c>)
1a0042fe:	4620      	mov	r0, r4
1a004300:	f7ff fea0 	bl	1a004044 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a004304:	2001      	movs	r0, #1
1a004306:	bd38      	pop	{r3, r4, r5, pc}
1a004308:	40086000 	.word	0x40086000
1a00430c:	1a0040bd 	.word	0x1a0040bd

1a004310 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a004310:	b500      	push	{lr}
1a004312:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a004314:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a004318:	2100      	movs	r1, #0
1a00431a:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a00431e:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a004322:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a004324:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a004328:	9b07      	ldr	r3, [sp, #28]
1a00432a:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a00432c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a004330:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a004334:	4669      	mov	r1, sp
1a004336:	4805      	ldr	r0, [pc, #20]	; (1a00434c <i2cHardwareRead+0x3c>)
1a004338:	f7ff fcf7 	bl	1a003d2a <Chip_I2CM_XferBlocking>
1a00433c:	b118      	cbz	r0, 1a004346 <i2cHardwareRead+0x36>
      return FALSE;
   }

   return TRUE;
1a00433e:	2001      	movs	r0, #1
}
1a004340:	b005      	add	sp, #20
1a004342:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a004346:	2000      	movs	r0, #0
1a004348:	e7fa      	b.n	1a004340 <i2cHardwareRead+0x30>
1a00434a:	bf00      	nop
1a00434c:	400a1000 	.word	0x400a1000

1a004350 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a004350:	b108      	cbz	r0, 1a004356 <i2cHardwareWrite+0x6>
      return FALSE;
1a004352:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a004354:	4770      	bx	lr
{
1a004356:	b500      	push	{lr}
1a004358:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a00435a:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a00435e:	2100      	movs	r1, #0
1a004360:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a004364:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a004368:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a00436a:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a00436e:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a004370:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a004374:	4669      	mov	r1, sp
1a004376:	4805      	ldr	r0, [pc, #20]	; (1a00438c <i2cHardwareWrite+0x3c>)
1a004378:	f7ff fcd7 	bl	1a003d2a <Chip_I2CM_XferBlocking>
1a00437c:	b118      	cbz	r0, 1a004386 <i2cHardwareWrite+0x36>
   return TRUE;
1a00437e:	2001      	movs	r0, #1
}
1a004380:	b005      	add	sp, #20
1a004382:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a004386:	2000      	movs	r0, #0
1a004388:	e7fa      	b.n	1a004380 <i2cHardwareWrite+0x30>
1a00438a:	bf00      	nop
1a00438c:	400a1000 	.word	0x400a1000

1a004390 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a004390:	b108      	cbz	r0, 1a004396 <i2cInit+0x6>
      return FALSE;
1a004392:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a004394:	4770      	bx	lr
{
1a004396:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a004398:	f7ff ffa2 	bl	1a0042e0 <i2cHardwareInit>
}
1a00439c:	bd08      	pop	{r3, pc}

1a00439e <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a00439e:	b108      	cbz	r0, 1a0043a4 <i2cRead+0x6>
      return FALSE;
1a0043a0:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a0043a2:	4770      	bx	lr
{
1a0043a4:	b510      	push	{r4, lr}
1a0043a6:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a0043a8:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a0043ac:	9403      	str	r4, [sp, #12]
1a0043ae:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a0043b2:	9402      	str	r4, [sp, #8]
1a0043b4:	9c07      	ldr	r4, [sp, #28]
1a0043b6:	9401      	str	r4, [sp, #4]
1a0043b8:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a0043bc:	9400      	str	r4, [sp, #0]
1a0043be:	f7ff ffa7 	bl	1a004310 <i2cHardwareRead>
}
1a0043c2:	b004      	add	sp, #16
1a0043c4:	bd10      	pop	{r4, pc}

1a0043c6 <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0043c6:	b108      	cbz	r0, 1a0043cc <i2cWrite+0x6>
      return FALSE;
1a0043c8:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a0043ca:	4770      	bx	lr
{
1a0043cc:	b510      	push	{r4, lr}
1a0043ce:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a0043d0:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a0043d4:	9400      	str	r4, [sp, #0]
1a0043d6:	f7ff ffbb 	bl	1a004350 <i2cHardwareWrite>
}
1a0043da:	b002      	add	sp, #8
1a0043dc:	bd10      	pop	{r4, pc}
1a0043de:	Address 0x000000001a0043de is out of bounds.


1a0043e0 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0043e0:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0043e2:	4d0b      	ldr	r5, [pc, #44]	; (1a004410 <gpioObtainPinInit+0x30>)
1a0043e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0043e8:	182c      	adds	r4, r5, r0
1a0043ea:	5628      	ldrsb	r0, [r5, r0]
1a0043ec:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0043ee:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0043f2:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0043f4:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0043f8:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0043fa:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0043fe:	9b02      	ldr	r3, [sp, #8]
1a004400:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a004402:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a004406:	9b03      	ldr	r3, [sp, #12]
1a004408:	701a      	strb	r2, [r3, #0]
}
1a00440a:	bc30      	pop	{r4, r5}
1a00440c:	4770      	bx	lr
1a00440e:	bf00      	nop
1a004410:	1a006b34 	.word	0x1a006b34

1a004414 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a004414:	f110 0f02 	cmn.w	r0, #2
1a004418:	f000 80c7 	beq.w	1a0045aa <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a00441c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004420:	f000 80c5 	beq.w	1a0045ae <gpioInit+0x19a>
{
1a004424:	b570      	push	{r4, r5, r6, lr}
1a004426:	b084      	sub	sp, #16
1a004428:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00442a:	2300      	movs	r3, #0
1a00442c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004430:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004434:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004438:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00443c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004440:	f10d 030b 	add.w	r3, sp, #11
1a004444:	9301      	str	r3, [sp, #4]
1a004446:	ab03      	add	r3, sp, #12
1a004448:	9300      	str	r3, [sp, #0]
1a00444a:	f10d 030d 	add.w	r3, sp, #13
1a00444e:	f10d 020e 	add.w	r2, sp, #14
1a004452:	f10d 010f 	add.w	r1, sp, #15
1a004456:	f7ff ffc3 	bl	1a0043e0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00445a:	2c05      	cmp	r4, #5
1a00445c:	f200 80a9 	bhi.w	1a0045b2 <gpioInit+0x19e>
1a004460:	e8df f004 	tbb	[pc, r4]
1a004464:	45278109 	.word	0x45278109
1a004468:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00446a:	4853      	ldr	r0, [pc, #332]	; (1a0045b8 <gpioInit+0x1a4>)
1a00446c:	f7ff fc6f 	bl	1a003d4e <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a004470:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a004472:	b004      	add	sp, #16
1a004474:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a004476:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00447a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00447e:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a004482:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004486:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00448a:	494c      	ldr	r1, [pc, #304]	; (1a0045bc <gpioInit+0x1a8>)
1a00448c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004490:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004494:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004498:	2001      	movs	r0, #1
1a00449a:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00449e:	4c46      	ldr	r4, [pc, #280]	; (1a0045b8 <gpioInit+0x1a4>)
1a0044a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0044a4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0044a8:	ea22 0201 	bic.w	r2, r2, r1
1a0044ac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0044b0:	e7df      	b.n	1a004472 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0044b2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0044b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0044ba:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0044be:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0044c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0044c6:	493d      	ldr	r1, [pc, #244]	; (1a0045bc <gpioInit+0x1a8>)
1a0044c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0044cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0044d0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0044d4:	2001      	movs	r0, #1
1a0044d6:	fa00 f102 	lsl.w	r1, r0, r2
1a0044da:	4c37      	ldr	r4, [pc, #220]	; (1a0045b8 <gpioInit+0x1a4>)
1a0044dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0044e0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0044e4:	ea22 0201 	bic.w	r2, r2, r1
1a0044e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0044ec:	e7c1      	b.n	1a004472 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0044ee:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0044f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0044f6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0044fa:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0044fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004502:	492e      	ldr	r1, [pc, #184]	; (1a0045bc <gpioInit+0x1a8>)
1a004504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004508:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00450c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004510:	2001      	movs	r0, #1
1a004512:	fa00 f102 	lsl.w	r1, r0, r2
1a004516:	4c28      	ldr	r4, [pc, #160]	; (1a0045b8 <gpioInit+0x1a4>)
1a004518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00451c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004520:	ea22 0201 	bic.w	r2, r2, r1
1a004524:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004528:	e7a3      	b.n	1a004472 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00452a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00452e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004532:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004536:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00453a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00453e:	491f      	ldr	r1, [pc, #124]	; (1a0045bc <gpioInit+0x1a8>)
1a004540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004544:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004548:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00454c:	2001      	movs	r0, #1
1a00454e:	fa00 f102 	lsl.w	r1, r0, r2
1a004552:	4c19      	ldr	r4, [pc, #100]	; (1a0045b8 <gpioInit+0x1a4>)
1a004554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004558:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00455c:	ea22 0201 	bic.w	r2, r2, r1
1a004560:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004564:	e785      	b.n	1a004472 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004566:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00456a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00456e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004572:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004576:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00457a:	4910      	ldr	r1, [pc, #64]	; (1a0045bc <gpioInit+0x1a8>)
1a00457c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a004580:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a004584:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004588:	2001      	movs	r0, #1
1a00458a:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00458e:	4b0a      	ldr	r3, [pc, #40]	; (1a0045b8 <gpioInit+0x1a4>)
1a004590:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a004594:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a004598:	4331      	orrs	r1, r6
1a00459a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00459e:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0045a0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0045a4:	2100      	movs	r1, #0
1a0045a6:	5499      	strb	r1, [r3, r2]
1a0045a8:	e763      	b.n	1a004472 <gpioInit+0x5e>
	  return FALSE;
1a0045aa:	2000      	movs	r0, #0
1a0045ac:	4770      	bx	lr
	  return FALSE;
1a0045ae:	2000      	movs	r0, #0
}
1a0045b0:	4770      	bx	lr
      ret_val = 0;
1a0045b2:	2000      	movs	r0, #0
1a0045b4:	e75d      	b.n	1a004472 <gpioInit+0x5e>
1a0045b6:	bf00      	nop
1a0045b8:	400f4000 	.word	0x400f4000
1a0045bc:	40086000 	.word	0x40086000

1a0045c0 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0045c0:	f110 0f02 	cmn.w	r0, #2
1a0045c4:	d02d      	beq.n	1a004622 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0045c6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0045ca:	d02c      	beq.n	1a004626 <gpioWrite+0x66>
{
1a0045cc:	b510      	push	{r4, lr}
1a0045ce:	b084      	sub	sp, #16
1a0045d0:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0045d2:	2300      	movs	r3, #0
1a0045d4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0045d8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0045dc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0045e0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0045e4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0045e8:	f10d 030b 	add.w	r3, sp, #11
1a0045ec:	9301      	str	r3, [sp, #4]
1a0045ee:	ab03      	add	r3, sp, #12
1a0045f0:	9300      	str	r3, [sp, #0]
1a0045f2:	f10d 030d 	add.w	r3, sp, #13
1a0045f6:	f10d 020e 	add.w	r2, sp, #14
1a0045fa:	f10d 010f 	add.w	r1, sp, #15
1a0045fe:	f7ff feef 	bl	1a0043e0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a004602:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004606:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00460a:	1c21      	adds	r1, r4, #0
1a00460c:	bf18      	it	ne
1a00460e:	2101      	movne	r1, #1
1a004610:	015b      	lsls	r3, r3, #5
1a004612:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a004616:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00461a:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a00461c:	2001      	movs	r0, #1
}
1a00461e:	b004      	add	sp, #16
1a004620:	bd10      	pop	{r4, pc}
	  return FALSE;
1a004622:	2000      	movs	r0, #0
1a004624:	4770      	bx	lr
	  return FALSE;
1a004626:	2000      	movs	r0, #0
}
1a004628:	4770      	bx	lr

1a00462a <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00462a:	f110 0f02 	cmn.w	r0, #2
1a00462e:	d02c      	beq.n	1a00468a <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a004630:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004634:	d02b      	beq.n	1a00468e <gpioRead+0x64>
{
1a004636:	b500      	push	{lr}
1a004638:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00463a:	2300      	movs	r3, #0
1a00463c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004640:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004644:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004648:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00464c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004650:	f10d 030b 	add.w	r3, sp, #11
1a004654:	9301      	str	r3, [sp, #4]
1a004656:	ab03      	add	r3, sp, #12
1a004658:	9300      	str	r3, [sp, #0]
1a00465a:	f10d 030d 	add.w	r3, sp, #13
1a00465e:	f10d 020e 	add.w	r2, sp, #14
1a004662:	f10d 010f 	add.w	r1, sp, #15
1a004666:	f7ff febb 	bl	1a0043e0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00466a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a00466e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a004672:	015b      	lsls	r3, r3, #5
1a004674:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a004678:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00467c:	5c98      	ldrb	r0, [r3, r2]
1a00467e:	3000      	adds	r0, #0
1a004680:	bf18      	it	ne
1a004682:	2001      	movne	r0, #1

   return ret_val;
}
1a004684:	b005      	add	sp, #20
1a004686:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a00468a:	2001      	movs	r0, #1
1a00468c:	4770      	bx	lr
      return FALSE;
1a00468e:	2000      	movs	r0, #0
}
1a004690:	4770      	bx	lr

1a004692 <gpioToggle>:
{
1a004692:	b510      	push	{r4, lr}
1a004694:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a004696:	f7ff ffc8 	bl	1a00462a <gpioRead>
1a00469a:	fab0 f180 	clz	r1, r0
1a00469e:	0949      	lsrs	r1, r1, #5
1a0046a0:	4620      	mov	r0, r4
1a0046a2:	f7ff ff8d 	bl	1a0045c0 <gpioWrite>
}
1a0046a6:	bd10      	pop	{r4, pc}

1a0046a8 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0046a8:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0046aa:	4b04      	ldr	r3, [pc, #16]	; (1a0046bc <USB0_IRQHandler+0x14>)
1a0046ac:	681b      	ldr	r3, [r3, #0]
1a0046ae:	681b      	ldr	r3, [r3, #0]
1a0046b0:	68db      	ldr	r3, [r3, #12]
1a0046b2:	4a03      	ldr	r2, [pc, #12]	; (1a0046c0 <USB0_IRQHandler+0x18>)
1a0046b4:	6810      	ldr	r0, [r2, #0]
1a0046b6:	4798      	blx	r3
}
1a0046b8:	bd08      	pop	{r3, pc}
1a0046ba:	bf00      	nop
1a0046bc:	10002d8c 	.word	0x10002d8c
1a0046c0:	10002be4 	.word	0x10002be4

1a0046c4 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0046c4:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0046c6:	f7ff fa9f 	bl	1a003c08 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0046ca:	4b18      	ldr	r3, [pc, #96]	; (1a00472c <boardInit+0x68>)
1a0046cc:	6818      	ldr	r0, [r3, #0]
1a0046ce:	f7ff fd87 	bl	1a0041e0 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0046d2:	2105      	movs	r1, #5
1a0046d4:	2000      	movs	r0, #0
1a0046d6:	f7ff fe9d 	bl	1a004414 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0046da:	2100      	movs	r1, #0
1a0046dc:	2024      	movs	r0, #36	; 0x24
1a0046de:	f7ff fe99 	bl	1a004414 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0046e2:	2100      	movs	r1, #0
1a0046e4:	2025      	movs	r0, #37	; 0x25
1a0046e6:	f7ff fe95 	bl	1a004414 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0046ea:	2100      	movs	r1, #0
1a0046ec:	2026      	movs	r0, #38	; 0x26
1a0046ee:	f7ff fe91 	bl	1a004414 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0046f2:	2100      	movs	r1, #0
1a0046f4:	2027      	movs	r0, #39	; 0x27
1a0046f6:	f7ff fe8d 	bl	1a004414 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0046fa:	2101      	movs	r1, #1
1a0046fc:	2028      	movs	r0, #40	; 0x28
1a0046fe:	f7ff fe89 	bl	1a004414 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a004702:	2101      	movs	r1, #1
1a004704:	2029      	movs	r0, #41	; 0x29
1a004706:	f7ff fe85 	bl	1a004414 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00470a:	2101      	movs	r1, #1
1a00470c:	202a      	movs	r0, #42	; 0x2a
1a00470e:	f7ff fe81 	bl	1a004414 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a004712:	2101      	movs	r1, #1
1a004714:	202b      	movs	r0, #43	; 0x2b
1a004716:	f7ff fe7d 	bl	1a004414 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00471a:	2101      	movs	r1, #1
1a00471c:	202c      	movs	r0, #44	; 0x2c
1a00471e:	f7ff fe79 	bl	1a004414 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a004722:	2101      	movs	r1, #1
1a004724:	202d      	movs	r0, #45	; 0x2d
1a004726:	f7ff fe75 	bl	1a004414 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a00472a:	bd08      	pop	{r3, pc}
1a00472c:	10002d88 	.word	0x10002d88

1a004730 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a004730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004734:	4680      	mov	r8, r0
1a004736:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a004738:	f7ff fdcc 	bl	1a0042d4 <tickRead>
1a00473c:	4606      	mov	r6, r0
1a00473e:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a004740:	f7ff fdc8 	bl	1a0042d4 <tickRead>
1a004744:	1b84      	subs	r4, r0, r6
1a004746:	eb61 0507 	sbc.w	r5, r1, r7
1a00474a:	4b06      	ldr	r3, [pc, #24]	; (1a004764 <delay+0x34>)
1a00474c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004750:	4640      	mov	r0, r8
1a004752:	4649      	mov	r1, r9
1a004754:	f000 fed4 	bl	1a005500 <__aeabi_uldivmod>
1a004758:	428d      	cmp	r5, r1
1a00475a:	bf08      	it	eq
1a00475c:	4284      	cmpeq	r4, r0
1a00475e:	d3ef      	bcc.n	1a004740 <delay+0x10>
}
1a004760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004764:	10000048 	.word	0x10000048

1a004768 <floatToString>:
};

// Ftoa implementation from:
// https://github.com/antongus/stm32tpl/blob/master/ftoa.c
char* floatToString( float value, char* result, int32_t precision )
{
1a004768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00476c:	b083      	sub	sp, #12
1a00476e:	4605      	mov	r5, r0
1a004770:	460e      	mov	r6, r1
   char * p1;
   char c;
   long intPart;

   // check precision bounds
   if (precision > MAX_PRECISION)
1a004772:	290a      	cmp	r1, #10
1a004774:	dd00      	ble.n	1a004778 <floatToString+0x10>
      precision = MAX_PRECISION;
1a004776:	260a      	movs	r6, #10

   // sign stuff
   if (value < 0) {
1a004778:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
1a00477c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a004780:	d440      	bmi.n	1a004804 <floatToString+0x9c>
   char * ptr = result;
1a004782:	462c      	mov	r4, r5
      value = -value;
      *ptr++ = '-';
   }

   if (precision < 0) { // negative precision == automatic precision guess
1a004784:	2e00      	cmp	r6, #0
1a004786:	db44      	blt.n	1a004812 <floatToString+0xaa>
      else if (value < 100000.0) precision = 1;
      else precision = 0;
   }

   // round value according the precision
   if (precision)
1a004788:	b186      	cbz	r6, 1a0047ac <floatToString+0x44>
      value += rounders[precision];
1a00478a:	4b4f      	ldr	r3, [pc, #316]	; (1a0048c8 <floatToString+0x160>)
1a00478c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
1a004790:	e9d3 8900 	ldrd	r8, r9, [r3]
1a004794:	ee10 0a10 	vmov	r0, s0
1a004798:	f000 fb48 	bl	1a004e2c <__aeabi_f2d>
1a00479c:	4642      	mov	r2, r8
1a00479e:	464b      	mov	r3, r9
1a0047a0:	f000 f9e6 	bl	1a004b70 <__adddf3>
1a0047a4:	f000 fe5c 	bl	1a005460 <__aeabi_d2f>
1a0047a8:	ee00 0a10 	vmov	s0, r0

   // integer part...
   intPart = value;
1a0047ac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
1a0047b0:	ee17 1a90 	vmov	r1, s15
   value -= intPart;
1a0047b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0047b8:	ee70 7a67 	vsub.f32	s15, s0, s15

   if (!intPart)
1a0047bc:	2900      	cmp	r1, #0
1a0047be:	d160      	bne.n	1a004882 <floatToString+0x11a>
      *ptr++ = '0';
1a0047c0:	4623      	mov	r3, r4
1a0047c2:	2230      	movs	r2, #48	; 0x30
1a0047c4:	f803 2b01 	strb.w	r2, [r3], #1
      // restore end pos
      ptr = p1;
   }

   // decimal part
   if (precision) {
1a0047c8:	2e00      	cmp	r6, #0
1a0047ca:	d076      	beq.n	1a0048ba <floatToString+0x152>
      // place decimal point
      *ptr++ = '.';
1a0047cc:	222e      	movs	r2, #46	; 0x2e
1a0047ce:	f803 2b01 	strb.w	r2, [r3], #1

      // convert
      while (precision--) {
1a0047d2:	1e71      	subs	r1, r6, #1
1a0047d4:	2e00      	cmp	r6, #0
1a0047d6:	d070      	beq.n	1a0048ba <floatToString+0x152>
         value *= 10.0;
1a0047d8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
1a0047dc:	ee67 7a80 	vmul.f32	s15, s15, s0
         c = value;
1a0047e0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
1a0047e4:	ed8d 7a01 	vstr	s14, [sp, #4]
1a0047e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
         *ptr++ = '0' + c;
1a0047ec:	f102 0030 	add.w	r0, r2, #48	; 0x30
1a0047f0:	f803 0b01 	strb.w	r0, [r3], #1
         value -= c;
1a0047f4:	ee07 2a10 	vmov	s14, r2
1a0047f8:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
1a0047fc:	ee77 7ac0 	vsub.f32	s15, s15, s0
      while (precision--) {
1a004800:	460e      	mov	r6, r1
1a004802:	e7e6      	b.n	1a0047d2 <floatToString+0x6a>
      value = -value;
1a004804:	eeb1 0a40 	vneg.f32	s0, s0
      *ptr++ = '-';
1a004808:	462c      	mov	r4, r5
1a00480a:	232d      	movs	r3, #45	; 0x2d
1a00480c:	f804 3b01 	strb.w	r3, [r4], #1
1a004810:	e7b8      	b.n	1a004784 <floatToString+0x1c>
      if (value < 1.0) precision = 6;
1a004812:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a004816:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a00481a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00481e:	d424      	bmi.n	1a00486a <floatToString+0x102>
      else if (value < 10.0) precision = 5;
1a004820:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
1a004824:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a004828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00482c:	d41f      	bmi.n	1a00486e <floatToString+0x106>
      else if (value < 100.0) precision = 4;
1a00482e:	eddf 7a27 	vldr	s15, [pc, #156]	; 1a0048cc <floatToString+0x164>
1a004832:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a004836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00483a:	d41a      	bmi.n	1a004872 <floatToString+0x10a>
      else if (value < 1000.0) precision = 3;
1a00483c:	eddf 7a24 	vldr	s15, [pc, #144]	; 1a0048d0 <floatToString+0x168>
1a004840:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a004844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a004848:	d415      	bmi.n	1a004876 <floatToString+0x10e>
      else if (value < 10000.0) precision = 2;
1a00484a:	eddf 7a22 	vldr	s15, [pc, #136]	; 1a0048d4 <floatToString+0x16c>
1a00484e:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a004852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a004856:	d410      	bmi.n	1a00487a <floatToString+0x112>
      else if (value < 100000.0) precision = 1;
1a004858:	eddf 7a1f 	vldr	s15, [pc, #124]	; 1a0048d8 <floatToString+0x170>
1a00485c:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a004860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a004864:	d40b      	bmi.n	1a00487e <floatToString+0x116>
      else precision = 0;
1a004866:	2600      	movs	r6, #0
1a004868:	e7a0      	b.n	1a0047ac <floatToString+0x44>
      if (value < 1.0) precision = 6;
1a00486a:	2606      	movs	r6, #6
1a00486c:	e78d      	b.n	1a00478a <floatToString+0x22>
      else if (value < 10.0) precision = 5;
1a00486e:	2605      	movs	r6, #5
1a004870:	e78b      	b.n	1a00478a <floatToString+0x22>
      else if (value < 100.0) precision = 4;
1a004872:	2604      	movs	r6, #4
1a004874:	e789      	b.n	1a00478a <floatToString+0x22>
      else if (value < 1000.0) precision = 3;
1a004876:	2603      	movs	r6, #3
1a004878:	e787      	b.n	1a00478a <floatToString+0x22>
      else if (value < 10000.0) precision = 2;
1a00487a:	2602      	movs	r6, #2
1a00487c:	e785      	b.n	1a00478a <floatToString+0x22>
      else if (value < 100000.0) precision = 1;
1a00487e:	2601      	movs	r6, #1
1a004880:	e783      	b.n	1a00478a <floatToString+0x22>
      p = ptr;
1a004882:	4623      	mov	r3, r4
      while (intPart) {
1a004884:	b179      	cbz	r1, 1a0048a6 <floatToString+0x13e>
         *p++ = '0' + intPart % 10;
1a004886:	4815      	ldr	r0, [pc, #84]	; (1a0048dc <floatToString+0x174>)
1a004888:	fb80 2001 	smull	r2, r0, r0, r1
1a00488c:	17ca      	asrs	r2, r1, #31
1a00488e:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
1a004892:	4617      	mov	r7, r2
1a004894:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a004898:	0050      	lsls	r0, r2, #1
1a00489a:	1a0a      	subs	r2, r1, r0
1a00489c:	3230      	adds	r2, #48	; 0x30
1a00489e:	f803 2b01 	strb.w	r2, [r3], #1
         intPart /= 10;
1a0048a2:	4639      	mov	r1, r7
1a0048a4:	e7ee      	b.n	1a004884 <floatToString+0x11c>
1a0048a6:	461a      	mov	r2, r3
      while (p > ptr) {
1a0048a8:	4294      	cmp	r4, r2
1a0048aa:	d28d      	bcs.n	1a0047c8 <floatToString+0x60>
         c = *--p;
1a0048ac:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
         *p = *ptr;
1a0048b0:	7820      	ldrb	r0, [r4, #0]
1a0048b2:	7010      	strb	r0, [r2, #0]
         *ptr++ = c;
1a0048b4:	f804 1b01 	strb.w	r1, [r4], #1
1a0048b8:	e7f6      	b.n	1a0048a8 <floatToString+0x140>
      }
   }

   // terminating zero
   *ptr = 0;
1a0048ba:	2200      	movs	r2, #0
1a0048bc:	701a      	strb	r2, [r3, #0]

   return result;
}
1a0048be:	4628      	mov	r0, r5
1a0048c0:	b003      	add	sp, #12
1a0048c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0048c6:	bf00      	nop
1a0048c8:	1a006c20 	.word	0x1a006c20
1a0048cc:	42c80000 	.word	0x42c80000
1a0048d0:	447a0000 	.word	0x447a0000
1a0048d4:	461c4000 	.word	0x461c4000
1a0048d8:	47c35000 	.word	0x47c35000
1a0048dc:	66666667 	.word	0x66666667

1a0048e0 <dht11_TimeOutReset>:

uint32_t dht11_timeout;
uint32_t dht11_timeout_max;
static void dht11_TimeOutReset(uint32_t max)
{
   if(0 < max) {
1a0048e0:	b130      	cbz	r0, 1a0048f0 <dht11_TimeOutReset+0x10>
      dht11_timeout_max = max;
1a0048e2:	4a06      	ldr	r2, [pc, #24]	; (1a0048fc <dht11_TimeOutReset+0x1c>)
1a0048e4:	6010      	str	r0, [r2, #0]
   } else {
      dht11_timeout_max = DHT11_TIMEOUT_MAX;
   }
   dht11_timeout = dht11_timeout_max;
1a0048e6:	4b05      	ldr	r3, [pc, #20]	; (1a0048fc <dht11_TimeOutReset+0x1c>)
1a0048e8:	681a      	ldr	r2, [r3, #0]
1a0048ea:	4b05      	ldr	r3, [pc, #20]	; (1a004900 <dht11_TimeOutReset+0x20>)
1a0048ec:	601a      	str	r2, [r3, #0]
}
1a0048ee:	4770      	bx	lr
      dht11_timeout_max = DHT11_TIMEOUT_MAX;
1a0048f0:	4b02      	ldr	r3, [pc, #8]	; (1a0048fc <dht11_TimeOutReset+0x1c>)
1a0048f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0048f6:	601a      	str	r2, [r3, #0]
1a0048f8:	e7f5      	b.n	1a0048e6 <dht11_TimeOutReset+0x6>
1a0048fa:	bf00      	nop
1a0048fc:	10002d94 	.word	0x10002d94
1a004900:	10002d90 	.word	0x10002d90

1a004904 <dht11_TimeOutCheck>:

static bool_t dht11_TimeOutCheck(void)
{
1a004904:	b508      	push	{r3, lr}
   if(0 < dht11_timeout) {
1a004906:	4b06      	ldr	r3, [pc, #24]	; (1a004920 <dht11_TimeOutCheck+0x1c>)
1a004908:	681b      	ldr	r3, [r3, #0]
1a00490a:	b123      	cbz	r3, 1a004916 <dht11_TimeOutCheck+0x12>
      dht11_timeout--;
1a00490c:	3b01      	subs	r3, #1
1a00490e:	4a04      	ldr	r2, [pc, #16]	; (1a004920 <dht11_TimeOutCheck+0x1c>)
1a004910:	6013      	str	r3, [r2, #0]
      return TRUE;
1a004912:	2001      	movs	r0, #1
   }
   dht11_TimeOutReset(0);
   return FALSE;
}
1a004914:	bd08      	pop	{r3, pc}
   dht11_TimeOutReset(0);
1a004916:	2000      	movs	r0, #0
1a004918:	f7ff ffe2 	bl	1a0048e0 <dht11_TimeOutReset>
   return FALSE;
1a00491c:	2000      	movs	r0, #0
1a00491e:	e7f9      	b.n	1a004914 <dht11_TimeOutCheck+0x10>
1a004920:	10002d90 	.word	0x10002d90

1a004924 <dht11_ProcessData>:
static bool_t dht11_ProcessData(void)
{
   int i, i_i, i_f, j;
   uint32_t valf, valt;

   valf = dht11_ticks_array[0];
1a004924:	4b25      	ldr	r3, [pc, #148]	; (1a0049bc <dht11_ProcessData+0x98>)
1a004926:	6819      	ldr	r1, [r3, #0]
   valt = dht11_ticks_array[1];
1a004928:	6858      	ldr	r0, [r3, #4]
   for(i = 2; i < 81; i++) {
1a00492a:	2302      	movs	r3, #2
1a00492c:	e000      	b.n	1a004930 <dht11_ProcessData+0xc>
1a00492e:	3301      	adds	r3, #1
1a004930:	2b50      	cmp	r3, #80	; 0x50
1a004932:	dc08      	bgt.n	1a004946 <dht11_ProcessData+0x22>
      if((valf <= dht11_ticks_array[i]) || (valt <= dht11_ticks_array[i])) {
1a004934:	4a21      	ldr	r2, [pc, #132]	; (1a0049bc <dht11_ProcessData+0x98>)
1a004936:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a00493a:	428a      	cmp	r2, r1
1a00493c:	d239      	bcs.n	1a0049b2 <dht11_ProcessData+0x8e>
1a00493e:	4282      	cmp	r2, r0
1a004940:	d3f5      	bcc.n	1a00492e <dht11_ProcessData+0xa>
         return FALSE;
1a004942:	2000      	movs	r0, #0
   if(crc != dht11_byte[4]) {
      return FALSE;
   }

   return TRUE;
}
1a004944:	4770      	bx	lr
{
1a004946:	b470      	push	{r4, r5, r6}
   for(j = 0; j < DHT11_LEN_dht11_byte; j++) {
1a004948:	2100      	movs	r1, #0
   i_i = 2;
1a00494a:	2602      	movs	r6, #2
1a00494c:	e017      	b.n	1a00497e <dht11_ProcessData+0x5a>
            dht11_byte[j] = (dht11_byte[j] << 1) | 0x01;
1a00494e:	481c      	ldr	r0, [pc, #112]	; (1a0049c0 <dht11_ProcessData+0x9c>)
1a004950:	5c42      	ldrb	r2, [r0, r1]
1a004952:	0052      	lsls	r2, r2, #1
1a004954:	f042 0201 	orr.w	r2, r2, #1
1a004958:	5442      	strb	r2, [r0, r1]
      for(i = i_i; i < i_f; i = i + 2) {
1a00495a:	3302      	adds	r3, #2
1a00495c:	42ab      	cmp	r3, r5
1a00495e:	da0c      	bge.n	1a00497a <dht11_ProcessData+0x56>
         valf = dht11_ticks_array[i];
1a004960:	4a16      	ldr	r2, [pc, #88]	; (1a0049bc <dht11_ProcessData+0x98>)
1a004962:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
         valt = dht11_ticks_array[i+1];
1a004966:	1c5c      	adds	r4, r3, #1
1a004968:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
         if(valt < valf) {
1a00496c:	4290      	cmp	r0, r2
1a00496e:	d9ee      	bls.n	1a00494e <dht11_ProcessData+0x2a>
            dht11_byte[j] = (dht11_byte[j] << 1);
1a004970:	4813      	ldr	r0, [pc, #76]	; (1a0049c0 <dht11_ProcessData+0x9c>)
1a004972:	5c42      	ldrb	r2, [r0, r1]
1a004974:	0052      	lsls	r2, r2, #1
1a004976:	5442      	strb	r2, [r0, r1]
1a004978:	e7ef      	b.n	1a00495a <dht11_ProcessData+0x36>
      i_i = i_f + 1;
1a00497a:	3610      	adds	r6, #16
   for(j = 0; j < DHT11_LEN_dht11_byte; j++) {
1a00497c:	3101      	adds	r1, #1
1a00497e:	2904      	cmp	r1, #4
1a004980:	dc06      	bgt.n	1a004990 <dht11_ProcessData+0x6c>
      dht11_byte[j] = 0x00;
1a004982:	4b0f      	ldr	r3, [pc, #60]	; (1a0049c0 <dht11_ProcessData+0x9c>)
1a004984:	2200      	movs	r2, #0
1a004986:	545a      	strb	r2, [r3, r1]
      i_f = i_i + 8 * 2 - 1;
1a004988:	f106 050f 	add.w	r5, r6, #15
      for(i = i_i; i < i_f; i = i + 2) {
1a00498c:	4633      	mov	r3, r6
1a00498e:	e7e5      	b.n	1a00495c <dht11_ProcessData+0x38>
   crc = dht11_byte[0] + dht11_byte[1] + dht11_byte[2] + dht11_byte[3];
1a004990:	4a0b      	ldr	r2, [pc, #44]	; (1a0049c0 <dht11_ProcessData+0x9c>)
1a004992:	7813      	ldrb	r3, [r2, #0]
1a004994:	7851      	ldrb	r1, [r2, #1]
1a004996:	440b      	add	r3, r1
1a004998:	7891      	ldrb	r1, [r2, #2]
1a00499a:	fa51 f383 	uxtab	r3, r1, r3
1a00499e:	78d1      	ldrb	r1, [r2, #3]
1a0049a0:	fa51 f383 	uxtab	r3, r1, r3
1a0049a4:	b2db      	uxtb	r3, r3
   if(crc != dht11_byte[4]) {
1a0049a6:	7912      	ldrb	r2, [r2, #4]
1a0049a8:	429a      	cmp	r2, r3
1a0049aa:	d104      	bne.n	1a0049b6 <dht11_ProcessData+0x92>
   return TRUE;
1a0049ac:	2001      	movs	r0, #1
}
1a0049ae:	bc70      	pop	{r4, r5, r6}
1a0049b0:	4770      	bx	lr
         return FALSE;
1a0049b2:	2000      	movs	r0, #0
1a0049b4:	4770      	bx	lr
      return FALSE;
1a0049b6:	2000      	movs	r0, #0
1a0049b8:	e7f9      	b.n	1a0049ae <dht11_ProcessData+0x8a>
1a0049ba:	bf00      	nop
1a0049bc:	10002bf4 	.word	0x10002bf4
1a0049c0:	10002bec 	.word	0x10002bec

1a0049c4 <dht11_GPIO_High>:
{
1a0049c4:	b508      	push	{r3, lr}
   gpioInit( dht11Pin, GPIO_INPUT_PULLUP );
1a0049c6:	2102      	movs	r1, #2
1a0049c8:	4b02      	ldr	r3, [pc, #8]	; (1a0049d4 <dht11_GPIO_High+0x10>)
1a0049ca:	f993 0000 	ldrsb.w	r0, [r3]
1a0049ce:	f7ff fd21 	bl	1a004414 <gpioInit>
}
1a0049d2:	bd08      	pop	{r3, pc}
1a0049d4:	10002be8 	.word	0x10002be8

1a0049d8 <dht11_GPIO_Low>:
{
1a0049d8:	b510      	push	{r4, lr}
   gpioInit( dht11Pin, GPIO_OUTPUT );
1a0049da:	4c06      	ldr	r4, [pc, #24]	; (1a0049f4 <dht11_GPIO_Low+0x1c>)
1a0049dc:	2101      	movs	r1, #1
1a0049de:	f994 0000 	ldrsb.w	r0, [r4]
1a0049e2:	f7ff fd17 	bl	1a004414 <gpioInit>
   gpioWrite( dht11Pin, FALSE);
1a0049e6:	2100      	movs	r1, #0
1a0049e8:	f994 0000 	ldrsb.w	r0, [r4]
1a0049ec:	f7ff fde8 	bl	1a0045c0 <gpioWrite>
}
1a0049f0:	bd10      	pop	{r4, pc}
1a0049f2:	bf00      	nop
1a0049f4:	10002be8 	.word	0x10002be8

1a0049f8 <dht11_GPIO_Read>:
{
1a0049f8:	b508      	push	{r3, lr}
   return gpioRead( dht11Pin );
1a0049fa:	4b03      	ldr	r3, [pc, #12]	; (1a004a08 <dht11_GPIO_Read+0x10>)
1a0049fc:	f993 0000 	ldrsb.w	r0, [r3]
1a004a00:	f7ff fe13 	bl	1a00462a <gpioRead>
}
1a004a04:	bd08      	pop	{r3, pc}
1a004a06:	bf00      	nop
1a004a08:	10002be8 	.word	0x10002be8

1a004a0c <dht11_StartRead>:
{
1a004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dht11_GPIO_Low();
1a004a0e:	f7ff ffe3 	bl	1a0049d8 <dht11_GPIO_Low>
   delay(20);
1a004a12:	2014      	movs	r0, #20
1a004a14:	2100      	movs	r1, #0
1a004a16:	f7ff fe8b 	bl	1a004730 <delay>
   dht11_GPIO_High();
1a004a1a:	f7ff ffd3 	bl	1a0049c4 <dht11_GPIO_High>
   uint32_t n_bit          = 0;
1a004a1e:	2600      	movs	r6, #0
   uint32_t n_tick         = 0;
1a004a20:	4635      	mov	r5, r6
   bool_t   flag_loop_end	= FALSE;
1a004a22:	4637      	mov	r7, r6
   uint8_t  state          = dht11_state_start;
1a004a24:	4634      	mov	r4, r6
   while(FALSE == flag_loop_end) {
1a004a26:	e042      	b.n	1a004aae <dht11_StartRead+0xa2>
         state = dht11_state_end;
1a004a28:	2405      	movs	r4, #5
1a004a2a:	e03d      	b.n	1a004aa8 <dht11_StartRead+0x9c>
         dht11_TimeOutReset(DHT11_TIMEOUT_MAX);
1a004a2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a004a30:	f7ff ff56 	bl	1a0048e0 <dht11_TimeOutReset>
         while(dht11_state_start == state) {
1a004a34:	e003      	b.n	1a004a3e <dht11_StartRead+0x32>
            if(!dht11_TimeOutCheck()) {
1a004a36:	f7ff ff65 	bl	1a004904 <dht11_TimeOutCheck>
1a004a3a:	2800      	cmp	r0, #0
1a004a3c:	d04a      	beq.n	1a004ad4 <dht11_StartRead+0xc8>
         while(dht11_state_start == state) {
1a004a3e:	bb9c      	cbnz	r4, 1a004aa8 <dht11_StartRead+0x9c>
            if(dht11_GPIO_Read() == FALSE) {
1a004a40:	f7ff ffda 	bl	1a0049f8 <dht11_GPIO_Read>
1a004a44:	2800      	cmp	r0, #0
1a004a46:	d1f6      	bne.n	1a004a36 <dht11_StartRead+0x2a>
               state = dht11_state_low;
1a004a48:	2401      	movs	r4, #1
1a004a4a:	e7f4      	b.n	1a004a36 <dht11_StartRead+0x2a>
         dht11_TimeOutReset(0);
1a004a4c:	2000      	movs	r0, #0
1a004a4e:	f7ff ff47 	bl	1a0048e0 <dht11_TimeOutReset>
         while(dht11_state_low == state) {
1a004a52:	2c01      	cmp	r4, #1
1a004a54:	d128      	bne.n	1a004aa8 <dht11_StartRead+0x9c>
            n_tick++;
1a004a56:	3501      	adds	r5, #1
            if(dht11_GPIO_Read() == TRUE) {
1a004a58:	f7ff ffce 	bl	1a0049f8 <dht11_GPIO_Read>
1a004a5c:	2801      	cmp	r0, #1
1a004a5e:	d005      	beq.n	1a004a6c <dht11_StartRead+0x60>
            if(!dht11_TimeOutCheck()) {
1a004a60:	f7ff ff50 	bl	1a004904 <dht11_TimeOutCheck>
1a004a64:	2800      	cmp	r0, #0
1a004a66:	d1f4      	bne.n	1a004a52 <dht11_StartRead+0x46>
               state = dht11_state_timeout;
1a004a68:	2403      	movs	r4, #3
1a004a6a:	e7f2      	b.n	1a004a52 <dht11_StartRead+0x46>
               dht11_ticks_array[n_bit] = n_tick;
1a004a6c:	4b1d      	ldr	r3, [pc, #116]	; (1a004ae4 <dht11_StartRead+0xd8>)
1a004a6e:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
               n_bit++;
1a004a72:	3601      	adds	r6, #1
               n_tick = 0;
1a004a74:	2500      	movs	r5, #0
               state = dht11_state_high;
1a004a76:	2402      	movs	r4, #2
1a004a78:	e7f2      	b.n	1a004a60 <dht11_StartRead+0x54>
         dht11_TimeOutReset(0);
1a004a7a:	2000      	movs	r0, #0
1a004a7c:	f7ff ff30 	bl	1a0048e0 <dht11_TimeOutReset>
         while(dht11_state_high == state) {
1a004a80:	e003      	b.n	1a004a8a <dht11_StartRead+0x7e>
            if(!dht11_TimeOutCheck()) {
1a004a82:	f7ff ff3f 	bl	1a004904 <dht11_TimeOutCheck>
1a004a86:	b900      	cbnz	r0, 1a004a8a <dht11_StartRead+0x7e>
               state = dht11_state_timeout;
1a004a88:	2403      	movs	r4, #3
         while(dht11_state_high == state) {
1a004a8a:	2c02      	cmp	r4, #2
1a004a8c:	d10c      	bne.n	1a004aa8 <dht11_StartRead+0x9c>
            n_tick++;
1a004a8e:	3501      	adds	r5, #1
            if(dht11_GPIO_Read() == FALSE) {
1a004a90:	f7ff ffb2 	bl	1a0049f8 <dht11_GPIO_Read>
1a004a94:	2800      	cmp	r0, #0
1a004a96:	d1f4      	bne.n	1a004a82 <dht11_StartRead+0x76>
               dht11_ticks_array[n_bit] = n_tick;
1a004a98:	4b12      	ldr	r3, [pc, #72]	; (1a004ae4 <dht11_StartRead+0xd8>)
1a004a9a:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
               n_bit++;
1a004a9e:	3601      	adds	r6, #1
               n_tick = 0;
1a004aa0:	2500      	movs	r5, #0
               state = dht11_state_low;
1a004aa2:	2401      	movs	r4, #1
1a004aa4:	e7ed      	b.n	1a004a82 <dht11_StartRead+0x76>
         flag_loop_end = TRUE;
1a004aa6:	2701      	movs	r7, #1
      if(DHT11_LEN_dht11_ticks_array <= n_bit) {
1a004aa8:	2e51      	cmp	r6, #81	; 0x51
1a004aaa:	d900      	bls.n	1a004aae <dht11_StartRead+0xa2>
         state = dht11_state_end;
1a004aac:	2405      	movs	r4, #5
   while(FALSE == flag_loop_end) {
1a004aae:	b99f      	cbnz	r7, 1a004ad8 <dht11_StartRead+0xcc>
      switch(state) {
1a004ab0:	2c05      	cmp	r4, #5
1a004ab2:	d8b9      	bhi.n	1a004a28 <dht11_StartRead+0x1c>
1a004ab4:	a301      	add	r3, pc, #4	; (adr r3, 1a004abc <dht11_StartRead+0xb0>)
1a004ab6:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
1a004aba:	bf00      	nop
1a004abc:	1a004a2d 	.word	0x1a004a2d
1a004ac0:	1a004a4d 	.word	0x1a004a4d
1a004ac4:	1a004a7b 	.word	0x1a004a7b
1a004ac8:	1a004a29 	.word	0x1a004a29
1a004acc:	1a004a29 	.word	0x1a004a29
1a004ad0:	1a004aa7 	.word	0x1a004aa7
               state = dht11_state_timeout;
1a004ad4:	2403      	movs	r4, #3
1a004ad6:	e7e7      	b.n	1a004aa8 <dht11_StartRead+0x9c>
   if(82 == n_bit) {
1a004ad8:	2e52      	cmp	r6, #82	; 0x52
1a004ada:	d000      	beq.n	1a004ade <dht11_StartRead+0xd2>
   return FALSE;
1a004adc:	2700      	movs	r7, #0
}
1a004ade:	4638      	mov	r0, r7
1a004ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004ae2:	bf00      	nop
1a004ae4:	10002bf4 	.word	0x10002bf4

1a004ae8 <dht11Init>:
	pos++;
	dst[pos] = '\0';
}

void dht11Init( int32_t gpio )
{
1a004ae8:	b508      	push	{r3, lr}
   dht11Pin = (int32_t)gpio;
1a004aea:	4b02      	ldr	r3, [pc, #8]	; (1a004af4 <dht11Init+0xc>)
1a004aec:	6018      	str	r0, [r3, #0]
   dht11_GPIO_High();
1a004aee:	f7ff ff69 	bl	1a0049c4 <dht11_GPIO_High>
}
1a004af2:	bd08      	pop	{r3, pc}
1a004af4:	10002be8 	.word	0x10002be8

1a004af8 <dht11Read>:

bool_t dht11Read( float *phum, float *ptemp )
{
1a004af8:	b538      	push	{r3, r4, r5, lr}
1a004afa:	4605      	mov	r5, r0
1a004afc:	460c      	mov	r4, r1
   if(TRUE == dht11_StartRead()) {
1a004afe:	f7ff ff85 	bl	1a004a0c <dht11_StartRead>
1a004b02:	2801      	cmp	r0, #1
1a004b04:	d001      	beq.n	1a004b0a <dht11Read+0x12>
         *phum 	= ((float)dht11_byte[0]) + ((float)dht11_byte[1])/10;
         *ptemp 	= ((float)dht11_byte[2]) + ((float)dht11_byte[3])/10;
         return TRUE;
      }
   }
   return FALSE;
1a004b06:	2000      	movs	r0, #0
}
1a004b08:	bd38      	pop	{r3, r4, r5, pc}
      if(TRUE == dht11_ProcessData()) {
1a004b0a:	f7ff ff0b 	bl	1a004924 <dht11_ProcessData>
1a004b0e:	2801      	cmp	r0, #1
1a004b10:	d001      	beq.n	1a004b16 <dht11Read+0x1e>
   return FALSE;
1a004b12:	2000      	movs	r0, #0
1a004b14:	e7f8      	b.n	1a004b08 <dht11Read+0x10>
         *phum 	= ((float)dht11_byte[0]) + ((float)dht11_byte[1])/10;
1a004b16:	4b12      	ldr	r3, [pc, #72]	; (1a004b60 <dht11Read+0x68>)
1a004b18:	781a      	ldrb	r2, [r3, #0]
1a004b1a:	ee07 2a90 	vmov	s15, r2
1a004b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a004b22:	785a      	ldrb	r2, [r3, #1]
1a004b24:	ee07 2a10 	vmov	s14, r2
1a004b28:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a004b2c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
1a004b30:	ee87 6a26 	vdiv.f32	s12, s14, s13
1a004b34:	ee77 7a86 	vadd.f32	s15, s15, s12
1a004b38:	edc5 7a00 	vstr	s15, [r5]
         *ptemp 	= ((float)dht11_byte[2]) + ((float)dht11_byte[3])/10;
1a004b3c:	789a      	ldrb	r2, [r3, #2]
1a004b3e:	ee07 2a90 	vmov	s15, r2
1a004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a004b46:	78db      	ldrb	r3, [r3, #3]
1a004b48:	ee07 3a10 	vmov	s14, r3
1a004b4c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a004b50:	ee87 6a26 	vdiv.f32	s12, s14, s13
1a004b54:	ee77 7a86 	vadd.f32	s15, s15, s12
1a004b58:	edc4 7a00 	vstr	s15, [r4]
         return TRUE;
1a004b5c:	e7d4      	b.n	1a004b08 <dht11Read+0x10>
1a004b5e:	bf00      	nop
1a004b60:	10002bec 	.word	0x10002bec

1a004b64 <__aeabi_drsub>:
1a004b64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a004b68:	e002      	b.n	1a004b70 <__adddf3>
1a004b6a:	bf00      	nop

1a004b6c <__aeabi_dsub>:
1a004b6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a004b70 <__adddf3>:
1a004b70:	b530      	push	{r4, r5, lr}
1a004b72:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a004b76:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a004b7a:	ea94 0f05 	teq	r4, r5
1a004b7e:	bf08      	it	eq
1a004b80:	ea90 0f02 	teqeq	r0, r2
1a004b84:	bf1f      	itttt	ne
1a004b86:	ea54 0c00 	orrsne.w	ip, r4, r0
1a004b8a:	ea55 0c02 	orrsne.w	ip, r5, r2
1a004b8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a004b92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a004b96:	f000 80e2 	beq.w	1a004d5e <__adddf3+0x1ee>
1a004b9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a004b9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a004ba2:	bfb8      	it	lt
1a004ba4:	426d      	neglt	r5, r5
1a004ba6:	dd0c      	ble.n	1a004bc2 <__adddf3+0x52>
1a004ba8:	442c      	add	r4, r5
1a004baa:	ea80 0202 	eor.w	r2, r0, r2
1a004bae:	ea81 0303 	eor.w	r3, r1, r3
1a004bb2:	ea82 0000 	eor.w	r0, r2, r0
1a004bb6:	ea83 0101 	eor.w	r1, r3, r1
1a004bba:	ea80 0202 	eor.w	r2, r0, r2
1a004bbe:	ea81 0303 	eor.w	r3, r1, r3
1a004bc2:	2d36      	cmp	r5, #54	; 0x36
1a004bc4:	bf88      	it	hi
1a004bc6:	bd30      	pophi	{r4, r5, pc}
1a004bc8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a004bcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a004bd0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a004bd4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a004bd8:	d002      	beq.n	1a004be0 <__adddf3+0x70>
1a004bda:	4240      	negs	r0, r0
1a004bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004be0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a004be4:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a004be8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a004bec:	d002      	beq.n	1a004bf4 <__adddf3+0x84>
1a004bee:	4252      	negs	r2, r2
1a004bf0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a004bf4:	ea94 0f05 	teq	r4, r5
1a004bf8:	f000 80a7 	beq.w	1a004d4a <__adddf3+0x1da>
1a004bfc:	f1a4 0401 	sub.w	r4, r4, #1
1a004c00:	f1d5 0e20 	rsbs	lr, r5, #32
1a004c04:	db0d      	blt.n	1a004c22 <__adddf3+0xb2>
1a004c06:	fa02 fc0e 	lsl.w	ip, r2, lr
1a004c0a:	fa22 f205 	lsr.w	r2, r2, r5
1a004c0e:	1880      	adds	r0, r0, r2
1a004c10:	f141 0100 	adc.w	r1, r1, #0
1a004c14:	fa03 f20e 	lsl.w	r2, r3, lr
1a004c18:	1880      	adds	r0, r0, r2
1a004c1a:	fa43 f305 	asr.w	r3, r3, r5
1a004c1e:	4159      	adcs	r1, r3
1a004c20:	e00e      	b.n	1a004c40 <__adddf3+0xd0>
1a004c22:	f1a5 0520 	sub.w	r5, r5, #32
1a004c26:	f10e 0e20 	add.w	lr, lr, #32
1a004c2a:	2a01      	cmp	r2, #1
1a004c2c:	fa03 fc0e 	lsl.w	ip, r3, lr
1a004c30:	bf28      	it	cs
1a004c32:	f04c 0c02 	orrcs.w	ip, ip, #2
1a004c36:	fa43 f305 	asr.w	r3, r3, r5
1a004c3a:	18c0      	adds	r0, r0, r3
1a004c3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a004c40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004c44:	d507      	bpl.n	1a004c56 <__adddf3+0xe6>
1a004c46:	f04f 0e00 	mov.w	lr, #0
1a004c4a:	f1dc 0c00 	rsbs	ip, ip, #0
1a004c4e:	eb7e 0000 	sbcs.w	r0, lr, r0
1a004c52:	eb6e 0101 	sbc.w	r1, lr, r1
1a004c56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a004c5a:	d31b      	bcc.n	1a004c94 <__adddf3+0x124>
1a004c5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a004c60:	d30c      	bcc.n	1a004c7c <__adddf3+0x10c>
1a004c62:	0849      	lsrs	r1, r1, #1
1a004c64:	ea5f 0030 	movs.w	r0, r0, rrx
1a004c68:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a004c6c:	f104 0401 	add.w	r4, r4, #1
1a004c70:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a004c74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a004c78:	f080 809a 	bcs.w	1a004db0 <__adddf3+0x240>
1a004c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a004c80:	bf08      	it	eq
1a004c82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a004c86:	f150 0000 	adcs.w	r0, r0, #0
1a004c8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004c8e:	ea41 0105 	orr.w	r1, r1, r5
1a004c92:	bd30      	pop	{r4, r5, pc}
1a004c94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a004c98:	4140      	adcs	r0, r0
1a004c9a:	eb41 0101 	adc.w	r1, r1, r1
1a004c9e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004ca2:	f1a4 0401 	sub.w	r4, r4, #1
1a004ca6:	d1e9      	bne.n	1a004c7c <__adddf3+0x10c>
1a004ca8:	f091 0f00 	teq	r1, #0
1a004cac:	bf04      	itt	eq
1a004cae:	4601      	moveq	r1, r0
1a004cb0:	2000      	moveq	r0, #0
1a004cb2:	fab1 f381 	clz	r3, r1
1a004cb6:	bf08      	it	eq
1a004cb8:	3320      	addeq	r3, #32
1a004cba:	f1a3 030b 	sub.w	r3, r3, #11
1a004cbe:	f1b3 0220 	subs.w	r2, r3, #32
1a004cc2:	da0c      	bge.n	1a004cde <__adddf3+0x16e>
1a004cc4:	320c      	adds	r2, #12
1a004cc6:	dd08      	ble.n	1a004cda <__adddf3+0x16a>
1a004cc8:	f102 0c14 	add.w	ip, r2, #20
1a004ccc:	f1c2 020c 	rsb	r2, r2, #12
1a004cd0:	fa01 f00c 	lsl.w	r0, r1, ip
1a004cd4:	fa21 f102 	lsr.w	r1, r1, r2
1a004cd8:	e00c      	b.n	1a004cf4 <__adddf3+0x184>
1a004cda:	f102 0214 	add.w	r2, r2, #20
1a004cde:	bfd8      	it	le
1a004ce0:	f1c2 0c20 	rsble	ip, r2, #32
1a004ce4:	fa01 f102 	lsl.w	r1, r1, r2
1a004ce8:	fa20 fc0c 	lsr.w	ip, r0, ip
1a004cec:	bfdc      	itt	le
1a004cee:	ea41 010c 	orrle.w	r1, r1, ip
1a004cf2:	4090      	lslle	r0, r2
1a004cf4:	1ae4      	subs	r4, r4, r3
1a004cf6:	bfa2      	ittt	ge
1a004cf8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a004cfc:	4329      	orrge	r1, r5
1a004cfe:	bd30      	popge	{r4, r5, pc}
1a004d00:	ea6f 0404 	mvn.w	r4, r4
1a004d04:	3c1f      	subs	r4, #31
1a004d06:	da1c      	bge.n	1a004d42 <__adddf3+0x1d2>
1a004d08:	340c      	adds	r4, #12
1a004d0a:	dc0e      	bgt.n	1a004d2a <__adddf3+0x1ba>
1a004d0c:	f104 0414 	add.w	r4, r4, #20
1a004d10:	f1c4 0220 	rsb	r2, r4, #32
1a004d14:	fa20 f004 	lsr.w	r0, r0, r4
1a004d18:	fa01 f302 	lsl.w	r3, r1, r2
1a004d1c:	ea40 0003 	orr.w	r0, r0, r3
1a004d20:	fa21 f304 	lsr.w	r3, r1, r4
1a004d24:	ea45 0103 	orr.w	r1, r5, r3
1a004d28:	bd30      	pop	{r4, r5, pc}
1a004d2a:	f1c4 040c 	rsb	r4, r4, #12
1a004d2e:	f1c4 0220 	rsb	r2, r4, #32
1a004d32:	fa20 f002 	lsr.w	r0, r0, r2
1a004d36:	fa01 f304 	lsl.w	r3, r1, r4
1a004d3a:	ea40 0003 	orr.w	r0, r0, r3
1a004d3e:	4629      	mov	r1, r5
1a004d40:	bd30      	pop	{r4, r5, pc}
1a004d42:	fa21 f004 	lsr.w	r0, r1, r4
1a004d46:	4629      	mov	r1, r5
1a004d48:	bd30      	pop	{r4, r5, pc}
1a004d4a:	f094 0f00 	teq	r4, #0
1a004d4e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a004d52:	bf06      	itte	eq
1a004d54:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a004d58:	3401      	addeq	r4, #1
1a004d5a:	3d01      	subne	r5, #1
1a004d5c:	e74e      	b.n	1a004bfc <__adddf3+0x8c>
1a004d5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a004d62:	bf18      	it	ne
1a004d64:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a004d68:	d029      	beq.n	1a004dbe <__adddf3+0x24e>
1a004d6a:	ea94 0f05 	teq	r4, r5
1a004d6e:	bf08      	it	eq
1a004d70:	ea90 0f02 	teqeq	r0, r2
1a004d74:	d005      	beq.n	1a004d82 <__adddf3+0x212>
1a004d76:	ea54 0c00 	orrs.w	ip, r4, r0
1a004d7a:	bf04      	itt	eq
1a004d7c:	4619      	moveq	r1, r3
1a004d7e:	4610      	moveq	r0, r2
1a004d80:	bd30      	pop	{r4, r5, pc}
1a004d82:	ea91 0f03 	teq	r1, r3
1a004d86:	bf1e      	ittt	ne
1a004d88:	2100      	movne	r1, #0
1a004d8a:	2000      	movne	r0, #0
1a004d8c:	bd30      	popne	{r4, r5, pc}
1a004d8e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a004d92:	d105      	bne.n	1a004da0 <__adddf3+0x230>
1a004d94:	0040      	lsls	r0, r0, #1
1a004d96:	4149      	adcs	r1, r1
1a004d98:	bf28      	it	cs
1a004d9a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a004d9e:	bd30      	pop	{r4, r5, pc}
1a004da0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a004da4:	bf3c      	itt	cc
1a004da6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a004daa:	bd30      	popcc	{r4, r5, pc}
1a004dac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004db0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a004db4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004db8:	f04f 0000 	mov.w	r0, #0
1a004dbc:	bd30      	pop	{r4, r5, pc}
1a004dbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a004dc2:	bf1a      	itte	ne
1a004dc4:	4619      	movne	r1, r3
1a004dc6:	4610      	movne	r0, r2
1a004dc8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a004dcc:	bf1c      	itt	ne
1a004dce:	460b      	movne	r3, r1
1a004dd0:	4602      	movne	r2, r0
1a004dd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a004dd6:	bf06      	itte	eq
1a004dd8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a004ddc:	ea91 0f03 	teqeq	r1, r3
1a004de0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a004de4:	bd30      	pop	{r4, r5, pc}
1a004de6:	bf00      	nop

1a004de8 <__aeabi_ui2d>:
1a004de8:	f090 0f00 	teq	r0, #0
1a004dec:	bf04      	itt	eq
1a004dee:	2100      	moveq	r1, #0
1a004df0:	4770      	bxeq	lr
1a004df2:	b530      	push	{r4, r5, lr}
1a004df4:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004df8:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004dfc:	f04f 0500 	mov.w	r5, #0
1a004e00:	f04f 0100 	mov.w	r1, #0
1a004e04:	e750      	b.n	1a004ca8 <__adddf3+0x138>
1a004e06:	bf00      	nop

1a004e08 <__aeabi_i2d>:
1a004e08:	f090 0f00 	teq	r0, #0
1a004e0c:	bf04      	itt	eq
1a004e0e:	2100      	moveq	r1, #0
1a004e10:	4770      	bxeq	lr
1a004e12:	b530      	push	{r4, r5, lr}
1a004e14:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004e18:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004e1c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a004e20:	bf48      	it	mi
1a004e22:	4240      	negmi	r0, r0
1a004e24:	f04f 0100 	mov.w	r1, #0
1a004e28:	e73e      	b.n	1a004ca8 <__adddf3+0x138>
1a004e2a:	bf00      	nop

1a004e2c <__aeabi_f2d>:
1a004e2c:	0042      	lsls	r2, r0, #1
1a004e2e:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a004e32:	ea4f 0131 	mov.w	r1, r1, rrx
1a004e36:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a004e3a:	bf1f      	itttt	ne
1a004e3c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a004e40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a004e44:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a004e48:	4770      	bxne	lr
1a004e4a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a004e4e:	bf08      	it	eq
1a004e50:	4770      	bxeq	lr
1a004e52:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a004e56:	bf04      	itt	eq
1a004e58:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a004e5c:	4770      	bxeq	lr
1a004e5e:	b530      	push	{r4, r5, lr}
1a004e60:	f44f 7460 	mov.w	r4, #896	; 0x380
1a004e64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004e68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a004e6c:	e71c      	b.n	1a004ca8 <__adddf3+0x138>
1a004e6e:	bf00      	nop

1a004e70 <__aeabi_ul2d>:
1a004e70:	ea50 0201 	orrs.w	r2, r0, r1
1a004e74:	bf08      	it	eq
1a004e76:	4770      	bxeq	lr
1a004e78:	b530      	push	{r4, r5, lr}
1a004e7a:	f04f 0500 	mov.w	r5, #0
1a004e7e:	e00a      	b.n	1a004e96 <__aeabi_l2d+0x16>

1a004e80 <__aeabi_l2d>:
1a004e80:	ea50 0201 	orrs.w	r2, r0, r1
1a004e84:	bf08      	it	eq
1a004e86:	4770      	bxeq	lr
1a004e88:	b530      	push	{r4, r5, lr}
1a004e8a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a004e8e:	d502      	bpl.n	1a004e96 <__aeabi_l2d+0x16>
1a004e90:	4240      	negs	r0, r0
1a004e92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004e96:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004e9a:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004e9e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a004ea2:	f43f aed8 	beq.w	1a004c56 <__adddf3+0xe6>
1a004ea6:	f04f 0203 	mov.w	r2, #3
1a004eaa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004eae:	bf18      	it	ne
1a004eb0:	3203      	addne	r2, #3
1a004eb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004eb6:	bf18      	it	ne
1a004eb8:	3203      	addne	r2, #3
1a004eba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a004ebe:	f1c2 0320 	rsb	r3, r2, #32
1a004ec2:	fa00 fc03 	lsl.w	ip, r0, r3
1a004ec6:	fa20 f002 	lsr.w	r0, r0, r2
1a004eca:	fa01 fe03 	lsl.w	lr, r1, r3
1a004ece:	ea40 000e 	orr.w	r0, r0, lr
1a004ed2:	fa21 f102 	lsr.w	r1, r1, r2
1a004ed6:	4414      	add	r4, r2
1a004ed8:	e6bd      	b.n	1a004c56 <__adddf3+0xe6>
1a004eda:	bf00      	nop

1a004edc <__aeabi_dmul>:
1a004edc:	b570      	push	{r4, r5, r6, lr}
1a004ede:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a004ee2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a004ee6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a004eea:	bf1d      	ittte	ne
1a004eec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a004ef0:	ea94 0f0c 	teqne	r4, ip
1a004ef4:	ea95 0f0c 	teqne	r5, ip
1a004ef8:	f000 f8de 	bleq	1a0050b8 <__aeabi_dmul+0x1dc>
1a004efc:	442c      	add	r4, r5
1a004efe:	ea81 0603 	eor.w	r6, r1, r3
1a004f02:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a004f06:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a004f0a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a004f0e:	bf18      	it	ne
1a004f10:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a004f14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a004f1c:	d038      	beq.n	1a004f90 <__aeabi_dmul+0xb4>
1a004f1e:	fba0 ce02 	umull	ip, lr, r0, r2
1a004f22:	f04f 0500 	mov.w	r5, #0
1a004f26:	fbe1 e502 	umlal	lr, r5, r1, r2
1a004f2a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a004f2e:	fbe0 e503 	umlal	lr, r5, r0, r3
1a004f32:	f04f 0600 	mov.w	r6, #0
1a004f36:	fbe1 5603 	umlal	r5, r6, r1, r3
1a004f3a:	f09c 0f00 	teq	ip, #0
1a004f3e:	bf18      	it	ne
1a004f40:	f04e 0e01 	orrne.w	lr, lr, #1
1a004f44:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a004f48:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a004f4c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a004f50:	d204      	bcs.n	1a004f5c <__aeabi_dmul+0x80>
1a004f52:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a004f56:	416d      	adcs	r5, r5
1a004f58:	eb46 0606 	adc.w	r6, r6, r6
1a004f5c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a004f60:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a004f64:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a004f68:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a004f6c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a004f70:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a004f74:	bf88      	it	hi
1a004f76:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004f7a:	d81e      	bhi.n	1a004fba <__aeabi_dmul+0xde>
1a004f7c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a004f80:	bf08      	it	eq
1a004f82:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a004f86:	f150 0000 	adcs.w	r0, r0, #0
1a004f8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004f8e:	bd70      	pop	{r4, r5, r6, pc}
1a004f90:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a004f94:	ea46 0101 	orr.w	r1, r6, r1
1a004f98:	ea40 0002 	orr.w	r0, r0, r2
1a004f9c:	ea81 0103 	eor.w	r1, r1, r3
1a004fa0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a004fa4:	bfc2      	ittt	gt
1a004fa6:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004faa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a004fae:	bd70      	popgt	{r4, r5, r6, pc}
1a004fb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004fb4:	f04f 0e00 	mov.w	lr, #0
1a004fb8:	3c01      	subs	r4, #1
1a004fba:	f300 80ab 	bgt.w	1a005114 <__aeabi_dmul+0x238>
1a004fbe:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a004fc2:	bfde      	ittt	le
1a004fc4:	2000      	movle	r0, #0
1a004fc6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a004fca:	bd70      	pople	{r4, r5, r6, pc}
1a004fcc:	f1c4 0400 	rsb	r4, r4, #0
1a004fd0:	3c20      	subs	r4, #32
1a004fd2:	da35      	bge.n	1a005040 <__aeabi_dmul+0x164>
1a004fd4:	340c      	adds	r4, #12
1a004fd6:	dc1b      	bgt.n	1a005010 <__aeabi_dmul+0x134>
1a004fd8:	f104 0414 	add.w	r4, r4, #20
1a004fdc:	f1c4 0520 	rsb	r5, r4, #32
1a004fe0:	fa00 f305 	lsl.w	r3, r0, r5
1a004fe4:	fa20 f004 	lsr.w	r0, r0, r4
1a004fe8:	fa01 f205 	lsl.w	r2, r1, r5
1a004fec:	ea40 0002 	orr.w	r0, r0, r2
1a004ff0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a004ff4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a004ff8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a004ffc:	fa21 f604 	lsr.w	r6, r1, r4
1a005000:	eb42 0106 	adc.w	r1, r2, r6
1a005004:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a005008:	bf08      	it	eq
1a00500a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00500e:	bd70      	pop	{r4, r5, r6, pc}
1a005010:	f1c4 040c 	rsb	r4, r4, #12
1a005014:	f1c4 0520 	rsb	r5, r4, #32
1a005018:	fa00 f304 	lsl.w	r3, r0, r4
1a00501c:	fa20 f005 	lsr.w	r0, r0, r5
1a005020:	fa01 f204 	lsl.w	r2, r1, r4
1a005024:	ea40 0002 	orr.w	r0, r0, r2
1a005028:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a00502c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a005030:	f141 0100 	adc.w	r1, r1, #0
1a005034:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a005038:	bf08      	it	eq
1a00503a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00503e:	bd70      	pop	{r4, r5, r6, pc}
1a005040:	f1c4 0520 	rsb	r5, r4, #32
1a005044:	fa00 f205 	lsl.w	r2, r0, r5
1a005048:	ea4e 0e02 	orr.w	lr, lr, r2
1a00504c:	fa20 f304 	lsr.w	r3, r0, r4
1a005050:	fa01 f205 	lsl.w	r2, r1, r5
1a005054:	ea43 0302 	orr.w	r3, r3, r2
1a005058:	fa21 f004 	lsr.w	r0, r1, r4
1a00505c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005060:	fa21 f204 	lsr.w	r2, r1, r4
1a005064:	ea20 0002 	bic.w	r0, r0, r2
1a005068:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a00506c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a005070:	bf08      	it	eq
1a005072:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a005076:	bd70      	pop	{r4, r5, r6, pc}
1a005078:	f094 0f00 	teq	r4, #0
1a00507c:	d10f      	bne.n	1a00509e <__aeabi_dmul+0x1c2>
1a00507e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a005082:	0040      	lsls	r0, r0, #1
1a005084:	eb41 0101 	adc.w	r1, r1, r1
1a005088:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00508c:	bf08      	it	eq
1a00508e:	3c01      	subeq	r4, #1
1a005090:	d0f7      	beq.n	1a005082 <__aeabi_dmul+0x1a6>
1a005092:	ea41 0106 	orr.w	r1, r1, r6
1a005096:	f095 0f00 	teq	r5, #0
1a00509a:	bf18      	it	ne
1a00509c:	4770      	bxne	lr
1a00509e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a0050a2:	0052      	lsls	r2, r2, #1
1a0050a4:	eb43 0303 	adc.w	r3, r3, r3
1a0050a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a0050ac:	bf08      	it	eq
1a0050ae:	3d01      	subeq	r5, #1
1a0050b0:	d0f7      	beq.n	1a0050a2 <__aeabi_dmul+0x1c6>
1a0050b2:	ea43 0306 	orr.w	r3, r3, r6
1a0050b6:	4770      	bx	lr
1a0050b8:	ea94 0f0c 	teq	r4, ip
1a0050bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0050c0:	bf18      	it	ne
1a0050c2:	ea95 0f0c 	teqne	r5, ip
1a0050c6:	d00c      	beq.n	1a0050e2 <__aeabi_dmul+0x206>
1a0050c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0050cc:	bf18      	it	ne
1a0050ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0050d2:	d1d1      	bne.n	1a005078 <__aeabi_dmul+0x19c>
1a0050d4:	ea81 0103 	eor.w	r1, r1, r3
1a0050d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0050dc:	f04f 0000 	mov.w	r0, #0
1a0050e0:	bd70      	pop	{r4, r5, r6, pc}
1a0050e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0050e6:	bf06      	itte	eq
1a0050e8:	4610      	moveq	r0, r2
1a0050ea:	4619      	moveq	r1, r3
1a0050ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0050f0:	d019      	beq.n	1a005126 <__aeabi_dmul+0x24a>
1a0050f2:	ea94 0f0c 	teq	r4, ip
1a0050f6:	d102      	bne.n	1a0050fe <__aeabi_dmul+0x222>
1a0050f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a0050fc:	d113      	bne.n	1a005126 <__aeabi_dmul+0x24a>
1a0050fe:	ea95 0f0c 	teq	r5, ip
1a005102:	d105      	bne.n	1a005110 <__aeabi_dmul+0x234>
1a005104:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a005108:	bf1c      	itt	ne
1a00510a:	4610      	movne	r0, r2
1a00510c:	4619      	movne	r1, r3
1a00510e:	d10a      	bne.n	1a005126 <__aeabi_dmul+0x24a>
1a005110:	ea81 0103 	eor.w	r1, r1, r3
1a005114:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005118:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a00511c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a005120:	f04f 0000 	mov.w	r0, #0
1a005124:	bd70      	pop	{r4, r5, r6, pc}
1a005126:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a00512a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a00512e:	bd70      	pop	{r4, r5, r6, pc}

1a005130 <__aeabi_ddiv>:
1a005130:	b570      	push	{r4, r5, r6, lr}
1a005132:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a005136:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00513a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a00513e:	bf1d      	ittte	ne
1a005140:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a005144:	ea94 0f0c 	teqne	r4, ip
1a005148:	ea95 0f0c 	teqne	r5, ip
1a00514c:	f000 f8a7 	bleq	1a00529e <__aeabi_ddiv+0x16e>
1a005150:	eba4 0405 	sub.w	r4, r4, r5
1a005154:	ea81 0e03 	eor.w	lr, r1, r3
1a005158:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a00515c:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a005160:	f000 8088 	beq.w	1a005274 <__aeabi_ddiv+0x144>
1a005164:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a005168:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a00516c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a005170:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a005174:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a005178:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a00517c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a005180:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a005184:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a005188:	429d      	cmp	r5, r3
1a00518a:	bf08      	it	eq
1a00518c:	4296      	cmpeq	r6, r2
1a00518e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a005192:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a005196:	d202      	bcs.n	1a00519e <__aeabi_ddiv+0x6e>
1a005198:	085b      	lsrs	r3, r3, #1
1a00519a:	ea4f 0232 	mov.w	r2, r2, rrx
1a00519e:	1ab6      	subs	r6, r6, r2
1a0051a0:	eb65 0503 	sbc.w	r5, r5, r3
1a0051a4:	085b      	lsrs	r3, r3, #1
1a0051a6:	ea4f 0232 	mov.w	r2, r2, rrx
1a0051aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a0051ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a0051b2:	ebb6 0e02 	subs.w	lr, r6, r2
1a0051b6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0051ba:	bf22      	ittt	cs
1a0051bc:	1ab6      	subcs	r6, r6, r2
1a0051be:	4675      	movcs	r5, lr
1a0051c0:	ea40 000c 	orrcs.w	r0, r0, ip
1a0051c4:	085b      	lsrs	r3, r3, #1
1a0051c6:	ea4f 0232 	mov.w	r2, r2, rrx
1a0051ca:	ebb6 0e02 	subs.w	lr, r6, r2
1a0051ce:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0051d2:	bf22      	ittt	cs
1a0051d4:	1ab6      	subcs	r6, r6, r2
1a0051d6:	4675      	movcs	r5, lr
1a0051d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a0051dc:	085b      	lsrs	r3, r3, #1
1a0051de:	ea4f 0232 	mov.w	r2, r2, rrx
1a0051e2:	ebb6 0e02 	subs.w	lr, r6, r2
1a0051e6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0051ea:	bf22      	ittt	cs
1a0051ec:	1ab6      	subcs	r6, r6, r2
1a0051ee:	4675      	movcs	r5, lr
1a0051f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a0051f4:	085b      	lsrs	r3, r3, #1
1a0051f6:	ea4f 0232 	mov.w	r2, r2, rrx
1a0051fa:	ebb6 0e02 	subs.w	lr, r6, r2
1a0051fe:	eb75 0e03 	sbcs.w	lr, r5, r3
1a005202:	bf22      	ittt	cs
1a005204:	1ab6      	subcs	r6, r6, r2
1a005206:	4675      	movcs	r5, lr
1a005208:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a00520c:	ea55 0e06 	orrs.w	lr, r5, r6
1a005210:	d018      	beq.n	1a005244 <__aeabi_ddiv+0x114>
1a005212:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a005216:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a00521a:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a00521e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a005222:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a005226:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a00522a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a00522e:	d1c0      	bne.n	1a0051b2 <__aeabi_ddiv+0x82>
1a005230:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a005234:	d10b      	bne.n	1a00524e <__aeabi_ddiv+0x11e>
1a005236:	ea41 0100 	orr.w	r1, r1, r0
1a00523a:	f04f 0000 	mov.w	r0, #0
1a00523e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a005242:	e7b6      	b.n	1a0051b2 <__aeabi_ddiv+0x82>
1a005244:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a005248:	bf04      	itt	eq
1a00524a:	4301      	orreq	r1, r0
1a00524c:	2000      	moveq	r0, #0
1a00524e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a005252:	bf88      	it	hi
1a005254:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a005258:	f63f aeaf 	bhi.w	1a004fba <__aeabi_dmul+0xde>
1a00525c:	ebb5 0c03 	subs.w	ip, r5, r3
1a005260:	bf04      	itt	eq
1a005262:	ebb6 0c02 	subseq.w	ip, r6, r2
1a005266:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00526a:	f150 0000 	adcs.w	r0, r0, #0
1a00526e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a005272:	bd70      	pop	{r4, r5, r6, pc}
1a005274:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a005278:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a00527c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a005280:	bfc2      	ittt	gt
1a005282:	ebd4 050c 	rsbsgt	r5, r4, ip
1a005286:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a00528a:	bd70      	popgt	{r4, r5, r6, pc}
1a00528c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a005290:	f04f 0e00 	mov.w	lr, #0
1a005294:	3c01      	subs	r4, #1
1a005296:	e690      	b.n	1a004fba <__aeabi_dmul+0xde>
1a005298:	ea45 0e06 	orr.w	lr, r5, r6
1a00529c:	e68d      	b.n	1a004fba <__aeabi_dmul+0xde>
1a00529e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0052a2:	ea94 0f0c 	teq	r4, ip
1a0052a6:	bf08      	it	eq
1a0052a8:	ea95 0f0c 	teqeq	r5, ip
1a0052ac:	f43f af3b 	beq.w	1a005126 <__aeabi_dmul+0x24a>
1a0052b0:	ea94 0f0c 	teq	r4, ip
1a0052b4:	d10a      	bne.n	1a0052cc <__aeabi_ddiv+0x19c>
1a0052b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0052ba:	f47f af34 	bne.w	1a005126 <__aeabi_dmul+0x24a>
1a0052be:	ea95 0f0c 	teq	r5, ip
1a0052c2:	f47f af25 	bne.w	1a005110 <__aeabi_dmul+0x234>
1a0052c6:	4610      	mov	r0, r2
1a0052c8:	4619      	mov	r1, r3
1a0052ca:	e72c      	b.n	1a005126 <__aeabi_dmul+0x24a>
1a0052cc:	ea95 0f0c 	teq	r5, ip
1a0052d0:	d106      	bne.n	1a0052e0 <__aeabi_ddiv+0x1b0>
1a0052d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0052d6:	f43f aefd 	beq.w	1a0050d4 <__aeabi_dmul+0x1f8>
1a0052da:	4610      	mov	r0, r2
1a0052dc:	4619      	mov	r1, r3
1a0052de:	e722      	b.n	1a005126 <__aeabi_dmul+0x24a>
1a0052e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0052e4:	bf18      	it	ne
1a0052e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0052ea:	f47f aec5 	bne.w	1a005078 <__aeabi_dmul+0x19c>
1a0052ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a0052f2:	f47f af0d 	bne.w	1a005110 <__aeabi_dmul+0x234>
1a0052f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a0052fa:	f47f aeeb 	bne.w	1a0050d4 <__aeabi_dmul+0x1f8>
1a0052fe:	e712      	b.n	1a005126 <__aeabi_dmul+0x24a>

1a005300 <__gedf2>:
1a005300:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a005304:	e006      	b.n	1a005314 <__cmpdf2+0x4>
1a005306:	bf00      	nop

1a005308 <__ledf2>:
1a005308:	f04f 0c01 	mov.w	ip, #1
1a00530c:	e002      	b.n	1a005314 <__cmpdf2+0x4>
1a00530e:	bf00      	nop

1a005310 <__cmpdf2>:
1a005310:	f04f 0c01 	mov.w	ip, #1
1a005314:	f84d cd04 	str.w	ip, [sp, #-4]!
1a005318:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a00531c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a005320:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a005324:	bf18      	it	ne
1a005326:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a00532a:	d01b      	beq.n	1a005364 <__cmpdf2+0x54>
1a00532c:	b001      	add	sp, #4
1a00532e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a005332:	bf0c      	ite	eq
1a005334:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a005338:	ea91 0f03 	teqne	r1, r3
1a00533c:	bf02      	ittt	eq
1a00533e:	ea90 0f02 	teqeq	r0, r2
1a005342:	2000      	moveq	r0, #0
1a005344:	4770      	bxeq	lr
1a005346:	f110 0f00 	cmn.w	r0, #0
1a00534a:	ea91 0f03 	teq	r1, r3
1a00534e:	bf58      	it	pl
1a005350:	4299      	cmppl	r1, r3
1a005352:	bf08      	it	eq
1a005354:	4290      	cmpeq	r0, r2
1a005356:	bf2c      	ite	cs
1a005358:	17d8      	asrcs	r0, r3, #31
1a00535a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a00535e:	f040 0001 	orr.w	r0, r0, #1
1a005362:	4770      	bx	lr
1a005364:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a005368:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00536c:	d102      	bne.n	1a005374 <__cmpdf2+0x64>
1a00536e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a005372:	d107      	bne.n	1a005384 <__cmpdf2+0x74>
1a005374:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a005378:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00537c:	d1d6      	bne.n	1a00532c <__cmpdf2+0x1c>
1a00537e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a005382:	d0d3      	beq.n	1a00532c <__cmpdf2+0x1c>
1a005384:	f85d 0b04 	ldr.w	r0, [sp], #4
1a005388:	4770      	bx	lr
1a00538a:	bf00      	nop

1a00538c <__aeabi_cdrcmple>:
1a00538c:	4684      	mov	ip, r0
1a00538e:	4610      	mov	r0, r2
1a005390:	4662      	mov	r2, ip
1a005392:	468c      	mov	ip, r1
1a005394:	4619      	mov	r1, r3
1a005396:	4663      	mov	r3, ip
1a005398:	e000      	b.n	1a00539c <__aeabi_cdcmpeq>
1a00539a:	bf00      	nop

1a00539c <__aeabi_cdcmpeq>:
1a00539c:	b501      	push	{r0, lr}
1a00539e:	f7ff ffb7 	bl	1a005310 <__cmpdf2>
1a0053a2:	2800      	cmp	r0, #0
1a0053a4:	bf48      	it	mi
1a0053a6:	f110 0f00 	cmnmi.w	r0, #0
1a0053aa:	bd01      	pop	{r0, pc}

1a0053ac <__aeabi_dcmpeq>:
1a0053ac:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0053b0:	f7ff fff4 	bl	1a00539c <__aeabi_cdcmpeq>
1a0053b4:	bf0c      	ite	eq
1a0053b6:	2001      	moveq	r0, #1
1a0053b8:	2000      	movne	r0, #0
1a0053ba:	f85d fb08 	ldr.w	pc, [sp], #8
1a0053be:	bf00      	nop

1a0053c0 <__aeabi_dcmplt>:
1a0053c0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0053c4:	f7ff ffea 	bl	1a00539c <__aeabi_cdcmpeq>
1a0053c8:	bf34      	ite	cc
1a0053ca:	2001      	movcc	r0, #1
1a0053cc:	2000      	movcs	r0, #0
1a0053ce:	f85d fb08 	ldr.w	pc, [sp], #8
1a0053d2:	bf00      	nop

1a0053d4 <__aeabi_dcmple>:
1a0053d4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0053d8:	f7ff ffe0 	bl	1a00539c <__aeabi_cdcmpeq>
1a0053dc:	bf94      	ite	ls
1a0053de:	2001      	movls	r0, #1
1a0053e0:	2000      	movhi	r0, #0
1a0053e2:	f85d fb08 	ldr.w	pc, [sp], #8
1a0053e6:	bf00      	nop

1a0053e8 <__aeabi_dcmpge>:
1a0053e8:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0053ec:	f7ff ffce 	bl	1a00538c <__aeabi_cdrcmple>
1a0053f0:	bf94      	ite	ls
1a0053f2:	2001      	movls	r0, #1
1a0053f4:	2000      	movhi	r0, #0
1a0053f6:	f85d fb08 	ldr.w	pc, [sp], #8
1a0053fa:	bf00      	nop

1a0053fc <__aeabi_dcmpgt>:
1a0053fc:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005400:	f7ff ffc4 	bl	1a00538c <__aeabi_cdrcmple>
1a005404:	bf34      	ite	cc
1a005406:	2001      	movcc	r0, #1
1a005408:	2000      	movcs	r0, #0
1a00540a:	f85d fb08 	ldr.w	pc, [sp], #8
1a00540e:	bf00      	nop

1a005410 <__aeabi_d2iz>:
1a005410:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a005414:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a005418:	d215      	bcs.n	1a005446 <__aeabi_d2iz+0x36>
1a00541a:	d511      	bpl.n	1a005440 <__aeabi_d2iz+0x30>
1a00541c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a005420:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a005424:	d912      	bls.n	1a00544c <__aeabi_d2iz+0x3c>
1a005426:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00542a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a00542e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a005432:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a005436:	fa23 f002 	lsr.w	r0, r3, r2
1a00543a:	bf18      	it	ne
1a00543c:	4240      	negne	r0, r0
1a00543e:	4770      	bx	lr
1a005440:	f04f 0000 	mov.w	r0, #0
1a005444:	4770      	bx	lr
1a005446:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a00544a:	d105      	bne.n	1a005458 <__aeabi_d2iz+0x48>
1a00544c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a005450:	bf08      	it	eq
1a005452:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a005456:	4770      	bx	lr
1a005458:	f04f 0000 	mov.w	r0, #0
1a00545c:	4770      	bx	lr
1a00545e:	bf00      	nop

1a005460 <__aeabi_d2f>:
1a005460:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a005464:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a005468:	bf24      	itt	cs
1a00546a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a00546e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a005472:	d90d      	bls.n	1a005490 <__aeabi_d2f+0x30>
1a005474:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a005478:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a00547c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a005480:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a005484:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a005488:	bf08      	it	eq
1a00548a:	f020 0001 	biceq.w	r0, r0, #1
1a00548e:	4770      	bx	lr
1a005490:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a005494:	d121      	bne.n	1a0054da <__aeabi_d2f+0x7a>
1a005496:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a00549a:	bfbc      	itt	lt
1a00549c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a0054a0:	4770      	bxlt	lr
1a0054a2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0054a6:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a0054aa:	f1c2 0218 	rsb	r2, r2, #24
1a0054ae:	f1c2 0c20 	rsb	ip, r2, #32
1a0054b2:	fa10 f30c 	lsls.w	r3, r0, ip
1a0054b6:	fa20 f002 	lsr.w	r0, r0, r2
1a0054ba:	bf18      	it	ne
1a0054bc:	f040 0001 	orrne.w	r0, r0, #1
1a0054c0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a0054c4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a0054c8:	fa03 fc0c 	lsl.w	ip, r3, ip
1a0054cc:	ea40 000c 	orr.w	r0, r0, ip
1a0054d0:	fa23 f302 	lsr.w	r3, r3, r2
1a0054d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a0054d8:	e7cc      	b.n	1a005474 <__aeabi_d2f+0x14>
1a0054da:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a0054de:	d107      	bne.n	1a0054f0 <__aeabi_d2f+0x90>
1a0054e0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a0054e4:	bf1e      	ittt	ne
1a0054e6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a0054ea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a0054ee:	4770      	bxne	lr
1a0054f0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a0054f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a0054f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a0054fc:	4770      	bx	lr
1a0054fe:	bf00      	nop

1a005500 <__aeabi_uldivmod>:
1a005500:	b953      	cbnz	r3, 1a005518 <__aeabi_uldivmod+0x18>
1a005502:	b94a      	cbnz	r2, 1a005518 <__aeabi_uldivmod+0x18>
1a005504:	2900      	cmp	r1, #0
1a005506:	bf08      	it	eq
1a005508:	2800      	cmpeq	r0, #0
1a00550a:	bf1c      	itt	ne
1a00550c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a005510:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a005514:	f000 b974 	b.w	1a005800 <__aeabi_idiv0>
1a005518:	f1ad 0c08 	sub.w	ip, sp, #8
1a00551c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a005520:	f000 f806 	bl	1a005530 <__udivmoddi4>
1a005524:	f8dd e004 	ldr.w	lr, [sp, #4]
1a005528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00552c:	b004      	add	sp, #16
1a00552e:	4770      	bx	lr

1a005530 <__udivmoddi4>:
1a005530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a005534:	9e08      	ldr	r6, [sp, #32]
1a005536:	4604      	mov	r4, r0
1a005538:	4688      	mov	r8, r1
1a00553a:	2b00      	cmp	r3, #0
1a00553c:	f040 8085 	bne.w	1a00564a <__udivmoddi4+0x11a>
1a005540:	428a      	cmp	r2, r1
1a005542:	4615      	mov	r5, r2
1a005544:	d948      	bls.n	1a0055d8 <__udivmoddi4+0xa8>
1a005546:	fab2 f282 	clz	r2, r2
1a00554a:	b14a      	cbz	r2, 1a005560 <__udivmoddi4+0x30>
1a00554c:	f1c2 0720 	rsb	r7, r2, #32
1a005550:	fa01 f302 	lsl.w	r3, r1, r2
1a005554:	fa20 f707 	lsr.w	r7, r0, r7
1a005558:	4095      	lsls	r5, r2
1a00555a:	ea47 0803 	orr.w	r8, r7, r3
1a00555e:	4094      	lsls	r4, r2
1a005560:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005564:	0c23      	lsrs	r3, r4, #16
1a005566:	fbb8 f7fe 	udiv	r7, r8, lr
1a00556a:	fa1f fc85 	uxth.w	ip, r5
1a00556e:	fb0e 8817 	mls	r8, lr, r7, r8
1a005572:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a005576:	fb07 f10c 	mul.w	r1, r7, ip
1a00557a:	4299      	cmp	r1, r3
1a00557c:	d909      	bls.n	1a005592 <__udivmoddi4+0x62>
1a00557e:	18eb      	adds	r3, r5, r3
1a005580:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a005584:	f080 80e3 	bcs.w	1a00574e <__udivmoddi4+0x21e>
1a005588:	4299      	cmp	r1, r3
1a00558a:	f240 80e0 	bls.w	1a00574e <__udivmoddi4+0x21e>
1a00558e:	3f02      	subs	r7, #2
1a005590:	442b      	add	r3, r5
1a005592:	1a5b      	subs	r3, r3, r1
1a005594:	b2a4      	uxth	r4, r4
1a005596:	fbb3 f0fe 	udiv	r0, r3, lr
1a00559a:	fb0e 3310 	mls	r3, lr, r0, r3
1a00559e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0055a2:	fb00 fc0c 	mul.w	ip, r0, ip
1a0055a6:	45a4      	cmp	ip, r4
1a0055a8:	d909      	bls.n	1a0055be <__udivmoddi4+0x8e>
1a0055aa:	192c      	adds	r4, r5, r4
1a0055ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0055b0:	f080 80cb 	bcs.w	1a00574a <__udivmoddi4+0x21a>
1a0055b4:	45a4      	cmp	ip, r4
1a0055b6:	f240 80c8 	bls.w	1a00574a <__udivmoddi4+0x21a>
1a0055ba:	3802      	subs	r0, #2
1a0055bc:	442c      	add	r4, r5
1a0055be:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0055c2:	eba4 040c 	sub.w	r4, r4, ip
1a0055c6:	2700      	movs	r7, #0
1a0055c8:	b11e      	cbz	r6, 1a0055d2 <__udivmoddi4+0xa2>
1a0055ca:	40d4      	lsrs	r4, r2
1a0055cc:	2300      	movs	r3, #0
1a0055ce:	e9c6 4300 	strd	r4, r3, [r6]
1a0055d2:	4639      	mov	r1, r7
1a0055d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0055d8:	2a00      	cmp	r2, #0
1a0055da:	d053      	beq.n	1a005684 <__udivmoddi4+0x154>
1a0055dc:	fab2 f282 	clz	r2, r2
1a0055e0:	2a00      	cmp	r2, #0
1a0055e2:	f040 80b6 	bne.w	1a005752 <__udivmoddi4+0x222>
1a0055e6:	1b49      	subs	r1, r1, r5
1a0055e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0055ec:	fa1f f885 	uxth.w	r8, r5
1a0055f0:	2701      	movs	r7, #1
1a0055f2:	fbb1 fcfe 	udiv	ip, r1, lr
1a0055f6:	0c23      	lsrs	r3, r4, #16
1a0055f8:	fb0e 111c 	mls	r1, lr, ip, r1
1a0055fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a005600:	fb08 f10c 	mul.w	r1, r8, ip
1a005604:	4299      	cmp	r1, r3
1a005606:	d907      	bls.n	1a005618 <__udivmoddi4+0xe8>
1a005608:	18eb      	adds	r3, r5, r3
1a00560a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00560e:	d202      	bcs.n	1a005616 <__udivmoddi4+0xe6>
1a005610:	4299      	cmp	r1, r3
1a005612:	f200 80ec 	bhi.w	1a0057ee <__udivmoddi4+0x2be>
1a005616:	4684      	mov	ip, r0
1a005618:	1a59      	subs	r1, r3, r1
1a00561a:	b2a3      	uxth	r3, r4
1a00561c:	fbb1 f0fe 	udiv	r0, r1, lr
1a005620:	fb0e 1410 	mls	r4, lr, r0, r1
1a005624:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a005628:	fb08 f800 	mul.w	r8, r8, r0
1a00562c:	45a0      	cmp	r8, r4
1a00562e:	d907      	bls.n	1a005640 <__udivmoddi4+0x110>
1a005630:	192c      	adds	r4, r5, r4
1a005632:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005636:	d202      	bcs.n	1a00563e <__udivmoddi4+0x10e>
1a005638:	45a0      	cmp	r8, r4
1a00563a:	f200 80dc 	bhi.w	1a0057f6 <__udivmoddi4+0x2c6>
1a00563e:	4618      	mov	r0, r3
1a005640:	eba4 0408 	sub.w	r4, r4, r8
1a005644:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a005648:	e7be      	b.n	1a0055c8 <__udivmoddi4+0x98>
1a00564a:	428b      	cmp	r3, r1
1a00564c:	d908      	bls.n	1a005660 <__udivmoddi4+0x130>
1a00564e:	2e00      	cmp	r6, #0
1a005650:	d078      	beq.n	1a005744 <__udivmoddi4+0x214>
1a005652:	2700      	movs	r7, #0
1a005654:	e9c6 0100 	strd	r0, r1, [r6]
1a005658:	4638      	mov	r0, r7
1a00565a:	4639      	mov	r1, r7
1a00565c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005660:	fab3 f783 	clz	r7, r3
1a005664:	b97f      	cbnz	r7, 1a005686 <__udivmoddi4+0x156>
1a005666:	428b      	cmp	r3, r1
1a005668:	d302      	bcc.n	1a005670 <__udivmoddi4+0x140>
1a00566a:	4282      	cmp	r2, r0
1a00566c:	f200 80bd 	bhi.w	1a0057ea <__udivmoddi4+0x2ba>
1a005670:	1a84      	subs	r4, r0, r2
1a005672:	eb61 0303 	sbc.w	r3, r1, r3
1a005676:	2001      	movs	r0, #1
1a005678:	4698      	mov	r8, r3
1a00567a:	2e00      	cmp	r6, #0
1a00567c:	d0a9      	beq.n	1a0055d2 <__udivmoddi4+0xa2>
1a00567e:	e9c6 4800 	strd	r4, r8, [r6]
1a005682:	e7a6      	b.n	1a0055d2 <__udivmoddi4+0xa2>
1a005684:	deff      	udf	#255	; 0xff
1a005686:	f1c7 0520 	rsb	r5, r7, #32
1a00568a:	40bb      	lsls	r3, r7
1a00568c:	fa22 fc05 	lsr.w	ip, r2, r5
1a005690:	ea4c 0c03 	orr.w	ip, ip, r3
1a005694:	fa01 f407 	lsl.w	r4, r1, r7
1a005698:	fa20 f805 	lsr.w	r8, r0, r5
1a00569c:	fa21 f305 	lsr.w	r3, r1, r5
1a0056a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a0056a4:	ea48 0404 	orr.w	r4, r8, r4
1a0056a8:	fbb3 f9fe 	udiv	r9, r3, lr
1a0056ac:	0c21      	lsrs	r1, r4, #16
1a0056ae:	fb0e 3319 	mls	r3, lr, r9, r3
1a0056b2:	fa1f f88c 	uxth.w	r8, ip
1a0056b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0056ba:	fb09 fa08 	mul.w	sl, r9, r8
1a0056be:	459a      	cmp	sl, r3
1a0056c0:	fa02 f207 	lsl.w	r2, r2, r7
1a0056c4:	fa00 f107 	lsl.w	r1, r0, r7
1a0056c8:	d90b      	bls.n	1a0056e2 <__udivmoddi4+0x1b2>
1a0056ca:	eb1c 0303 	adds.w	r3, ip, r3
1a0056ce:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0056d2:	f080 8088 	bcs.w	1a0057e6 <__udivmoddi4+0x2b6>
1a0056d6:	459a      	cmp	sl, r3
1a0056d8:	f240 8085 	bls.w	1a0057e6 <__udivmoddi4+0x2b6>
1a0056dc:	f1a9 0902 	sub.w	r9, r9, #2
1a0056e0:	4463      	add	r3, ip
1a0056e2:	eba3 030a 	sub.w	r3, r3, sl
1a0056e6:	b2a4      	uxth	r4, r4
1a0056e8:	fbb3 f0fe 	udiv	r0, r3, lr
1a0056ec:	fb0e 3310 	mls	r3, lr, r0, r3
1a0056f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0056f4:	fb00 f808 	mul.w	r8, r0, r8
1a0056f8:	45a0      	cmp	r8, r4
1a0056fa:	d908      	bls.n	1a00570e <__udivmoddi4+0x1de>
1a0056fc:	eb1c 0404 	adds.w	r4, ip, r4
1a005700:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005704:	d26b      	bcs.n	1a0057de <__udivmoddi4+0x2ae>
1a005706:	45a0      	cmp	r8, r4
1a005708:	d969      	bls.n	1a0057de <__udivmoddi4+0x2ae>
1a00570a:	3802      	subs	r0, #2
1a00570c:	4464      	add	r4, ip
1a00570e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a005712:	eba4 0408 	sub.w	r4, r4, r8
1a005716:	fba0 8902 	umull	r8, r9, r0, r2
1a00571a:	454c      	cmp	r4, r9
1a00571c:	46c6      	mov	lr, r8
1a00571e:	464b      	mov	r3, r9
1a005720:	d354      	bcc.n	1a0057cc <__udivmoddi4+0x29c>
1a005722:	d051      	beq.n	1a0057c8 <__udivmoddi4+0x298>
1a005724:	2e00      	cmp	r6, #0
1a005726:	d069      	beq.n	1a0057fc <__udivmoddi4+0x2cc>
1a005728:	ebb1 020e 	subs.w	r2, r1, lr
1a00572c:	eb64 0403 	sbc.w	r4, r4, r3
1a005730:	fa04 f505 	lsl.w	r5, r4, r5
1a005734:	fa22 f307 	lsr.w	r3, r2, r7
1a005738:	40fc      	lsrs	r4, r7
1a00573a:	431d      	orrs	r5, r3
1a00573c:	e9c6 5400 	strd	r5, r4, [r6]
1a005740:	2700      	movs	r7, #0
1a005742:	e746      	b.n	1a0055d2 <__udivmoddi4+0xa2>
1a005744:	4637      	mov	r7, r6
1a005746:	4630      	mov	r0, r6
1a005748:	e743      	b.n	1a0055d2 <__udivmoddi4+0xa2>
1a00574a:	4618      	mov	r0, r3
1a00574c:	e737      	b.n	1a0055be <__udivmoddi4+0x8e>
1a00574e:	4607      	mov	r7, r0
1a005750:	e71f      	b.n	1a005592 <__udivmoddi4+0x62>
1a005752:	f1c2 0320 	rsb	r3, r2, #32
1a005756:	fa20 f703 	lsr.w	r7, r0, r3
1a00575a:	4095      	lsls	r5, r2
1a00575c:	fa01 f002 	lsl.w	r0, r1, r2
1a005760:	fa21 f303 	lsr.w	r3, r1, r3
1a005764:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005768:	4338      	orrs	r0, r7
1a00576a:	0c01      	lsrs	r1, r0, #16
1a00576c:	fbb3 f7fe 	udiv	r7, r3, lr
1a005770:	fa1f f885 	uxth.w	r8, r5
1a005774:	fb0e 3317 	mls	r3, lr, r7, r3
1a005778:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00577c:	fb07 f308 	mul.w	r3, r7, r8
1a005780:	428b      	cmp	r3, r1
1a005782:	fa04 f402 	lsl.w	r4, r4, r2
1a005786:	d907      	bls.n	1a005798 <__udivmoddi4+0x268>
1a005788:	1869      	adds	r1, r5, r1
1a00578a:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00578e:	d228      	bcs.n	1a0057e2 <__udivmoddi4+0x2b2>
1a005790:	428b      	cmp	r3, r1
1a005792:	d926      	bls.n	1a0057e2 <__udivmoddi4+0x2b2>
1a005794:	3f02      	subs	r7, #2
1a005796:	4429      	add	r1, r5
1a005798:	1acb      	subs	r3, r1, r3
1a00579a:	b281      	uxth	r1, r0
1a00579c:	fbb3 f0fe 	udiv	r0, r3, lr
1a0057a0:	fb0e 3310 	mls	r3, lr, r0, r3
1a0057a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0057a8:	fb00 f308 	mul.w	r3, r0, r8
1a0057ac:	428b      	cmp	r3, r1
1a0057ae:	d907      	bls.n	1a0057c0 <__udivmoddi4+0x290>
1a0057b0:	1869      	adds	r1, r5, r1
1a0057b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0057b6:	d210      	bcs.n	1a0057da <__udivmoddi4+0x2aa>
1a0057b8:	428b      	cmp	r3, r1
1a0057ba:	d90e      	bls.n	1a0057da <__udivmoddi4+0x2aa>
1a0057bc:	3802      	subs	r0, #2
1a0057be:	4429      	add	r1, r5
1a0057c0:	1ac9      	subs	r1, r1, r3
1a0057c2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0057c6:	e714      	b.n	1a0055f2 <__udivmoddi4+0xc2>
1a0057c8:	4541      	cmp	r1, r8
1a0057ca:	d2ab      	bcs.n	1a005724 <__udivmoddi4+0x1f4>
1a0057cc:	ebb8 0e02 	subs.w	lr, r8, r2
1a0057d0:	eb69 020c 	sbc.w	r2, r9, ip
1a0057d4:	3801      	subs	r0, #1
1a0057d6:	4613      	mov	r3, r2
1a0057d8:	e7a4      	b.n	1a005724 <__udivmoddi4+0x1f4>
1a0057da:	4660      	mov	r0, ip
1a0057dc:	e7f0      	b.n	1a0057c0 <__udivmoddi4+0x290>
1a0057de:	4618      	mov	r0, r3
1a0057e0:	e795      	b.n	1a00570e <__udivmoddi4+0x1de>
1a0057e2:	4667      	mov	r7, ip
1a0057e4:	e7d8      	b.n	1a005798 <__udivmoddi4+0x268>
1a0057e6:	4681      	mov	r9, r0
1a0057e8:	e77b      	b.n	1a0056e2 <__udivmoddi4+0x1b2>
1a0057ea:	4638      	mov	r0, r7
1a0057ec:	e745      	b.n	1a00567a <__udivmoddi4+0x14a>
1a0057ee:	f1ac 0c02 	sub.w	ip, ip, #2
1a0057f2:	442b      	add	r3, r5
1a0057f4:	e710      	b.n	1a005618 <__udivmoddi4+0xe8>
1a0057f6:	3802      	subs	r0, #2
1a0057f8:	442c      	add	r4, r5
1a0057fa:	e721      	b.n	1a005640 <__udivmoddi4+0x110>
1a0057fc:	4637      	mov	r7, r6
1a0057fe:	e6e8      	b.n	1a0055d2 <__udivmoddi4+0xa2>

1a005800 <__aeabi_idiv0>:
1a005800:	4770      	bx	lr
1a005802:	bf00      	nop

1a005804 <__sflush_r>:
1a005804:	898a      	ldrh	r2, [r1, #12]
1a005806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00580a:	4605      	mov	r5, r0
1a00580c:	0710      	lsls	r0, r2, #28
1a00580e:	460c      	mov	r4, r1
1a005810:	d458      	bmi.n	1a0058c4 <__sflush_r+0xc0>
1a005812:	684b      	ldr	r3, [r1, #4]
1a005814:	2b00      	cmp	r3, #0
1a005816:	dc05      	bgt.n	1a005824 <__sflush_r+0x20>
1a005818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a00581a:	2b00      	cmp	r3, #0
1a00581c:	dc02      	bgt.n	1a005824 <__sflush_r+0x20>
1a00581e:	2000      	movs	r0, #0
1a005820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a005826:	2e00      	cmp	r6, #0
1a005828:	d0f9      	beq.n	1a00581e <__sflush_r+0x1a>
1a00582a:	2300      	movs	r3, #0
1a00582c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a005830:	682f      	ldr	r7, [r5, #0]
1a005832:	602b      	str	r3, [r5, #0]
1a005834:	d032      	beq.n	1a00589c <__sflush_r+0x98>
1a005836:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a005838:	89a3      	ldrh	r3, [r4, #12]
1a00583a:	075a      	lsls	r2, r3, #29
1a00583c:	d505      	bpl.n	1a00584a <__sflush_r+0x46>
1a00583e:	6863      	ldr	r3, [r4, #4]
1a005840:	1ac0      	subs	r0, r0, r3
1a005842:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a005844:	b10b      	cbz	r3, 1a00584a <__sflush_r+0x46>
1a005846:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a005848:	1ac0      	subs	r0, r0, r3
1a00584a:	2300      	movs	r3, #0
1a00584c:	4602      	mov	r2, r0
1a00584e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a005850:	6a21      	ldr	r1, [r4, #32]
1a005852:	4628      	mov	r0, r5
1a005854:	47b0      	blx	r6
1a005856:	1c43      	adds	r3, r0, #1
1a005858:	89a3      	ldrh	r3, [r4, #12]
1a00585a:	d106      	bne.n	1a00586a <__sflush_r+0x66>
1a00585c:	6829      	ldr	r1, [r5, #0]
1a00585e:	291d      	cmp	r1, #29
1a005860:	d849      	bhi.n	1a0058f6 <__sflush_r+0xf2>
1a005862:	4a2a      	ldr	r2, [pc, #168]	; (1a00590c <__sflush_r+0x108>)
1a005864:	40ca      	lsrs	r2, r1
1a005866:	07d6      	lsls	r6, r2, #31
1a005868:	d545      	bpl.n	1a0058f6 <__sflush_r+0xf2>
1a00586a:	2200      	movs	r2, #0
1a00586c:	6062      	str	r2, [r4, #4]
1a00586e:	04d9      	lsls	r1, r3, #19
1a005870:	6922      	ldr	r2, [r4, #16]
1a005872:	6022      	str	r2, [r4, #0]
1a005874:	d504      	bpl.n	1a005880 <__sflush_r+0x7c>
1a005876:	1c42      	adds	r2, r0, #1
1a005878:	d101      	bne.n	1a00587e <__sflush_r+0x7a>
1a00587a:	682b      	ldr	r3, [r5, #0]
1a00587c:	b903      	cbnz	r3, 1a005880 <__sflush_r+0x7c>
1a00587e:	6560      	str	r0, [r4, #84]	; 0x54
1a005880:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a005882:	602f      	str	r7, [r5, #0]
1a005884:	2900      	cmp	r1, #0
1a005886:	d0ca      	beq.n	1a00581e <__sflush_r+0x1a>
1a005888:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00588c:	4299      	cmp	r1, r3
1a00588e:	d002      	beq.n	1a005896 <__sflush_r+0x92>
1a005890:	4628      	mov	r0, r5
1a005892:	f000 f9bd 	bl	1a005c10 <_free_r>
1a005896:	2000      	movs	r0, #0
1a005898:	6360      	str	r0, [r4, #52]	; 0x34
1a00589a:	e7c1      	b.n	1a005820 <__sflush_r+0x1c>
1a00589c:	6a21      	ldr	r1, [r4, #32]
1a00589e:	2301      	movs	r3, #1
1a0058a0:	4628      	mov	r0, r5
1a0058a2:	47b0      	blx	r6
1a0058a4:	1c41      	adds	r1, r0, #1
1a0058a6:	d1c7      	bne.n	1a005838 <__sflush_r+0x34>
1a0058a8:	682b      	ldr	r3, [r5, #0]
1a0058aa:	2b00      	cmp	r3, #0
1a0058ac:	d0c4      	beq.n	1a005838 <__sflush_r+0x34>
1a0058ae:	2b1d      	cmp	r3, #29
1a0058b0:	d001      	beq.n	1a0058b6 <__sflush_r+0xb2>
1a0058b2:	2b16      	cmp	r3, #22
1a0058b4:	d101      	bne.n	1a0058ba <__sflush_r+0xb6>
1a0058b6:	602f      	str	r7, [r5, #0]
1a0058b8:	e7b1      	b.n	1a00581e <__sflush_r+0x1a>
1a0058ba:	89a3      	ldrh	r3, [r4, #12]
1a0058bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0058c0:	81a3      	strh	r3, [r4, #12]
1a0058c2:	e7ad      	b.n	1a005820 <__sflush_r+0x1c>
1a0058c4:	690f      	ldr	r7, [r1, #16]
1a0058c6:	2f00      	cmp	r7, #0
1a0058c8:	d0a9      	beq.n	1a00581e <__sflush_r+0x1a>
1a0058ca:	0793      	lsls	r3, r2, #30
1a0058cc:	680e      	ldr	r6, [r1, #0]
1a0058ce:	bf08      	it	eq
1a0058d0:	694b      	ldreq	r3, [r1, #20]
1a0058d2:	600f      	str	r7, [r1, #0]
1a0058d4:	bf18      	it	ne
1a0058d6:	2300      	movne	r3, #0
1a0058d8:	eba6 0807 	sub.w	r8, r6, r7
1a0058dc:	608b      	str	r3, [r1, #8]
1a0058de:	f1b8 0f00 	cmp.w	r8, #0
1a0058e2:	dd9c      	ble.n	1a00581e <__sflush_r+0x1a>
1a0058e4:	4643      	mov	r3, r8
1a0058e6:	463a      	mov	r2, r7
1a0058e8:	6a21      	ldr	r1, [r4, #32]
1a0058ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a0058ec:	4628      	mov	r0, r5
1a0058ee:	47b0      	blx	r6
1a0058f0:	2800      	cmp	r0, #0
1a0058f2:	dc06      	bgt.n	1a005902 <__sflush_r+0xfe>
1a0058f4:	89a3      	ldrh	r3, [r4, #12]
1a0058f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0058fa:	81a3      	strh	r3, [r4, #12]
1a0058fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005900:	e78e      	b.n	1a005820 <__sflush_r+0x1c>
1a005902:	4407      	add	r7, r0
1a005904:	eba8 0800 	sub.w	r8, r8, r0
1a005908:	e7e9      	b.n	1a0058de <__sflush_r+0xda>
1a00590a:	bf00      	nop
1a00590c:	20400001 	.word	0x20400001

1a005910 <_fflush_r>:
1a005910:	b538      	push	{r3, r4, r5, lr}
1a005912:	690b      	ldr	r3, [r1, #16]
1a005914:	4605      	mov	r5, r0
1a005916:	460c      	mov	r4, r1
1a005918:	b913      	cbnz	r3, 1a005920 <_fflush_r+0x10>
1a00591a:	2500      	movs	r5, #0
1a00591c:	4628      	mov	r0, r5
1a00591e:	bd38      	pop	{r3, r4, r5, pc}
1a005920:	b118      	cbz	r0, 1a00592a <_fflush_r+0x1a>
1a005922:	6983      	ldr	r3, [r0, #24]
1a005924:	b90b      	cbnz	r3, 1a00592a <_fflush_r+0x1a>
1a005926:	f000 f899 	bl	1a005a5c <__sinit>
1a00592a:	4b14      	ldr	r3, [pc, #80]	; (1a00597c <_fflush_r+0x6c>)
1a00592c:	429c      	cmp	r4, r3
1a00592e:	d11b      	bne.n	1a005968 <_fflush_r+0x58>
1a005930:	686c      	ldr	r4, [r5, #4]
1a005932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005936:	2b00      	cmp	r3, #0
1a005938:	d0ef      	beq.n	1a00591a <_fflush_r+0xa>
1a00593a:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00593c:	07d0      	lsls	r0, r2, #31
1a00593e:	d404      	bmi.n	1a00594a <_fflush_r+0x3a>
1a005940:	0599      	lsls	r1, r3, #22
1a005942:	d402      	bmi.n	1a00594a <_fflush_r+0x3a>
1a005944:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a005946:	f000 f94a 	bl	1a005bde <__retarget_lock_acquire_recursive>
1a00594a:	4628      	mov	r0, r5
1a00594c:	4621      	mov	r1, r4
1a00594e:	f7ff ff59 	bl	1a005804 <__sflush_r>
1a005952:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a005954:	07da      	lsls	r2, r3, #31
1a005956:	4605      	mov	r5, r0
1a005958:	d4e0      	bmi.n	1a00591c <_fflush_r+0xc>
1a00595a:	89a3      	ldrh	r3, [r4, #12]
1a00595c:	059b      	lsls	r3, r3, #22
1a00595e:	d4dd      	bmi.n	1a00591c <_fflush_r+0xc>
1a005960:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a005962:	f000 f93d 	bl	1a005be0 <__retarget_lock_release_recursive>
1a005966:	e7d9      	b.n	1a00591c <_fflush_r+0xc>
1a005968:	4b05      	ldr	r3, [pc, #20]	; (1a005980 <_fflush_r+0x70>)
1a00596a:	429c      	cmp	r4, r3
1a00596c:	d101      	bne.n	1a005972 <_fflush_r+0x62>
1a00596e:	68ac      	ldr	r4, [r5, #8]
1a005970:	e7df      	b.n	1a005932 <_fflush_r+0x22>
1a005972:	4b04      	ldr	r3, [pc, #16]	; (1a005984 <_fflush_r+0x74>)
1a005974:	429c      	cmp	r4, r3
1a005976:	bf08      	it	eq
1a005978:	68ec      	ldreq	r4, [r5, #12]
1a00597a:	e7da      	b.n	1a005932 <_fflush_r+0x22>
1a00597c:	1a006c98 	.word	0x1a006c98
1a005980:	1a006cb8 	.word	0x1a006cb8
1a005984:	1a006c78 	.word	0x1a006c78

1a005988 <fflush>:
1a005988:	4601      	mov	r1, r0
1a00598a:	b920      	cbnz	r0, 1a005996 <fflush+0xe>
1a00598c:	4b04      	ldr	r3, [pc, #16]	; (1a0059a0 <fflush+0x18>)
1a00598e:	4905      	ldr	r1, [pc, #20]	; (1a0059a4 <fflush+0x1c>)
1a005990:	6818      	ldr	r0, [r3, #0]
1a005992:	f000 b8e1 	b.w	1a005b58 <_fwalk_reent>
1a005996:	4b04      	ldr	r3, [pc, #16]	; (1a0059a8 <fflush+0x20>)
1a005998:	6818      	ldr	r0, [r3, #0]
1a00599a:	f7ff bfb9 	b.w	1a005910 <_fflush_r>
1a00599e:	bf00      	nop
1a0059a0:	1a006cd8 	.word	0x1a006cd8
1a0059a4:	1a005911 	.word	0x1a005911
1a0059a8:	10000050 	.word	0x10000050

1a0059ac <std>:
1a0059ac:	2300      	movs	r3, #0
1a0059ae:	b510      	push	{r4, lr}
1a0059b0:	4604      	mov	r4, r0
1a0059b2:	e9c0 3300 	strd	r3, r3, [r0]
1a0059b6:	6083      	str	r3, [r0, #8]
1a0059b8:	8181      	strh	r1, [r0, #12]
1a0059ba:	6643      	str	r3, [r0, #100]	; 0x64
1a0059bc:	81c2      	strh	r2, [r0, #14]
1a0059be:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0059c2:	6183      	str	r3, [r0, #24]
1a0059c4:	4619      	mov	r1, r3
1a0059c6:	2208      	movs	r2, #8
1a0059c8:	305c      	adds	r0, #92	; 0x5c
1a0059ca:	f000 f918 	bl	1a005bfe <memset>
1a0059ce:	4b05      	ldr	r3, [pc, #20]	; (1a0059e4 <std+0x38>)
1a0059d0:	6263      	str	r3, [r4, #36]	; 0x24
1a0059d2:	4b05      	ldr	r3, [pc, #20]	; (1a0059e8 <std+0x3c>)
1a0059d4:	62a3      	str	r3, [r4, #40]	; 0x28
1a0059d6:	4b05      	ldr	r3, [pc, #20]	; (1a0059ec <std+0x40>)
1a0059d8:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0059da:	4b05      	ldr	r3, [pc, #20]	; (1a0059f0 <std+0x44>)
1a0059dc:	6224      	str	r4, [r4, #32]
1a0059de:	6323      	str	r3, [r4, #48]	; 0x30
1a0059e0:	bd10      	pop	{r4, pc}
1a0059e2:	bf00      	nop
1a0059e4:	1a005e7d 	.word	0x1a005e7d
1a0059e8:	1a005e9f 	.word	0x1a005e9f
1a0059ec:	1a005ed7 	.word	0x1a005ed7
1a0059f0:	1a005efb 	.word	0x1a005efb

1a0059f4 <_cleanup_r>:
1a0059f4:	4901      	ldr	r1, [pc, #4]	; (1a0059fc <_cleanup_r+0x8>)
1a0059f6:	f000 b8af 	b.w	1a005b58 <_fwalk_reent>
1a0059fa:	bf00      	nop
1a0059fc:	1a005911 	.word	0x1a005911

1a005a00 <__sfmoreglue>:
1a005a00:	b570      	push	{r4, r5, r6, lr}
1a005a02:	1e4a      	subs	r2, r1, #1
1a005a04:	2568      	movs	r5, #104	; 0x68
1a005a06:	4355      	muls	r5, r2
1a005a08:	460e      	mov	r6, r1
1a005a0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a005a0e:	f000 f94d 	bl	1a005cac <_malloc_r>
1a005a12:	4604      	mov	r4, r0
1a005a14:	b140      	cbz	r0, 1a005a28 <__sfmoreglue+0x28>
1a005a16:	2100      	movs	r1, #0
1a005a18:	e9c0 1600 	strd	r1, r6, [r0]
1a005a1c:	300c      	adds	r0, #12
1a005a1e:	60a0      	str	r0, [r4, #8]
1a005a20:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a005a24:	f000 f8eb 	bl	1a005bfe <memset>
1a005a28:	4620      	mov	r0, r4
1a005a2a:	bd70      	pop	{r4, r5, r6, pc}

1a005a2c <__sfp_lock_acquire>:
1a005a2c:	4801      	ldr	r0, [pc, #4]	; (1a005a34 <__sfp_lock_acquire+0x8>)
1a005a2e:	f000 b8d6 	b.w	1a005bde <__retarget_lock_acquire_recursive>
1a005a32:	bf00      	nop
1a005a34:	10002da0 	.word	0x10002da0

1a005a38 <__sfp_lock_release>:
1a005a38:	4801      	ldr	r0, [pc, #4]	; (1a005a40 <__sfp_lock_release+0x8>)
1a005a3a:	f000 b8d1 	b.w	1a005be0 <__retarget_lock_release_recursive>
1a005a3e:	bf00      	nop
1a005a40:	10002da0 	.word	0x10002da0

1a005a44 <__sinit_lock_acquire>:
1a005a44:	4801      	ldr	r0, [pc, #4]	; (1a005a4c <__sinit_lock_acquire+0x8>)
1a005a46:	f000 b8ca 	b.w	1a005bde <__retarget_lock_acquire_recursive>
1a005a4a:	bf00      	nop
1a005a4c:	10002d9b 	.word	0x10002d9b

1a005a50 <__sinit_lock_release>:
1a005a50:	4801      	ldr	r0, [pc, #4]	; (1a005a58 <__sinit_lock_release+0x8>)
1a005a52:	f000 b8c5 	b.w	1a005be0 <__retarget_lock_release_recursive>
1a005a56:	bf00      	nop
1a005a58:	10002d9b 	.word	0x10002d9b

1a005a5c <__sinit>:
1a005a5c:	b510      	push	{r4, lr}
1a005a5e:	4604      	mov	r4, r0
1a005a60:	f7ff fff0 	bl	1a005a44 <__sinit_lock_acquire>
1a005a64:	69a3      	ldr	r3, [r4, #24]
1a005a66:	b11b      	cbz	r3, 1a005a70 <__sinit+0x14>
1a005a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a005a6c:	f7ff bff0 	b.w	1a005a50 <__sinit_lock_release>
1a005a70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a005a74:	6523      	str	r3, [r4, #80]	; 0x50
1a005a76:	4b13      	ldr	r3, [pc, #76]	; (1a005ac4 <__sinit+0x68>)
1a005a78:	4a13      	ldr	r2, [pc, #76]	; (1a005ac8 <__sinit+0x6c>)
1a005a7a:	681b      	ldr	r3, [r3, #0]
1a005a7c:	62a2      	str	r2, [r4, #40]	; 0x28
1a005a7e:	42a3      	cmp	r3, r4
1a005a80:	bf04      	itt	eq
1a005a82:	2301      	moveq	r3, #1
1a005a84:	61a3      	streq	r3, [r4, #24]
1a005a86:	4620      	mov	r0, r4
1a005a88:	f000 f820 	bl	1a005acc <__sfp>
1a005a8c:	6060      	str	r0, [r4, #4]
1a005a8e:	4620      	mov	r0, r4
1a005a90:	f000 f81c 	bl	1a005acc <__sfp>
1a005a94:	60a0      	str	r0, [r4, #8]
1a005a96:	4620      	mov	r0, r4
1a005a98:	f000 f818 	bl	1a005acc <__sfp>
1a005a9c:	2200      	movs	r2, #0
1a005a9e:	60e0      	str	r0, [r4, #12]
1a005aa0:	2104      	movs	r1, #4
1a005aa2:	6860      	ldr	r0, [r4, #4]
1a005aa4:	f7ff ff82 	bl	1a0059ac <std>
1a005aa8:	2201      	movs	r2, #1
1a005aaa:	2109      	movs	r1, #9
1a005aac:	68a0      	ldr	r0, [r4, #8]
1a005aae:	f7ff ff7d 	bl	1a0059ac <std>
1a005ab2:	2202      	movs	r2, #2
1a005ab4:	2112      	movs	r1, #18
1a005ab6:	68e0      	ldr	r0, [r4, #12]
1a005ab8:	f7ff ff78 	bl	1a0059ac <std>
1a005abc:	2301      	movs	r3, #1
1a005abe:	61a3      	str	r3, [r4, #24]
1a005ac0:	e7d2      	b.n	1a005a68 <__sinit+0xc>
1a005ac2:	bf00      	nop
1a005ac4:	1a006cd8 	.word	0x1a006cd8
1a005ac8:	1a0059f5 	.word	0x1a0059f5

1a005acc <__sfp>:
1a005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005ace:	4607      	mov	r7, r0
1a005ad0:	f7ff ffac 	bl	1a005a2c <__sfp_lock_acquire>
1a005ad4:	4b1e      	ldr	r3, [pc, #120]	; (1a005b50 <__sfp+0x84>)
1a005ad6:	681e      	ldr	r6, [r3, #0]
1a005ad8:	69b3      	ldr	r3, [r6, #24]
1a005ada:	b913      	cbnz	r3, 1a005ae2 <__sfp+0x16>
1a005adc:	4630      	mov	r0, r6
1a005ade:	f7ff ffbd 	bl	1a005a5c <__sinit>
1a005ae2:	3648      	adds	r6, #72	; 0x48
1a005ae4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a005ae8:	3b01      	subs	r3, #1
1a005aea:	d503      	bpl.n	1a005af4 <__sfp+0x28>
1a005aec:	6833      	ldr	r3, [r6, #0]
1a005aee:	b30b      	cbz	r3, 1a005b34 <__sfp+0x68>
1a005af0:	6836      	ldr	r6, [r6, #0]
1a005af2:	e7f7      	b.n	1a005ae4 <__sfp+0x18>
1a005af4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a005af8:	b9d5      	cbnz	r5, 1a005b30 <__sfp+0x64>
1a005afa:	4b16      	ldr	r3, [pc, #88]	; (1a005b54 <__sfp+0x88>)
1a005afc:	60e3      	str	r3, [r4, #12]
1a005afe:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a005b02:	6665      	str	r5, [r4, #100]	; 0x64
1a005b04:	f000 f86a 	bl	1a005bdc <__retarget_lock_init_recursive>
1a005b08:	f7ff ff96 	bl	1a005a38 <__sfp_lock_release>
1a005b0c:	6025      	str	r5, [r4, #0]
1a005b0e:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a005b12:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a005b16:	61a5      	str	r5, [r4, #24]
1a005b18:	2208      	movs	r2, #8
1a005b1a:	4629      	mov	r1, r5
1a005b1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a005b20:	f000 f86d 	bl	1a005bfe <memset>
1a005b24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a005b28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a005b2c:	4620      	mov	r0, r4
1a005b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005b30:	3468      	adds	r4, #104	; 0x68
1a005b32:	e7d9      	b.n	1a005ae8 <__sfp+0x1c>
1a005b34:	2104      	movs	r1, #4
1a005b36:	4638      	mov	r0, r7
1a005b38:	f7ff ff62 	bl	1a005a00 <__sfmoreglue>
1a005b3c:	4604      	mov	r4, r0
1a005b3e:	6030      	str	r0, [r6, #0]
1a005b40:	2800      	cmp	r0, #0
1a005b42:	d1d5      	bne.n	1a005af0 <__sfp+0x24>
1a005b44:	f7ff ff78 	bl	1a005a38 <__sfp_lock_release>
1a005b48:	230c      	movs	r3, #12
1a005b4a:	603b      	str	r3, [r7, #0]
1a005b4c:	e7ee      	b.n	1a005b2c <__sfp+0x60>
1a005b4e:	bf00      	nop
1a005b50:	1a006cd8 	.word	0x1a006cd8
1a005b54:	ffff0001 	.word	0xffff0001

1a005b58 <_fwalk_reent>:
1a005b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a005b5c:	4680      	mov	r8, r0
1a005b5e:	4689      	mov	r9, r1
1a005b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a005b64:	2600      	movs	r6, #0
1a005b66:	b914      	cbnz	r4, 1a005b6e <_fwalk_reent+0x16>
1a005b68:	4630      	mov	r0, r6
1a005b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a005b6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a005b72:	3f01      	subs	r7, #1
1a005b74:	d501      	bpl.n	1a005b7a <_fwalk_reent+0x22>
1a005b76:	6824      	ldr	r4, [r4, #0]
1a005b78:	e7f5      	b.n	1a005b66 <_fwalk_reent+0xe>
1a005b7a:	89ab      	ldrh	r3, [r5, #12]
1a005b7c:	2b01      	cmp	r3, #1
1a005b7e:	d907      	bls.n	1a005b90 <_fwalk_reent+0x38>
1a005b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a005b84:	3301      	adds	r3, #1
1a005b86:	d003      	beq.n	1a005b90 <_fwalk_reent+0x38>
1a005b88:	4629      	mov	r1, r5
1a005b8a:	4640      	mov	r0, r8
1a005b8c:	47c8      	blx	r9
1a005b8e:	4306      	orrs	r6, r0
1a005b90:	3568      	adds	r5, #104	; 0x68
1a005b92:	e7ee      	b.n	1a005b72 <_fwalk_reent+0x1a>

1a005b94 <__libc_init_array>:
1a005b94:	b570      	push	{r4, r5, r6, lr}
1a005b96:	4d0d      	ldr	r5, [pc, #52]	; (1a005bcc <__libc_init_array+0x38>)
1a005b98:	4c0d      	ldr	r4, [pc, #52]	; (1a005bd0 <__libc_init_array+0x3c>)
1a005b9a:	1b64      	subs	r4, r4, r5
1a005b9c:	10a4      	asrs	r4, r4, #2
1a005b9e:	2600      	movs	r6, #0
1a005ba0:	42a6      	cmp	r6, r4
1a005ba2:	d109      	bne.n	1a005bb8 <__libc_init_array+0x24>
1a005ba4:	4d0b      	ldr	r5, [pc, #44]	; (1a005bd4 <__libc_init_array+0x40>)
1a005ba6:	4c0c      	ldr	r4, [pc, #48]	; (1a005bd8 <__libc_init_array+0x44>)
1a005ba8:	f7fb fbe1 	bl	1a00136e <_init>
1a005bac:	1b64      	subs	r4, r4, r5
1a005bae:	10a4      	asrs	r4, r4, #2
1a005bb0:	2600      	movs	r6, #0
1a005bb2:	42a6      	cmp	r6, r4
1a005bb4:	d105      	bne.n	1a005bc2 <__libc_init_array+0x2e>
1a005bb6:	bd70      	pop	{r4, r5, r6, pc}
1a005bb8:	f855 3b04 	ldr.w	r3, [r5], #4
1a005bbc:	4798      	blx	r3
1a005bbe:	3601      	adds	r6, #1
1a005bc0:	e7ee      	b.n	1a005ba0 <__libc_init_array+0xc>
1a005bc2:	f855 3b04 	ldr.w	r3, [r5], #4
1a005bc6:	4798      	blx	r3
1a005bc8:	3601      	adds	r6, #1
1a005bca:	e7f2      	b.n	1a005bb2 <__libc_init_array+0x1e>
1a005bcc:	1a006d10 	.word	0x1a006d10
1a005bd0:	1a006d10 	.word	0x1a006d10
1a005bd4:	1a006d10 	.word	0x1a006d10
1a005bd8:	1a006d14 	.word	0x1a006d14

1a005bdc <__retarget_lock_init_recursive>:
1a005bdc:	4770      	bx	lr

1a005bde <__retarget_lock_acquire_recursive>:
1a005bde:	4770      	bx	lr

1a005be0 <__retarget_lock_release_recursive>:
1a005be0:	4770      	bx	lr

1a005be2 <memcpy>:
1a005be2:	440a      	add	r2, r1
1a005be4:	4291      	cmp	r1, r2
1a005be6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005bea:	d100      	bne.n	1a005bee <memcpy+0xc>
1a005bec:	4770      	bx	lr
1a005bee:	b510      	push	{r4, lr}
1a005bf0:	f811 4b01 	ldrb.w	r4, [r1], #1
1a005bf4:	f803 4f01 	strb.w	r4, [r3, #1]!
1a005bf8:	4291      	cmp	r1, r2
1a005bfa:	d1f9      	bne.n	1a005bf0 <memcpy+0xe>
1a005bfc:	bd10      	pop	{r4, pc}

1a005bfe <memset>:
1a005bfe:	4402      	add	r2, r0
1a005c00:	4603      	mov	r3, r0
1a005c02:	4293      	cmp	r3, r2
1a005c04:	d100      	bne.n	1a005c08 <memset+0xa>
1a005c06:	4770      	bx	lr
1a005c08:	f803 1b01 	strb.w	r1, [r3], #1
1a005c0c:	e7f9      	b.n	1a005c02 <memset+0x4>
1a005c0e:	Address 0x000000001a005c0e is out of bounds.


1a005c10 <_free_r>:
1a005c10:	b538      	push	{r3, r4, r5, lr}
1a005c12:	4605      	mov	r5, r0
1a005c14:	2900      	cmp	r1, #0
1a005c16:	d045      	beq.n	1a005ca4 <_free_r+0x94>
1a005c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a005c1c:	1f0c      	subs	r4, r1, #4
1a005c1e:	2b00      	cmp	r3, #0
1a005c20:	bfb8      	it	lt
1a005c22:	18e4      	addlt	r4, r4, r3
1a005c24:	f000 fa92 	bl	1a00614c <__malloc_lock>
1a005c28:	4a1f      	ldr	r2, [pc, #124]	; (1a005ca8 <_free_r+0x98>)
1a005c2a:	6813      	ldr	r3, [r2, #0]
1a005c2c:	4610      	mov	r0, r2
1a005c2e:	b933      	cbnz	r3, 1a005c3e <_free_r+0x2e>
1a005c30:	6063      	str	r3, [r4, #4]
1a005c32:	6014      	str	r4, [r2, #0]
1a005c34:	4628      	mov	r0, r5
1a005c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a005c3a:	f000 ba8d 	b.w	1a006158 <__malloc_unlock>
1a005c3e:	42a3      	cmp	r3, r4
1a005c40:	d90c      	bls.n	1a005c5c <_free_r+0x4c>
1a005c42:	6821      	ldr	r1, [r4, #0]
1a005c44:	1862      	adds	r2, r4, r1
1a005c46:	4293      	cmp	r3, r2
1a005c48:	bf04      	itt	eq
1a005c4a:	681a      	ldreq	r2, [r3, #0]
1a005c4c:	685b      	ldreq	r3, [r3, #4]
1a005c4e:	6063      	str	r3, [r4, #4]
1a005c50:	bf04      	itt	eq
1a005c52:	1852      	addeq	r2, r2, r1
1a005c54:	6022      	streq	r2, [r4, #0]
1a005c56:	6004      	str	r4, [r0, #0]
1a005c58:	e7ec      	b.n	1a005c34 <_free_r+0x24>
1a005c5a:	4613      	mov	r3, r2
1a005c5c:	685a      	ldr	r2, [r3, #4]
1a005c5e:	b10a      	cbz	r2, 1a005c64 <_free_r+0x54>
1a005c60:	42a2      	cmp	r2, r4
1a005c62:	d9fa      	bls.n	1a005c5a <_free_r+0x4a>
1a005c64:	6819      	ldr	r1, [r3, #0]
1a005c66:	1858      	adds	r0, r3, r1
1a005c68:	42a0      	cmp	r0, r4
1a005c6a:	d10b      	bne.n	1a005c84 <_free_r+0x74>
1a005c6c:	6820      	ldr	r0, [r4, #0]
1a005c6e:	4401      	add	r1, r0
1a005c70:	1858      	adds	r0, r3, r1
1a005c72:	4282      	cmp	r2, r0
1a005c74:	6019      	str	r1, [r3, #0]
1a005c76:	d1dd      	bne.n	1a005c34 <_free_r+0x24>
1a005c78:	6810      	ldr	r0, [r2, #0]
1a005c7a:	6852      	ldr	r2, [r2, #4]
1a005c7c:	605a      	str	r2, [r3, #4]
1a005c7e:	4401      	add	r1, r0
1a005c80:	6019      	str	r1, [r3, #0]
1a005c82:	e7d7      	b.n	1a005c34 <_free_r+0x24>
1a005c84:	d902      	bls.n	1a005c8c <_free_r+0x7c>
1a005c86:	230c      	movs	r3, #12
1a005c88:	602b      	str	r3, [r5, #0]
1a005c8a:	e7d3      	b.n	1a005c34 <_free_r+0x24>
1a005c8c:	6820      	ldr	r0, [r4, #0]
1a005c8e:	1821      	adds	r1, r4, r0
1a005c90:	428a      	cmp	r2, r1
1a005c92:	bf04      	itt	eq
1a005c94:	6811      	ldreq	r1, [r2, #0]
1a005c96:	6852      	ldreq	r2, [r2, #4]
1a005c98:	6062      	str	r2, [r4, #4]
1a005c9a:	bf04      	itt	eq
1a005c9c:	1809      	addeq	r1, r1, r0
1a005c9e:	6021      	streq	r1, [r4, #0]
1a005ca0:	605c      	str	r4, [r3, #4]
1a005ca2:	e7c7      	b.n	1a005c34 <_free_r+0x24>
1a005ca4:	bd38      	pop	{r3, r4, r5, pc}
1a005ca6:	bf00      	nop
1a005ca8:	10002d3c 	.word	0x10002d3c

1a005cac <_malloc_r>:
1a005cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005cae:	1ccd      	adds	r5, r1, #3
1a005cb0:	f025 0503 	bic.w	r5, r5, #3
1a005cb4:	3508      	adds	r5, #8
1a005cb6:	2d0c      	cmp	r5, #12
1a005cb8:	bf38      	it	cc
1a005cba:	250c      	movcc	r5, #12
1a005cbc:	2d00      	cmp	r5, #0
1a005cbe:	4606      	mov	r6, r0
1a005cc0:	db01      	blt.n	1a005cc6 <_malloc_r+0x1a>
1a005cc2:	42a9      	cmp	r1, r5
1a005cc4:	d903      	bls.n	1a005cce <_malloc_r+0x22>
1a005cc6:	230c      	movs	r3, #12
1a005cc8:	6033      	str	r3, [r6, #0]
1a005cca:	2000      	movs	r0, #0
1a005ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005cce:	f000 fa3d 	bl	1a00614c <__malloc_lock>
1a005cd2:	4921      	ldr	r1, [pc, #132]	; (1a005d58 <_malloc_r+0xac>)
1a005cd4:	680a      	ldr	r2, [r1, #0]
1a005cd6:	4614      	mov	r4, r2
1a005cd8:	b99c      	cbnz	r4, 1a005d02 <_malloc_r+0x56>
1a005cda:	4f20      	ldr	r7, [pc, #128]	; (1a005d5c <_malloc_r+0xb0>)
1a005cdc:	683b      	ldr	r3, [r7, #0]
1a005cde:	b923      	cbnz	r3, 1a005cea <_malloc_r+0x3e>
1a005ce0:	4621      	mov	r1, r4
1a005ce2:	4630      	mov	r0, r6
1a005ce4:	f7fb fb98 	bl	1a001418 <_sbrk_r>
1a005ce8:	6038      	str	r0, [r7, #0]
1a005cea:	4629      	mov	r1, r5
1a005cec:	4630      	mov	r0, r6
1a005cee:	f7fb fb93 	bl	1a001418 <_sbrk_r>
1a005cf2:	1c43      	adds	r3, r0, #1
1a005cf4:	d123      	bne.n	1a005d3e <_malloc_r+0x92>
1a005cf6:	230c      	movs	r3, #12
1a005cf8:	6033      	str	r3, [r6, #0]
1a005cfa:	4630      	mov	r0, r6
1a005cfc:	f000 fa2c 	bl	1a006158 <__malloc_unlock>
1a005d00:	e7e3      	b.n	1a005cca <_malloc_r+0x1e>
1a005d02:	6823      	ldr	r3, [r4, #0]
1a005d04:	1b5b      	subs	r3, r3, r5
1a005d06:	d417      	bmi.n	1a005d38 <_malloc_r+0x8c>
1a005d08:	2b0b      	cmp	r3, #11
1a005d0a:	d903      	bls.n	1a005d14 <_malloc_r+0x68>
1a005d0c:	6023      	str	r3, [r4, #0]
1a005d0e:	441c      	add	r4, r3
1a005d10:	6025      	str	r5, [r4, #0]
1a005d12:	e004      	b.n	1a005d1e <_malloc_r+0x72>
1a005d14:	6863      	ldr	r3, [r4, #4]
1a005d16:	42a2      	cmp	r2, r4
1a005d18:	bf0c      	ite	eq
1a005d1a:	600b      	streq	r3, [r1, #0]
1a005d1c:	6053      	strne	r3, [r2, #4]
1a005d1e:	4630      	mov	r0, r6
1a005d20:	f000 fa1a 	bl	1a006158 <__malloc_unlock>
1a005d24:	f104 000b 	add.w	r0, r4, #11
1a005d28:	1d23      	adds	r3, r4, #4
1a005d2a:	f020 0007 	bic.w	r0, r0, #7
1a005d2e:	1ac2      	subs	r2, r0, r3
1a005d30:	d0cc      	beq.n	1a005ccc <_malloc_r+0x20>
1a005d32:	1a1b      	subs	r3, r3, r0
1a005d34:	50a3      	str	r3, [r4, r2]
1a005d36:	e7c9      	b.n	1a005ccc <_malloc_r+0x20>
1a005d38:	4622      	mov	r2, r4
1a005d3a:	6864      	ldr	r4, [r4, #4]
1a005d3c:	e7cc      	b.n	1a005cd8 <_malloc_r+0x2c>
1a005d3e:	1cc4      	adds	r4, r0, #3
1a005d40:	f024 0403 	bic.w	r4, r4, #3
1a005d44:	42a0      	cmp	r0, r4
1a005d46:	d0e3      	beq.n	1a005d10 <_malloc_r+0x64>
1a005d48:	1a21      	subs	r1, r4, r0
1a005d4a:	4630      	mov	r0, r6
1a005d4c:	f7fb fb64 	bl	1a001418 <_sbrk_r>
1a005d50:	3001      	adds	r0, #1
1a005d52:	d1dd      	bne.n	1a005d10 <_malloc_r+0x64>
1a005d54:	e7cf      	b.n	1a005cf6 <_malloc_r+0x4a>
1a005d56:	bf00      	nop
1a005d58:	10002d3c 	.word	0x10002d3c
1a005d5c:	10002d40 	.word	0x10002d40

1a005d60 <iprintf>:
1a005d60:	b40f      	push	{r0, r1, r2, r3}
1a005d62:	4b0a      	ldr	r3, [pc, #40]	; (1a005d8c <iprintf+0x2c>)
1a005d64:	b513      	push	{r0, r1, r4, lr}
1a005d66:	681c      	ldr	r4, [r3, #0]
1a005d68:	b124      	cbz	r4, 1a005d74 <iprintf+0x14>
1a005d6a:	69a3      	ldr	r3, [r4, #24]
1a005d6c:	b913      	cbnz	r3, 1a005d74 <iprintf+0x14>
1a005d6e:	4620      	mov	r0, r4
1a005d70:	f7ff fe74 	bl	1a005a5c <__sinit>
1a005d74:	ab05      	add	r3, sp, #20
1a005d76:	9a04      	ldr	r2, [sp, #16]
1a005d78:	68a1      	ldr	r1, [r4, #8]
1a005d7a:	9301      	str	r3, [sp, #4]
1a005d7c:	4620      	mov	r0, r4
1a005d7e:	f000 fa1b 	bl	1a0061b8 <_vfiprintf_r>
1a005d82:	b002      	add	sp, #8
1a005d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a005d88:	b004      	add	sp, #16
1a005d8a:	4770      	bx	lr
1a005d8c:	10000050 	.word	0x10000050

1a005d90 <_puts_r>:
1a005d90:	b570      	push	{r4, r5, r6, lr}
1a005d92:	460e      	mov	r6, r1
1a005d94:	4605      	mov	r5, r0
1a005d96:	b118      	cbz	r0, 1a005da0 <_puts_r+0x10>
1a005d98:	6983      	ldr	r3, [r0, #24]
1a005d9a:	b90b      	cbnz	r3, 1a005da0 <_puts_r+0x10>
1a005d9c:	f7ff fe5e 	bl	1a005a5c <__sinit>
1a005da0:	69ab      	ldr	r3, [r5, #24]
1a005da2:	68ac      	ldr	r4, [r5, #8]
1a005da4:	b913      	cbnz	r3, 1a005dac <_puts_r+0x1c>
1a005da6:	4628      	mov	r0, r5
1a005da8:	f7ff fe58 	bl	1a005a5c <__sinit>
1a005dac:	4b2c      	ldr	r3, [pc, #176]	; (1a005e60 <_puts_r+0xd0>)
1a005dae:	429c      	cmp	r4, r3
1a005db0:	d120      	bne.n	1a005df4 <_puts_r+0x64>
1a005db2:	686c      	ldr	r4, [r5, #4]
1a005db4:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a005db6:	07db      	lsls	r3, r3, #31
1a005db8:	d405      	bmi.n	1a005dc6 <_puts_r+0x36>
1a005dba:	89a3      	ldrh	r3, [r4, #12]
1a005dbc:	0598      	lsls	r0, r3, #22
1a005dbe:	d402      	bmi.n	1a005dc6 <_puts_r+0x36>
1a005dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a005dc2:	f7ff ff0c 	bl	1a005bde <__retarget_lock_acquire_recursive>
1a005dc6:	89a3      	ldrh	r3, [r4, #12]
1a005dc8:	0719      	lsls	r1, r3, #28
1a005dca:	d51d      	bpl.n	1a005e08 <_puts_r+0x78>
1a005dcc:	6923      	ldr	r3, [r4, #16]
1a005dce:	b1db      	cbz	r3, 1a005e08 <_puts_r+0x78>
1a005dd0:	3e01      	subs	r6, #1
1a005dd2:	68a3      	ldr	r3, [r4, #8]
1a005dd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a005dd8:	3b01      	subs	r3, #1
1a005dda:	60a3      	str	r3, [r4, #8]
1a005ddc:	bb39      	cbnz	r1, 1a005e2e <_puts_r+0x9e>
1a005dde:	2b00      	cmp	r3, #0
1a005de0:	da38      	bge.n	1a005e54 <_puts_r+0xc4>
1a005de2:	4622      	mov	r2, r4
1a005de4:	210a      	movs	r1, #10
1a005de6:	4628      	mov	r0, r5
1a005de8:	f000 f88c 	bl	1a005f04 <__swbuf_r>
1a005dec:	3001      	adds	r0, #1
1a005dee:	d011      	beq.n	1a005e14 <_puts_r+0x84>
1a005df0:	250a      	movs	r5, #10
1a005df2:	e011      	b.n	1a005e18 <_puts_r+0x88>
1a005df4:	4b1b      	ldr	r3, [pc, #108]	; (1a005e64 <_puts_r+0xd4>)
1a005df6:	429c      	cmp	r4, r3
1a005df8:	d101      	bne.n	1a005dfe <_puts_r+0x6e>
1a005dfa:	68ac      	ldr	r4, [r5, #8]
1a005dfc:	e7da      	b.n	1a005db4 <_puts_r+0x24>
1a005dfe:	4b1a      	ldr	r3, [pc, #104]	; (1a005e68 <_puts_r+0xd8>)
1a005e00:	429c      	cmp	r4, r3
1a005e02:	bf08      	it	eq
1a005e04:	68ec      	ldreq	r4, [r5, #12]
1a005e06:	e7d5      	b.n	1a005db4 <_puts_r+0x24>
1a005e08:	4621      	mov	r1, r4
1a005e0a:	4628      	mov	r0, r5
1a005e0c:	f000 f8cc 	bl	1a005fa8 <__swsetup_r>
1a005e10:	2800      	cmp	r0, #0
1a005e12:	d0dd      	beq.n	1a005dd0 <_puts_r+0x40>
1a005e14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a005e18:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a005e1a:	07da      	lsls	r2, r3, #31
1a005e1c:	d405      	bmi.n	1a005e2a <_puts_r+0x9a>
1a005e1e:	89a3      	ldrh	r3, [r4, #12]
1a005e20:	059b      	lsls	r3, r3, #22
1a005e22:	d402      	bmi.n	1a005e2a <_puts_r+0x9a>
1a005e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a005e26:	f7ff fedb 	bl	1a005be0 <__retarget_lock_release_recursive>
1a005e2a:	4628      	mov	r0, r5
1a005e2c:	bd70      	pop	{r4, r5, r6, pc}
1a005e2e:	2b00      	cmp	r3, #0
1a005e30:	da04      	bge.n	1a005e3c <_puts_r+0xac>
1a005e32:	69a2      	ldr	r2, [r4, #24]
1a005e34:	429a      	cmp	r2, r3
1a005e36:	dc06      	bgt.n	1a005e46 <_puts_r+0xb6>
1a005e38:	290a      	cmp	r1, #10
1a005e3a:	d004      	beq.n	1a005e46 <_puts_r+0xb6>
1a005e3c:	6823      	ldr	r3, [r4, #0]
1a005e3e:	1c5a      	adds	r2, r3, #1
1a005e40:	6022      	str	r2, [r4, #0]
1a005e42:	7019      	strb	r1, [r3, #0]
1a005e44:	e7c5      	b.n	1a005dd2 <_puts_r+0x42>
1a005e46:	4622      	mov	r2, r4
1a005e48:	4628      	mov	r0, r5
1a005e4a:	f000 f85b 	bl	1a005f04 <__swbuf_r>
1a005e4e:	3001      	adds	r0, #1
1a005e50:	d1bf      	bne.n	1a005dd2 <_puts_r+0x42>
1a005e52:	e7df      	b.n	1a005e14 <_puts_r+0x84>
1a005e54:	6823      	ldr	r3, [r4, #0]
1a005e56:	250a      	movs	r5, #10
1a005e58:	1c5a      	adds	r2, r3, #1
1a005e5a:	6022      	str	r2, [r4, #0]
1a005e5c:	701d      	strb	r5, [r3, #0]
1a005e5e:	e7db      	b.n	1a005e18 <_puts_r+0x88>
1a005e60:	1a006c98 	.word	0x1a006c98
1a005e64:	1a006cb8 	.word	0x1a006cb8
1a005e68:	1a006c78 	.word	0x1a006c78

1a005e6c <puts>:
1a005e6c:	4b02      	ldr	r3, [pc, #8]	; (1a005e78 <puts+0xc>)
1a005e6e:	4601      	mov	r1, r0
1a005e70:	6818      	ldr	r0, [r3, #0]
1a005e72:	f7ff bf8d 	b.w	1a005d90 <_puts_r>
1a005e76:	bf00      	nop
1a005e78:	10000050 	.word	0x10000050

1a005e7c <__sread>:
1a005e7c:	b510      	push	{r4, lr}
1a005e7e:	460c      	mov	r4, r1
1a005e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005e84:	f7fb fa8c 	bl	1a0013a0 <_read_r>
1a005e88:	2800      	cmp	r0, #0
1a005e8a:	bfab      	itete	ge
1a005e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a005e8e:	89a3      	ldrhlt	r3, [r4, #12]
1a005e90:	181b      	addge	r3, r3, r0
1a005e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a005e96:	bfac      	ite	ge
1a005e98:	6563      	strge	r3, [r4, #84]	; 0x54
1a005e9a:	81a3      	strhlt	r3, [r4, #12]
1a005e9c:	bd10      	pop	{r4, pc}

1a005e9e <__swrite>:
1a005e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005ea2:	461f      	mov	r7, r3
1a005ea4:	898b      	ldrh	r3, [r1, #12]
1a005ea6:	05db      	lsls	r3, r3, #23
1a005ea8:	4605      	mov	r5, r0
1a005eaa:	460c      	mov	r4, r1
1a005eac:	4616      	mov	r6, r2
1a005eae:	d505      	bpl.n	1a005ebc <__swrite+0x1e>
1a005eb0:	2302      	movs	r3, #2
1a005eb2:	2200      	movs	r2, #0
1a005eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005eb8:	f7fb fa6d 	bl	1a001396 <_lseek_r>
1a005ebc:	89a3      	ldrh	r3, [r4, #12]
1a005ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a005ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a005ec6:	81a3      	strh	r3, [r4, #12]
1a005ec8:	4632      	mov	r2, r6
1a005eca:	463b      	mov	r3, r7
1a005ecc:	4628      	mov	r0, r5
1a005ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a005ed2:	f7fb ba8c 	b.w	1a0013ee <_write_r>

1a005ed6 <__sseek>:
1a005ed6:	b510      	push	{r4, lr}
1a005ed8:	460c      	mov	r4, r1
1a005eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005ede:	f7fb fa5a 	bl	1a001396 <_lseek_r>
1a005ee2:	1c43      	adds	r3, r0, #1
1a005ee4:	89a3      	ldrh	r3, [r4, #12]
1a005ee6:	bf15      	itete	ne
1a005ee8:	6560      	strne	r0, [r4, #84]	; 0x54
1a005eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a005eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a005ef2:	81a3      	strheq	r3, [r4, #12]
1a005ef4:	bf18      	it	ne
1a005ef6:	81a3      	strhne	r3, [r4, #12]
1a005ef8:	bd10      	pop	{r4, pc}

1a005efa <__sclose>:
1a005efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005efe:	f7fb ba37 	b.w	1a001370 <_close_r>
1a005f02:	Address 0x000000001a005f02 is out of bounds.


1a005f04 <__swbuf_r>:
1a005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005f06:	460e      	mov	r6, r1
1a005f08:	4614      	mov	r4, r2
1a005f0a:	4605      	mov	r5, r0
1a005f0c:	b118      	cbz	r0, 1a005f16 <__swbuf_r+0x12>
1a005f0e:	6983      	ldr	r3, [r0, #24]
1a005f10:	b90b      	cbnz	r3, 1a005f16 <__swbuf_r+0x12>
1a005f12:	f7ff fda3 	bl	1a005a5c <__sinit>
1a005f16:	4b21      	ldr	r3, [pc, #132]	; (1a005f9c <__swbuf_r+0x98>)
1a005f18:	429c      	cmp	r4, r3
1a005f1a:	d12b      	bne.n	1a005f74 <__swbuf_r+0x70>
1a005f1c:	686c      	ldr	r4, [r5, #4]
1a005f1e:	69a3      	ldr	r3, [r4, #24]
1a005f20:	60a3      	str	r3, [r4, #8]
1a005f22:	89a3      	ldrh	r3, [r4, #12]
1a005f24:	071a      	lsls	r2, r3, #28
1a005f26:	d52f      	bpl.n	1a005f88 <__swbuf_r+0x84>
1a005f28:	6923      	ldr	r3, [r4, #16]
1a005f2a:	b36b      	cbz	r3, 1a005f88 <__swbuf_r+0x84>
1a005f2c:	6923      	ldr	r3, [r4, #16]
1a005f2e:	6820      	ldr	r0, [r4, #0]
1a005f30:	1ac0      	subs	r0, r0, r3
1a005f32:	6963      	ldr	r3, [r4, #20]
1a005f34:	b2f6      	uxtb	r6, r6
1a005f36:	4283      	cmp	r3, r0
1a005f38:	4637      	mov	r7, r6
1a005f3a:	dc04      	bgt.n	1a005f46 <__swbuf_r+0x42>
1a005f3c:	4621      	mov	r1, r4
1a005f3e:	4628      	mov	r0, r5
1a005f40:	f7ff fce6 	bl	1a005910 <_fflush_r>
1a005f44:	bb30      	cbnz	r0, 1a005f94 <__swbuf_r+0x90>
1a005f46:	68a3      	ldr	r3, [r4, #8]
1a005f48:	3b01      	subs	r3, #1
1a005f4a:	60a3      	str	r3, [r4, #8]
1a005f4c:	6823      	ldr	r3, [r4, #0]
1a005f4e:	1c5a      	adds	r2, r3, #1
1a005f50:	6022      	str	r2, [r4, #0]
1a005f52:	701e      	strb	r6, [r3, #0]
1a005f54:	6963      	ldr	r3, [r4, #20]
1a005f56:	3001      	adds	r0, #1
1a005f58:	4283      	cmp	r3, r0
1a005f5a:	d004      	beq.n	1a005f66 <__swbuf_r+0x62>
1a005f5c:	89a3      	ldrh	r3, [r4, #12]
1a005f5e:	07db      	lsls	r3, r3, #31
1a005f60:	d506      	bpl.n	1a005f70 <__swbuf_r+0x6c>
1a005f62:	2e0a      	cmp	r6, #10
1a005f64:	d104      	bne.n	1a005f70 <__swbuf_r+0x6c>
1a005f66:	4621      	mov	r1, r4
1a005f68:	4628      	mov	r0, r5
1a005f6a:	f7ff fcd1 	bl	1a005910 <_fflush_r>
1a005f6e:	b988      	cbnz	r0, 1a005f94 <__swbuf_r+0x90>
1a005f70:	4638      	mov	r0, r7
1a005f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005f74:	4b0a      	ldr	r3, [pc, #40]	; (1a005fa0 <__swbuf_r+0x9c>)
1a005f76:	429c      	cmp	r4, r3
1a005f78:	d101      	bne.n	1a005f7e <__swbuf_r+0x7a>
1a005f7a:	68ac      	ldr	r4, [r5, #8]
1a005f7c:	e7cf      	b.n	1a005f1e <__swbuf_r+0x1a>
1a005f7e:	4b09      	ldr	r3, [pc, #36]	; (1a005fa4 <__swbuf_r+0xa0>)
1a005f80:	429c      	cmp	r4, r3
1a005f82:	bf08      	it	eq
1a005f84:	68ec      	ldreq	r4, [r5, #12]
1a005f86:	e7ca      	b.n	1a005f1e <__swbuf_r+0x1a>
1a005f88:	4621      	mov	r1, r4
1a005f8a:	4628      	mov	r0, r5
1a005f8c:	f000 f80c 	bl	1a005fa8 <__swsetup_r>
1a005f90:	2800      	cmp	r0, #0
1a005f92:	d0cb      	beq.n	1a005f2c <__swbuf_r+0x28>
1a005f94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a005f98:	e7ea      	b.n	1a005f70 <__swbuf_r+0x6c>
1a005f9a:	bf00      	nop
1a005f9c:	1a006c98 	.word	0x1a006c98
1a005fa0:	1a006cb8 	.word	0x1a006cb8
1a005fa4:	1a006c78 	.word	0x1a006c78

1a005fa8 <__swsetup_r>:
1a005fa8:	4b32      	ldr	r3, [pc, #200]	; (1a006074 <__swsetup_r+0xcc>)
1a005faa:	b570      	push	{r4, r5, r6, lr}
1a005fac:	681d      	ldr	r5, [r3, #0]
1a005fae:	4606      	mov	r6, r0
1a005fb0:	460c      	mov	r4, r1
1a005fb2:	b125      	cbz	r5, 1a005fbe <__swsetup_r+0x16>
1a005fb4:	69ab      	ldr	r3, [r5, #24]
1a005fb6:	b913      	cbnz	r3, 1a005fbe <__swsetup_r+0x16>
1a005fb8:	4628      	mov	r0, r5
1a005fba:	f7ff fd4f 	bl	1a005a5c <__sinit>
1a005fbe:	4b2e      	ldr	r3, [pc, #184]	; (1a006078 <__swsetup_r+0xd0>)
1a005fc0:	429c      	cmp	r4, r3
1a005fc2:	d10f      	bne.n	1a005fe4 <__swsetup_r+0x3c>
1a005fc4:	686c      	ldr	r4, [r5, #4]
1a005fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005fca:	b29a      	uxth	r2, r3
1a005fcc:	0715      	lsls	r5, r2, #28
1a005fce:	d42c      	bmi.n	1a00602a <__swsetup_r+0x82>
1a005fd0:	06d0      	lsls	r0, r2, #27
1a005fd2:	d411      	bmi.n	1a005ff8 <__swsetup_r+0x50>
1a005fd4:	2209      	movs	r2, #9
1a005fd6:	6032      	str	r2, [r6, #0]
1a005fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005fdc:	81a3      	strh	r3, [r4, #12]
1a005fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005fe2:	e03e      	b.n	1a006062 <__swsetup_r+0xba>
1a005fe4:	4b25      	ldr	r3, [pc, #148]	; (1a00607c <__swsetup_r+0xd4>)
1a005fe6:	429c      	cmp	r4, r3
1a005fe8:	d101      	bne.n	1a005fee <__swsetup_r+0x46>
1a005fea:	68ac      	ldr	r4, [r5, #8]
1a005fec:	e7eb      	b.n	1a005fc6 <__swsetup_r+0x1e>
1a005fee:	4b24      	ldr	r3, [pc, #144]	; (1a006080 <__swsetup_r+0xd8>)
1a005ff0:	429c      	cmp	r4, r3
1a005ff2:	bf08      	it	eq
1a005ff4:	68ec      	ldreq	r4, [r5, #12]
1a005ff6:	e7e6      	b.n	1a005fc6 <__swsetup_r+0x1e>
1a005ff8:	0751      	lsls	r1, r2, #29
1a005ffa:	d512      	bpl.n	1a006022 <__swsetup_r+0x7a>
1a005ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a005ffe:	b141      	cbz	r1, 1a006012 <__swsetup_r+0x6a>
1a006000:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a006004:	4299      	cmp	r1, r3
1a006006:	d002      	beq.n	1a00600e <__swsetup_r+0x66>
1a006008:	4630      	mov	r0, r6
1a00600a:	f7ff fe01 	bl	1a005c10 <_free_r>
1a00600e:	2300      	movs	r3, #0
1a006010:	6363      	str	r3, [r4, #52]	; 0x34
1a006012:	89a3      	ldrh	r3, [r4, #12]
1a006014:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a006018:	81a3      	strh	r3, [r4, #12]
1a00601a:	2300      	movs	r3, #0
1a00601c:	6063      	str	r3, [r4, #4]
1a00601e:	6923      	ldr	r3, [r4, #16]
1a006020:	6023      	str	r3, [r4, #0]
1a006022:	89a3      	ldrh	r3, [r4, #12]
1a006024:	f043 0308 	orr.w	r3, r3, #8
1a006028:	81a3      	strh	r3, [r4, #12]
1a00602a:	6923      	ldr	r3, [r4, #16]
1a00602c:	b94b      	cbnz	r3, 1a006042 <__swsetup_r+0x9a>
1a00602e:	89a3      	ldrh	r3, [r4, #12]
1a006030:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a006034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a006038:	d003      	beq.n	1a006042 <__swsetup_r+0x9a>
1a00603a:	4621      	mov	r1, r4
1a00603c:	4630      	mov	r0, r6
1a00603e:	f000 f845 	bl	1a0060cc <__smakebuf_r>
1a006042:	89a2      	ldrh	r2, [r4, #12]
1a006044:	f012 0301 	ands.w	r3, r2, #1
1a006048:	d00c      	beq.n	1a006064 <__swsetup_r+0xbc>
1a00604a:	2300      	movs	r3, #0
1a00604c:	60a3      	str	r3, [r4, #8]
1a00604e:	6963      	ldr	r3, [r4, #20]
1a006050:	425b      	negs	r3, r3
1a006052:	61a3      	str	r3, [r4, #24]
1a006054:	6923      	ldr	r3, [r4, #16]
1a006056:	b953      	cbnz	r3, 1a00606e <__swsetup_r+0xc6>
1a006058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00605c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a006060:	d1ba      	bne.n	1a005fd8 <__swsetup_r+0x30>
1a006062:	bd70      	pop	{r4, r5, r6, pc}
1a006064:	0792      	lsls	r2, r2, #30
1a006066:	bf58      	it	pl
1a006068:	6963      	ldrpl	r3, [r4, #20]
1a00606a:	60a3      	str	r3, [r4, #8]
1a00606c:	e7f2      	b.n	1a006054 <__swsetup_r+0xac>
1a00606e:	2000      	movs	r0, #0
1a006070:	e7f7      	b.n	1a006062 <__swsetup_r+0xba>
1a006072:	bf00      	nop
1a006074:	10000050 	.word	0x10000050
1a006078:	1a006c98 	.word	0x1a006c98
1a00607c:	1a006cb8 	.word	0x1a006cb8
1a006080:	1a006c78 	.word	0x1a006c78

1a006084 <__swhatbuf_r>:
1a006084:	b570      	push	{r4, r5, r6, lr}
1a006086:	460e      	mov	r6, r1
1a006088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00608c:	2900      	cmp	r1, #0
1a00608e:	b096      	sub	sp, #88	; 0x58
1a006090:	4614      	mov	r4, r2
1a006092:	461d      	mov	r5, r3
1a006094:	da07      	bge.n	1a0060a6 <__swhatbuf_r+0x22>
1a006096:	2300      	movs	r3, #0
1a006098:	602b      	str	r3, [r5, #0]
1a00609a:	89b3      	ldrh	r3, [r6, #12]
1a00609c:	061a      	lsls	r2, r3, #24
1a00609e:	d410      	bmi.n	1a0060c2 <__swhatbuf_r+0x3e>
1a0060a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0060a4:	e00e      	b.n	1a0060c4 <__swhatbuf_r+0x40>
1a0060a6:	466a      	mov	r2, sp
1a0060a8:	f7fb f967 	bl	1a00137a <_fstat_r>
1a0060ac:	2800      	cmp	r0, #0
1a0060ae:	dbf2      	blt.n	1a006096 <__swhatbuf_r+0x12>
1a0060b0:	9a01      	ldr	r2, [sp, #4]
1a0060b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0060b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0060ba:	425a      	negs	r2, r3
1a0060bc:	415a      	adcs	r2, r3
1a0060be:	602a      	str	r2, [r5, #0]
1a0060c0:	e7ee      	b.n	1a0060a0 <__swhatbuf_r+0x1c>
1a0060c2:	2340      	movs	r3, #64	; 0x40
1a0060c4:	2000      	movs	r0, #0
1a0060c6:	6023      	str	r3, [r4, #0]
1a0060c8:	b016      	add	sp, #88	; 0x58
1a0060ca:	bd70      	pop	{r4, r5, r6, pc}

1a0060cc <__smakebuf_r>:
1a0060cc:	898b      	ldrh	r3, [r1, #12]
1a0060ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a0060d0:	079d      	lsls	r5, r3, #30
1a0060d2:	4606      	mov	r6, r0
1a0060d4:	460c      	mov	r4, r1
1a0060d6:	d507      	bpl.n	1a0060e8 <__smakebuf_r+0x1c>
1a0060d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a0060dc:	6023      	str	r3, [r4, #0]
1a0060de:	6123      	str	r3, [r4, #16]
1a0060e0:	2301      	movs	r3, #1
1a0060e2:	6163      	str	r3, [r4, #20]
1a0060e4:	b002      	add	sp, #8
1a0060e6:	bd70      	pop	{r4, r5, r6, pc}
1a0060e8:	ab01      	add	r3, sp, #4
1a0060ea:	466a      	mov	r2, sp
1a0060ec:	f7ff ffca 	bl	1a006084 <__swhatbuf_r>
1a0060f0:	9900      	ldr	r1, [sp, #0]
1a0060f2:	4605      	mov	r5, r0
1a0060f4:	4630      	mov	r0, r6
1a0060f6:	f7ff fdd9 	bl	1a005cac <_malloc_r>
1a0060fa:	b948      	cbnz	r0, 1a006110 <__smakebuf_r+0x44>
1a0060fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006100:	059a      	lsls	r2, r3, #22
1a006102:	d4ef      	bmi.n	1a0060e4 <__smakebuf_r+0x18>
1a006104:	f023 0303 	bic.w	r3, r3, #3
1a006108:	f043 0302 	orr.w	r3, r3, #2
1a00610c:	81a3      	strh	r3, [r4, #12]
1a00610e:	e7e3      	b.n	1a0060d8 <__smakebuf_r+0xc>
1a006110:	4b0d      	ldr	r3, [pc, #52]	; (1a006148 <__smakebuf_r+0x7c>)
1a006112:	62b3      	str	r3, [r6, #40]	; 0x28
1a006114:	89a3      	ldrh	r3, [r4, #12]
1a006116:	6020      	str	r0, [r4, #0]
1a006118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00611c:	81a3      	strh	r3, [r4, #12]
1a00611e:	9b00      	ldr	r3, [sp, #0]
1a006120:	6163      	str	r3, [r4, #20]
1a006122:	9b01      	ldr	r3, [sp, #4]
1a006124:	6120      	str	r0, [r4, #16]
1a006126:	b15b      	cbz	r3, 1a006140 <__smakebuf_r+0x74>
1a006128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00612c:	4630      	mov	r0, r6
1a00612e:	f7fb f929 	bl	1a001384 <_isatty_r>
1a006132:	b128      	cbz	r0, 1a006140 <__smakebuf_r+0x74>
1a006134:	89a3      	ldrh	r3, [r4, #12]
1a006136:	f023 0303 	bic.w	r3, r3, #3
1a00613a:	f043 0301 	orr.w	r3, r3, #1
1a00613e:	81a3      	strh	r3, [r4, #12]
1a006140:	89a3      	ldrh	r3, [r4, #12]
1a006142:	431d      	orrs	r5, r3
1a006144:	81a5      	strh	r5, [r4, #12]
1a006146:	e7cd      	b.n	1a0060e4 <__smakebuf_r+0x18>
1a006148:	1a0059f5 	.word	0x1a0059f5

1a00614c <__malloc_lock>:
1a00614c:	4801      	ldr	r0, [pc, #4]	; (1a006154 <__malloc_lock+0x8>)
1a00614e:	f7ff bd46 	b.w	1a005bde <__retarget_lock_acquire_recursive>
1a006152:	bf00      	nop
1a006154:	10002d9c 	.word	0x10002d9c

1a006158 <__malloc_unlock>:
1a006158:	4801      	ldr	r0, [pc, #4]	; (1a006160 <__malloc_unlock+0x8>)
1a00615a:	f7ff bd41 	b.w	1a005be0 <__retarget_lock_release_recursive>
1a00615e:	bf00      	nop
1a006160:	10002d9c 	.word	0x10002d9c

1a006164 <__sfputc_r>:
1a006164:	6893      	ldr	r3, [r2, #8]
1a006166:	3b01      	subs	r3, #1
1a006168:	2b00      	cmp	r3, #0
1a00616a:	b410      	push	{r4}
1a00616c:	6093      	str	r3, [r2, #8]
1a00616e:	da08      	bge.n	1a006182 <__sfputc_r+0x1e>
1a006170:	6994      	ldr	r4, [r2, #24]
1a006172:	42a3      	cmp	r3, r4
1a006174:	db01      	blt.n	1a00617a <__sfputc_r+0x16>
1a006176:	290a      	cmp	r1, #10
1a006178:	d103      	bne.n	1a006182 <__sfputc_r+0x1e>
1a00617a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00617e:	f7ff bec1 	b.w	1a005f04 <__swbuf_r>
1a006182:	6813      	ldr	r3, [r2, #0]
1a006184:	1c58      	adds	r0, r3, #1
1a006186:	6010      	str	r0, [r2, #0]
1a006188:	7019      	strb	r1, [r3, #0]
1a00618a:	4608      	mov	r0, r1
1a00618c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006190:	4770      	bx	lr

1a006192 <__sfputs_r>:
1a006192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a006194:	4606      	mov	r6, r0
1a006196:	460f      	mov	r7, r1
1a006198:	4614      	mov	r4, r2
1a00619a:	18d5      	adds	r5, r2, r3
1a00619c:	42ac      	cmp	r4, r5
1a00619e:	d101      	bne.n	1a0061a4 <__sfputs_r+0x12>
1a0061a0:	2000      	movs	r0, #0
1a0061a2:	e007      	b.n	1a0061b4 <__sfputs_r+0x22>
1a0061a4:	463a      	mov	r2, r7
1a0061a6:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0061aa:	4630      	mov	r0, r6
1a0061ac:	f7ff ffda 	bl	1a006164 <__sfputc_r>
1a0061b0:	1c43      	adds	r3, r0, #1
1a0061b2:	d1f3      	bne.n	1a00619c <__sfputs_r+0xa>
1a0061b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0061b6:	Address 0x000000001a0061b6 is out of bounds.


1a0061b8 <_vfiprintf_r>:
1a0061b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0061bc:	460d      	mov	r5, r1
1a0061be:	b09d      	sub	sp, #116	; 0x74
1a0061c0:	4614      	mov	r4, r2
1a0061c2:	461e      	mov	r6, r3
1a0061c4:	4607      	mov	r7, r0
1a0061c6:	b118      	cbz	r0, 1a0061d0 <_vfiprintf_r+0x18>
1a0061c8:	6983      	ldr	r3, [r0, #24]
1a0061ca:	b90b      	cbnz	r3, 1a0061d0 <_vfiprintf_r+0x18>
1a0061cc:	f7ff fc46 	bl	1a005a5c <__sinit>
1a0061d0:	4b85      	ldr	r3, [pc, #532]	; (1a0063e8 <_vfiprintf_r+0x230>)
1a0061d2:	429d      	cmp	r5, r3
1a0061d4:	d11b      	bne.n	1a00620e <_vfiprintf_r+0x56>
1a0061d6:	687d      	ldr	r5, [r7, #4]
1a0061d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a0061da:	07d9      	lsls	r1, r3, #31
1a0061dc:	d405      	bmi.n	1a0061ea <_vfiprintf_r+0x32>
1a0061de:	89ab      	ldrh	r3, [r5, #12]
1a0061e0:	059a      	lsls	r2, r3, #22
1a0061e2:	d402      	bmi.n	1a0061ea <_vfiprintf_r+0x32>
1a0061e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0061e6:	f7ff fcfa 	bl	1a005bde <__retarget_lock_acquire_recursive>
1a0061ea:	89ab      	ldrh	r3, [r5, #12]
1a0061ec:	071b      	lsls	r3, r3, #28
1a0061ee:	d501      	bpl.n	1a0061f4 <_vfiprintf_r+0x3c>
1a0061f0:	692b      	ldr	r3, [r5, #16]
1a0061f2:	b9eb      	cbnz	r3, 1a006230 <_vfiprintf_r+0x78>
1a0061f4:	4629      	mov	r1, r5
1a0061f6:	4638      	mov	r0, r7
1a0061f8:	f7ff fed6 	bl	1a005fa8 <__swsetup_r>
1a0061fc:	b1c0      	cbz	r0, 1a006230 <_vfiprintf_r+0x78>
1a0061fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a006200:	07d8      	lsls	r0, r3, #31
1a006202:	d50e      	bpl.n	1a006222 <_vfiprintf_r+0x6a>
1a006204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006208:	b01d      	add	sp, #116	; 0x74
1a00620a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00620e:	4b77      	ldr	r3, [pc, #476]	; (1a0063ec <_vfiprintf_r+0x234>)
1a006210:	429d      	cmp	r5, r3
1a006212:	d101      	bne.n	1a006218 <_vfiprintf_r+0x60>
1a006214:	68bd      	ldr	r5, [r7, #8]
1a006216:	e7df      	b.n	1a0061d8 <_vfiprintf_r+0x20>
1a006218:	4b75      	ldr	r3, [pc, #468]	; (1a0063f0 <_vfiprintf_r+0x238>)
1a00621a:	429d      	cmp	r5, r3
1a00621c:	bf08      	it	eq
1a00621e:	68fd      	ldreq	r5, [r7, #12]
1a006220:	e7da      	b.n	1a0061d8 <_vfiprintf_r+0x20>
1a006222:	89ab      	ldrh	r3, [r5, #12]
1a006224:	0599      	lsls	r1, r3, #22
1a006226:	d4ed      	bmi.n	1a006204 <_vfiprintf_r+0x4c>
1a006228:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00622a:	f7ff fcd9 	bl	1a005be0 <__retarget_lock_release_recursive>
1a00622e:	e7e9      	b.n	1a006204 <_vfiprintf_r+0x4c>
1a006230:	2300      	movs	r3, #0
1a006232:	9309      	str	r3, [sp, #36]	; 0x24
1a006234:	2320      	movs	r3, #32
1a006236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a00623a:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a0063f4 <_vfiprintf_r+0x23c>
1a00623e:	9603      	str	r6, [sp, #12]
1a006240:	2330      	movs	r3, #48	; 0x30
1a006242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a006246:	f04f 0a01 	mov.w	sl, #1
1a00624a:	4623      	mov	r3, r4
1a00624c:	461e      	mov	r6, r3
1a00624e:	f813 2b01 	ldrb.w	r2, [r3], #1
1a006252:	b10a      	cbz	r2, 1a006258 <_vfiprintf_r+0xa0>
1a006254:	2a25      	cmp	r2, #37	; 0x25
1a006256:	d1f9      	bne.n	1a00624c <_vfiprintf_r+0x94>
1a006258:	ebb6 0b04 	subs.w	fp, r6, r4
1a00625c:	d00b      	beq.n	1a006276 <_vfiprintf_r+0xbe>
1a00625e:	465b      	mov	r3, fp
1a006260:	4622      	mov	r2, r4
1a006262:	4629      	mov	r1, r5
1a006264:	4638      	mov	r0, r7
1a006266:	f7ff ff94 	bl	1a006192 <__sfputs_r>
1a00626a:	3001      	adds	r0, #1
1a00626c:	f000 80a3 	beq.w	1a0063b6 <_vfiprintf_r+0x1fe>
1a006270:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006272:	445b      	add	r3, fp
1a006274:	9309      	str	r3, [sp, #36]	; 0x24
1a006276:	7833      	ldrb	r3, [r6, #0]
1a006278:	2b00      	cmp	r3, #0
1a00627a:	f000 809c 	beq.w	1a0063b6 <_vfiprintf_r+0x1fe>
1a00627e:	2300      	movs	r3, #0
1a006280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a006284:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a006288:	3601      	adds	r6, #1
1a00628a:	9304      	str	r3, [sp, #16]
1a00628c:	9307      	str	r3, [sp, #28]
1a00628e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a006292:	931a      	str	r3, [sp, #104]	; 0x68
1a006294:	4634      	mov	r4, r6
1a006296:	2205      	movs	r2, #5
1a006298:	f814 1b01 	ldrb.w	r1, [r4], #1
1a00629c:	4855      	ldr	r0, [pc, #340]	; (1a0063f4 <_vfiprintf_r+0x23c>)
1a00629e:	f000 fa3f 	bl	1a006720 <memchr>
1a0062a2:	9b04      	ldr	r3, [sp, #16]
1a0062a4:	b9c0      	cbnz	r0, 1a0062d8 <_vfiprintf_r+0x120>
1a0062a6:	06da      	lsls	r2, r3, #27
1a0062a8:	bf44      	itt	mi
1a0062aa:	2220      	movmi	r2, #32
1a0062ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0062b0:	0718      	lsls	r0, r3, #28
1a0062b2:	bf44      	itt	mi
1a0062b4:	222b      	movmi	r2, #43	; 0x2b
1a0062b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0062ba:	7832      	ldrb	r2, [r6, #0]
1a0062bc:	2a2a      	cmp	r2, #42	; 0x2a
1a0062be:	d013      	beq.n	1a0062e8 <_vfiprintf_r+0x130>
1a0062c0:	9a07      	ldr	r2, [sp, #28]
1a0062c2:	4634      	mov	r4, r6
1a0062c4:	2000      	movs	r0, #0
1a0062c6:	260a      	movs	r6, #10
1a0062c8:	4621      	mov	r1, r4
1a0062ca:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0062ce:	3b30      	subs	r3, #48	; 0x30
1a0062d0:	2b09      	cmp	r3, #9
1a0062d2:	d94b      	bls.n	1a00636c <_vfiprintf_r+0x1b4>
1a0062d4:	b970      	cbnz	r0, 1a0062f4 <_vfiprintf_r+0x13c>
1a0062d6:	e014      	b.n	1a006302 <_vfiprintf_r+0x14a>
1a0062d8:	eba0 0009 	sub.w	r0, r0, r9
1a0062dc:	fa0a f000 	lsl.w	r0, sl, r0
1a0062e0:	4318      	orrs	r0, r3
1a0062e2:	9004      	str	r0, [sp, #16]
1a0062e4:	4626      	mov	r6, r4
1a0062e6:	e7d5      	b.n	1a006294 <_vfiprintf_r+0xdc>
1a0062e8:	9a03      	ldr	r2, [sp, #12]
1a0062ea:	1d11      	adds	r1, r2, #4
1a0062ec:	6812      	ldr	r2, [r2, #0]
1a0062ee:	9103      	str	r1, [sp, #12]
1a0062f0:	2a00      	cmp	r2, #0
1a0062f2:	db01      	blt.n	1a0062f8 <_vfiprintf_r+0x140>
1a0062f4:	9207      	str	r2, [sp, #28]
1a0062f6:	e004      	b.n	1a006302 <_vfiprintf_r+0x14a>
1a0062f8:	4252      	negs	r2, r2
1a0062fa:	f043 0302 	orr.w	r3, r3, #2
1a0062fe:	9207      	str	r2, [sp, #28]
1a006300:	9304      	str	r3, [sp, #16]
1a006302:	7823      	ldrb	r3, [r4, #0]
1a006304:	2b2e      	cmp	r3, #46	; 0x2e
1a006306:	d10c      	bne.n	1a006322 <_vfiprintf_r+0x16a>
1a006308:	7863      	ldrb	r3, [r4, #1]
1a00630a:	2b2a      	cmp	r3, #42	; 0x2a
1a00630c:	d133      	bne.n	1a006376 <_vfiprintf_r+0x1be>
1a00630e:	9b03      	ldr	r3, [sp, #12]
1a006310:	1d1a      	adds	r2, r3, #4
1a006312:	681b      	ldr	r3, [r3, #0]
1a006314:	9203      	str	r2, [sp, #12]
1a006316:	2b00      	cmp	r3, #0
1a006318:	bfb8      	it	lt
1a00631a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a00631e:	3402      	adds	r4, #2
1a006320:	9305      	str	r3, [sp, #20]
1a006322:	4e35      	ldr	r6, [pc, #212]	; (1a0063f8 <_vfiprintf_r+0x240>)
1a006324:	7821      	ldrb	r1, [r4, #0]
1a006326:	2203      	movs	r2, #3
1a006328:	4630      	mov	r0, r6
1a00632a:	f000 f9f9 	bl	1a006720 <memchr>
1a00632e:	b138      	cbz	r0, 1a006340 <_vfiprintf_r+0x188>
1a006330:	2340      	movs	r3, #64	; 0x40
1a006332:	1b80      	subs	r0, r0, r6
1a006334:	fa03 f000 	lsl.w	r0, r3, r0
1a006338:	9b04      	ldr	r3, [sp, #16]
1a00633a:	4303      	orrs	r3, r0
1a00633c:	3401      	adds	r4, #1
1a00633e:	9304      	str	r3, [sp, #16]
1a006340:	f814 1b01 	ldrb.w	r1, [r4], #1
1a006344:	482d      	ldr	r0, [pc, #180]	; (1a0063fc <_vfiprintf_r+0x244>)
1a006346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a00634a:	2206      	movs	r2, #6
1a00634c:	f000 f9e8 	bl	1a006720 <memchr>
1a006350:	2800      	cmp	r0, #0
1a006352:	d03f      	beq.n	1a0063d4 <_vfiprintf_r+0x21c>
1a006354:	4b2a      	ldr	r3, [pc, #168]	; (1a006400 <_vfiprintf_r+0x248>)
1a006356:	bb13      	cbnz	r3, 1a00639e <_vfiprintf_r+0x1e6>
1a006358:	9b03      	ldr	r3, [sp, #12]
1a00635a:	3307      	adds	r3, #7
1a00635c:	f023 0307 	bic.w	r3, r3, #7
1a006360:	3308      	adds	r3, #8
1a006362:	9303      	str	r3, [sp, #12]
1a006364:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006366:	4443      	add	r3, r8
1a006368:	9309      	str	r3, [sp, #36]	; 0x24
1a00636a:	e76e      	b.n	1a00624a <_vfiprintf_r+0x92>
1a00636c:	fb06 3202 	mla	r2, r6, r2, r3
1a006370:	2001      	movs	r0, #1
1a006372:	460c      	mov	r4, r1
1a006374:	e7a8      	b.n	1a0062c8 <_vfiprintf_r+0x110>
1a006376:	2300      	movs	r3, #0
1a006378:	3401      	adds	r4, #1
1a00637a:	9305      	str	r3, [sp, #20]
1a00637c:	4619      	mov	r1, r3
1a00637e:	260a      	movs	r6, #10
1a006380:	4620      	mov	r0, r4
1a006382:	f810 2b01 	ldrb.w	r2, [r0], #1
1a006386:	3a30      	subs	r2, #48	; 0x30
1a006388:	2a09      	cmp	r2, #9
1a00638a:	d903      	bls.n	1a006394 <_vfiprintf_r+0x1dc>
1a00638c:	2b00      	cmp	r3, #0
1a00638e:	d0c8      	beq.n	1a006322 <_vfiprintf_r+0x16a>
1a006390:	9105      	str	r1, [sp, #20]
1a006392:	e7c6      	b.n	1a006322 <_vfiprintf_r+0x16a>
1a006394:	fb06 2101 	mla	r1, r6, r1, r2
1a006398:	2301      	movs	r3, #1
1a00639a:	4604      	mov	r4, r0
1a00639c:	e7f0      	b.n	1a006380 <_vfiprintf_r+0x1c8>
1a00639e:	ab03      	add	r3, sp, #12
1a0063a0:	9300      	str	r3, [sp, #0]
1a0063a2:	462a      	mov	r2, r5
1a0063a4:	4b17      	ldr	r3, [pc, #92]	; (1a006404 <_vfiprintf_r+0x24c>)
1a0063a6:	a904      	add	r1, sp, #16
1a0063a8:	4638      	mov	r0, r7
1a0063aa:	f3af 8000 	nop.w
1a0063ae:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0063b2:	4680      	mov	r8, r0
1a0063b4:	d1d6      	bne.n	1a006364 <_vfiprintf_r+0x1ac>
1a0063b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a0063b8:	07d9      	lsls	r1, r3, #31
1a0063ba:	d405      	bmi.n	1a0063c8 <_vfiprintf_r+0x210>
1a0063bc:	89ab      	ldrh	r3, [r5, #12]
1a0063be:	059a      	lsls	r2, r3, #22
1a0063c0:	d402      	bmi.n	1a0063c8 <_vfiprintf_r+0x210>
1a0063c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0063c4:	f7ff fc0c 	bl	1a005be0 <__retarget_lock_release_recursive>
1a0063c8:	89ab      	ldrh	r3, [r5, #12]
1a0063ca:	065b      	lsls	r3, r3, #25
1a0063cc:	f53f af1a 	bmi.w	1a006204 <_vfiprintf_r+0x4c>
1a0063d0:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0063d2:	e719      	b.n	1a006208 <_vfiprintf_r+0x50>
1a0063d4:	ab03      	add	r3, sp, #12
1a0063d6:	9300      	str	r3, [sp, #0]
1a0063d8:	462a      	mov	r2, r5
1a0063da:	4b0a      	ldr	r3, [pc, #40]	; (1a006404 <_vfiprintf_r+0x24c>)
1a0063dc:	a904      	add	r1, sp, #16
1a0063de:	4638      	mov	r0, r7
1a0063e0:	f000 f888 	bl	1a0064f4 <_printf_i>
1a0063e4:	e7e3      	b.n	1a0063ae <_vfiprintf_r+0x1f6>
1a0063e6:	bf00      	nop
1a0063e8:	1a006c98 	.word	0x1a006c98
1a0063ec:	1a006cb8 	.word	0x1a006cb8
1a0063f0:	1a006c78 	.word	0x1a006c78
1a0063f4:	1a006cdc 	.word	0x1a006cdc
1a0063f8:	1a006ce2 	.word	0x1a006ce2
1a0063fc:	1a006ce6 	.word	0x1a006ce6
1a006400:	00000000 	.word	0x00000000
1a006404:	1a006193 	.word	0x1a006193

1a006408 <_printf_common>:
1a006408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00640c:	4691      	mov	r9, r2
1a00640e:	461f      	mov	r7, r3
1a006410:	688a      	ldr	r2, [r1, #8]
1a006412:	690b      	ldr	r3, [r1, #16]
1a006414:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a006418:	4293      	cmp	r3, r2
1a00641a:	bfb8      	it	lt
1a00641c:	4613      	movlt	r3, r2
1a00641e:	f8c9 3000 	str.w	r3, [r9]
1a006422:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a006426:	4606      	mov	r6, r0
1a006428:	460c      	mov	r4, r1
1a00642a:	b112      	cbz	r2, 1a006432 <_printf_common+0x2a>
1a00642c:	3301      	adds	r3, #1
1a00642e:	f8c9 3000 	str.w	r3, [r9]
1a006432:	6823      	ldr	r3, [r4, #0]
1a006434:	0699      	lsls	r1, r3, #26
1a006436:	bf42      	ittt	mi
1a006438:	f8d9 3000 	ldrmi.w	r3, [r9]
1a00643c:	3302      	addmi	r3, #2
1a00643e:	f8c9 3000 	strmi.w	r3, [r9]
1a006442:	6825      	ldr	r5, [r4, #0]
1a006444:	f015 0506 	ands.w	r5, r5, #6
1a006448:	d107      	bne.n	1a00645a <_printf_common+0x52>
1a00644a:	f104 0a19 	add.w	sl, r4, #25
1a00644e:	68e3      	ldr	r3, [r4, #12]
1a006450:	f8d9 2000 	ldr.w	r2, [r9]
1a006454:	1a9b      	subs	r3, r3, r2
1a006456:	42ab      	cmp	r3, r5
1a006458:	dc28      	bgt.n	1a0064ac <_printf_common+0xa4>
1a00645a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a00645e:	6822      	ldr	r2, [r4, #0]
1a006460:	3300      	adds	r3, #0
1a006462:	bf18      	it	ne
1a006464:	2301      	movne	r3, #1
1a006466:	0692      	lsls	r2, r2, #26
1a006468:	d42d      	bmi.n	1a0064c6 <_printf_common+0xbe>
1a00646a:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a00646e:	4639      	mov	r1, r7
1a006470:	4630      	mov	r0, r6
1a006472:	47c0      	blx	r8
1a006474:	3001      	adds	r0, #1
1a006476:	d020      	beq.n	1a0064ba <_printf_common+0xb2>
1a006478:	6823      	ldr	r3, [r4, #0]
1a00647a:	68e5      	ldr	r5, [r4, #12]
1a00647c:	f8d9 2000 	ldr.w	r2, [r9]
1a006480:	f003 0306 	and.w	r3, r3, #6
1a006484:	2b04      	cmp	r3, #4
1a006486:	bf08      	it	eq
1a006488:	1aad      	subeq	r5, r5, r2
1a00648a:	68a3      	ldr	r3, [r4, #8]
1a00648c:	6922      	ldr	r2, [r4, #16]
1a00648e:	bf0c      	ite	eq
1a006490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a006494:	2500      	movne	r5, #0
1a006496:	4293      	cmp	r3, r2
1a006498:	bfc4      	itt	gt
1a00649a:	1a9b      	subgt	r3, r3, r2
1a00649c:	18ed      	addgt	r5, r5, r3
1a00649e:	f04f 0900 	mov.w	r9, #0
1a0064a2:	341a      	adds	r4, #26
1a0064a4:	454d      	cmp	r5, r9
1a0064a6:	d11a      	bne.n	1a0064de <_printf_common+0xd6>
1a0064a8:	2000      	movs	r0, #0
1a0064aa:	e008      	b.n	1a0064be <_printf_common+0xb6>
1a0064ac:	2301      	movs	r3, #1
1a0064ae:	4652      	mov	r2, sl
1a0064b0:	4639      	mov	r1, r7
1a0064b2:	4630      	mov	r0, r6
1a0064b4:	47c0      	blx	r8
1a0064b6:	3001      	adds	r0, #1
1a0064b8:	d103      	bne.n	1a0064c2 <_printf_common+0xba>
1a0064ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0064be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0064c2:	3501      	adds	r5, #1
1a0064c4:	e7c3      	b.n	1a00644e <_printf_common+0x46>
1a0064c6:	18e1      	adds	r1, r4, r3
1a0064c8:	1c5a      	adds	r2, r3, #1
1a0064ca:	2030      	movs	r0, #48	; 0x30
1a0064cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a0064d0:	4422      	add	r2, r4
1a0064d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a0064d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a0064da:	3302      	adds	r3, #2
1a0064dc:	e7c5      	b.n	1a00646a <_printf_common+0x62>
1a0064de:	2301      	movs	r3, #1
1a0064e0:	4622      	mov	r2, r4
1a0064e2:	4639      	mov	r1, r7
1a0064e4:	4630      	mov	r0, r6
1a0064e6:	47c0      	blx	r8
1a0064e8:	3001      	adds	r0, #1
1a0064ea:	d0e6      	beq.n	1a0064ba <_printf_common+0xb2>
1a0064ec:	f109 0901 	add.w	r9, r9, #1
1a0064f0:	e7d8      	b.n	1a0064a4 <_printf_common+0x9c>
1a0064f2:	Address 0x000000001a0064f2 is out of bounds.


1a0064f4 <_printf_i>:
1a0064f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0064f8:	4606      	mov	r6, r0
1a0064fa:	460c      	mov	r4, r1
1a0064fc:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a006500:	7e09      	ldrb	r1, [r1, #24]
1a006502:	b085      	sub	sp, #20
1a006504:	296e      	cmp	r1, #110	; 0x6e
1a006506:	4698      	mov	r8, r3
1a006508:	4617      	mov	r7, r2
1a00650a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00650c:	f000 80ba 	beq.w	1a006684 <_printf_i+0x190>
1a006510:	d824      	bhi.n	1a00655c <_printf_i+0x68>
1a006512:	2963      	cmp	r1, #99	; 0x63
1a006514:	d039      	beq.n	1a00658a <_printf_i+0x96>
1a006516:	d80a      	bhi.n	1a00652e <_printf_i+0x3a>
1a006518:	2900      	cmp	r1, #0
1a00651a:	f000 80c3 	beq.w	1a0066a4 <_printf_i+0x1b0>
1a00651e:	2958      	cmp	r1, #88	; 0x58
1a006520:	f000 8091 	beq.w	1a006646 <_printf_i+0x152>
1a006524:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a006528:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a00652c:	e035      	b.n	1a00659a <_printf_i+0xa6>
1a00652e:	2964      	cmp	r1, #100	; 0x64
1a006530:	d001      	beq.n	1a006536 <_printf_i+0x42>
1a006532:	2969      	cmp	r1, #105	; 0x69
1a006534:	d1f6      	bne.n	1a006524 <_printf_i+0x30>
1a006536:	6825      	ldr	r5, [r4, #0]
1a006538:	681a      	ldr	r2, [r3, #0]
1a00653a:	f015 0f80 	tst.w	r5, #128	; 0x80
1a00653e:	f102 0104 	add.w	r1, r2, #4
1a006542:	d02c      	beq.n	1a00659e <_printf_i+0xaa>
1a006544:	6812      	ldr	r2, [r2, #0]
1a006546:	6019      	str	r1, [r3, #0]
1a006548:	2a00      	cmp	r2, #0
1a00654a:	da03      	bge.n	1a006554 <_printf_i+0x60>
1a00654c:	232d      	movs	r3, #45	; 0x2d
1a00654e:	4252      	negs	r2, r2
1a006550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a006554:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a006714 <_printf_i+0x220>
1a006558:	230a      	movs	r3, #10
1a00655a:	e03f      	b.n	1a0065dc <_printf_i+0xe8>
1a00655c:	2973      	cmp	r1, #115	; 0x73
1a00655e:	f000 80a5 	beq.w	1a0066ac <_printf_i+0x1b8>
1a006562:	d808      	bhi.n	1a006576 <_printf_i+0x82>
1a006564:	296f      	cmp	r1, #111	; 0x6f
1a006566:	d021      	beq.n	1a0065ac <_printf_i+0xb8>
1a006568:	2970      	cmp	r1, #112	; 0x70
1a00656a:	d1db      	bne.n	1a006524 <_printf_i+0x30>
1a00656c:	6822      	ldr	r2, [r4, #0]
1a00656e:	f042 0220 	orr.w	r2, r2, #32
1a006572:	6022      	str	r2, [r4, #0]
1a006574:	e003      	b.n	1a00657e <_printf_i+0x8a>
1a006576:	2975      	cmp	r1, #117	; 0x75
1a006578:	d018      	beq.n	1a0065ac <_printf_i+0xb8>
1a00657a:	2978      	cmp	r1, #120	; 0x78
1a00657c:	d1d2      	bne.n	1a006524 <_printf_i+0x30>
1a00657e:	2278      	movs	r2, #120	; 0x78
1a006580:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a006584:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a006718 <_printf_i+0x224>
1a006588:	e061      	b.n	1a00664e <_printf_i+0x15a>
1a00658a:	681a      	ldr	r2, [r3, #0]
1a00658c:	1d11      	adds	r1, r2, #4
1a00658e:	6019      	str	r1, [r3, #0]
1a006590:	6813      	ldr	r3, [r2, #0]
1a006592:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a006596:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00659a:	2301      	movs	r3, #1
1a00659c:	e093      	b.n	1a0066c6 <_printf_i+0x1d2>
1a00659e:	6812      	ldr	r2, [r2, #0]
1a0065a0:	6019      	str	r1, [r3, #0]
1a0065a2:	f015 0f40 	tst.w	r5, #64	; 0x40
1a0065a6:	bf18      	it	ne
1a0065a8:	b212      	sxthne	r2, r2
1a0065aa:	e7cd      	b.n	1a006548 <_printf_i+0x54>
1a0065ac:	f8d4 c000 	ldr.w	ip, [r4]
1a0065b0:	681a      	ldr	r2, [r3, #0]
1a0065b2:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a0065b6:	f102 0504 	add.w	r5, r2, #4
1a0065ba:	601d      	str	r5, [r3, #0]
1a0065bc:	d001      	beq.n	1a0065c2 <_printf_i+0xce>
1a0065be:	6812      	ldr	r2, [r2, #0]
1a0065c0:	e003      	b.n	1a0065ca <_printf_i+0xd6>
1a0065c2:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a0065c6:	d0fa      	beq.n	1a0065be <_printf_i+0xca>
1a0065c8:	8812      	ldrh	r2, [r2, #0]
1a0065ca:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a006714 <_printf_i+0x220>
1a0065ce:	296f      	cmp	r1, #111	; 0x6f
1a0065d0:	bf0c      	ite	eq
1a0065d2:	2308      	moveq	r3, #8
1a0065d4:	230a      	movne	r3, #10
1a0065d6:	2100      	movs	r1, #0
1a0065d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a0065dc:	6865      	ldr	r5, [r4, #4]
1a0065de:	60a5      	str	r5, [r4, #8]
1a0065e0:	2d00      	cmp	r5, #0
1a0065e2:	bfa2      	ittt	ge
1a0065e4:	6821      	ldrge	r1, [r4, #0]
1a0065e6:	f021 0104 	bicge.w	r1, r1, #4
1a0065ea:	6021      	strge	r1, [r4, #0]
1a0065ec:	b90a      	cbnz	r2, 1a0065f2 <_printf_i+0xfe>
1a0065ee:	2d00      	cmp	r5, #0
1a0065f0:	d046      	beq.n	1a006680 <_printf_i+0x18c>
1a0065f2:	4605      	mov	r5, r0
1a0065f4:	fbb2 f1f3 	udiv	r1, r2, r3
1a0065f8:	fb03 2e11 	mls	lr, r3, r1, r2
1a0065fc:	4293      	cmp	r3, r2
1a0065fe:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a006602:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a006606:	d939      	bls.n	1a00667c <_printf_i+0x188>
1a006608:	2b08      	cmp	r3, #8
1a00660a:	d10b      	bne.n	1a006624 <_printf_i+0x130>
1a00660c:	6823      	ldr	r3, [r4, #0]
1a00660e:	07da      	lsls	r2, r3, #31
1a006610:	d508      	bpl.n	1a006624 <_printf_i+0x130>
1a006612:	6923      	ldr	r3, [r4, #16]
1a006614:	6862      	ldr	r2, [r4, #4]
1a006616:	429a      	cmp	r2, r3
1a006618:	bfde      	ittt	le
1a00661a:	2330      	movle	r3, #48	; 0x30
1a00661c:	f805 3c01 	strble.w	r3, [r5, #-1]
1a006620:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a006624:	1b40      	subs	r0, r0, r5
1a006626:	6120      	str	r0, [r4, #16]
1a006628:	f8cd 8000 	str.w	r8, [sp]
1a00662c:	463b      	mov	r3, r7
1a00662e:	aa03      	add	r2, sp, #12
1a006630:	4621      	mov	r1, r4
1a006632:	4630      	mov	r0, r6
1a006634:	f7ff fee8 	bl	1a006408 <_printf_common>
1a006638:	3001      	adds	r0, #1
1a00663a:	d149      	bne.n	1a0066d0 <_printf_i+0x1dc>
1a00663c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006640:	b005      	add	sp, #20
1a006642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a006646:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a006714 <_printf_i+0x220>
1a00664a:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a00664e:	681d      	ldr	r5, [r3, #0]
1a006650:	6821      	ldr	r1, [r4, #0]
1a006652:	f855 2b04 	ldr.w	r2, [r5], #4
1a006656:	601d      	str	r5, [r3, #0]
1a006658:	060d      	lsls	r5, r1, #24
1a00665a:	d50b      	bpl.n	1a006674 <_printf_i+0x180>
1a00665c:	07cd      	lsls	r5, r1, #31
1a00665e:	bf44      	itt	mi
1a006660:	f041 0120 	orrmi.w	r1, r1, #32
1a006664:	6021      	strmi	r1, [r4, #0]
1a006666:	b91a      	cbnz	r2, 1a006670 <_printf_i+0x17c>
1a006668:	6823      	ldr	r3, [r4, #0]
1a00666a:	f023 0320 	bic.w	r3, r3, #32
1a00666e:	6023      	str	r3, [r4, #0]
1a006670:	2310      	movs	r3, #16
1a006672:	e7b0      	b.n	1a0065d6 <_printf_i+0xe2>
1a006674:	064b      	lsls	r3, r1, #25
1a006676:	bf48      	it	mi
1a006678:	b292      	uxthmi	r2, r2
1a00667a:	e7ef      	b.n	1a00665c <_printf_i+0x168>
1a00667c:	460a      	mov	r2, r1
1a00667e:	e7b9      	b.n	1a0065f4 <_printf_i+0x100>
1a006680:	4605      	mov	r5, r0
1a006682:	e7c1      	b.n	1a006608 <_printf_i+0x114>
1a006684:	681a      	ldr	r2, [r3, #0]
1a006686:	f8d4 c000 	ldr.w	ip, [r4]
1a00668a:	6961      	ldr	r1, [r4, #20]
1a00668c:	1d15      	adds	r5, r2, #4
1a00668e:	601d      	str	r5, [r3, #0]
1a006690:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a006694:	6813      	ldr	r3, [r2, #0]
1a006696:	d001      	beq.n	1a00669c <_printf_i+0x1a8>
1a006698:	6019      	str	r1, [r3, #0]
1a00669a:	e003      	b.n	1a0066a4 <_printf_i+0x1b0>
1a00669c:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a0066a0:	d0fa      	beq.n	1a006698 <_printf_i+0x1a4>
1a0066a2:	8019      	strh	r1, [r3, #0]
1a0066a4:	2300      	movs	r3, #0
1a0066a6:	6123      	str	r3, [r4, #16]
1a0066a8:	4605      	mov	r5, r0
1a0066aa:	e7bd      	b.n	1a006628 <_printf_i+0x134>
1a0066ac:	681a      	ldr	r2, [r3, #0]
1a0066ae:	1d11      	adds	r1, r2, #4
1a0066b0:	6019      	str	r1, [r3, #0]
1a0066b2:	6815      	ldr	r5, [r2, #0]
1a0066b4:	6862      	ldr	r2, [r4, #4]
1a0066b6:	2100      	movs	r1, #0
1a0066b8:	4628      	mov	r0, r5
1a0066ba:	f000 f831 	bl	1a006720 <memchr>
1a0066be:	b108      	cbz	r0, 1a0066c4 <_printf_i+0x1d0>
1a0066c0:	1b40      	subs	r0, r0, r5
1a0066c2:	6060      	str	r0, [r4, #4]
1a0066c4:	6863      	ldr	r3, [r4, #4]
1a0066c6:	6123      	str	r3, [r4, #16]
1a0066c8:	2300      	movs	r3, #0
1a0066ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0066ce:	e7ab      	b.n	1a006628 <_printf_i+0x134>
1a0066d0:	6923      	ldr	r3, [r4, #16]
1a0066d2:	462a      	mov	r2, r5
1a0066d4:	4639      	mov	r1, r7
1a0066d6:	4630      	mov	r0, r6
1a0066d8:	47c0      	blx	r8
1a0066da:	3001      	adds	r0, #1
1a0066dc:	d0ae      	beq.n	1a00663c <_printf_i+0x148>
1a0066de:	6823      	ldr	r3, [r4, #0]
1a0066e0:	079b      	lsls	r3, r3, #30
1a0066e2:	d413      	bmi.n	1a00670c <_printf_i+0x218>
1a0066e4:	68e0      	ldr	r0, [r4, #12]
1a0066e6:	9b03      	ldr	r3, [sp, #12]
1a0066e8:	4298      	cmp	r0, r3
1a0066ea:	bfb8      	it	lt
1a0066ec:	4618      	movlt	r0, r3
1a0066ee:	e7a7      	b.n	1a006640 <_printf_i+0x14c>
1a0066f0:	2301      	movs	r3, #1
1a0066f2:	464a      	mov	r2, r9
1a0066f4:	4639      	mov	r1, r7
1a0066f6:	4630      	mov	r0, r6
1a0066f8:	47c0      	blx	r8
1a0066fa:	3001      	adds	r0, #1
1a0066fc:	d09e      	beq.n	1a00663c <_printf_i+0x148>
1a0066fe:	3501      	adds	r5, #1
1a006700:	68e3      	ldr	r3, [r4, #12]
1a006702:	9a03      	ldr	r2, [sp, #12]
1a006704:	1a9b      	subs	r3, r3, r2
1a006706:	42ab      	cmp	r3, r5
1a006708:	dcf2      	bgt.n	1a0066f0 <_printf_i+0x1fc>
1a00670a:	e7eb      	b.n	1a0066e4 <_printf_i+0x1f0>
1a00670c:	2500      	movs	r5, #0
1a00670e:	f104 0919 	add.w	r9, r4, #25
1a006712:	e7f5      	b.n	1a006700 <_printf_i+0x20c>
1a006714:	1a006ced 	.word	0x1a006ced
1a006718:	1a006cfe 	.word	0x1a006cfe
1a00671c:	ffffffff 	.word	0xffffffff

1a006720 <memchr>:
1a006720:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a006724:	2a10      	cmp	r2, #16
1a006726:	db2b      	blt.n	1a006780 <memchr+0x60>
1a006728:	f010 0f07 	tst.w	r0, #7
1a00672c:	d008      	beq.n	1a006740 <memchr+0x20>
1a00672e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006732:	3a01      	subs	r2, #1
1a006734:	428b      	cmp	r3, r1
1a006736:	d02d      	beq.n	1a006794 <memchr+0x74>
1a006738:	f010 0f07 	tst.w	r0, #7
1a00673c:	b342      	cbz	r2, 1a006790 <memchr+0x70>
1a00673e:	d1f6      	bne.n	1a00672e <memchr+0xe>
1a006740:	b4f0      	push	{r4, r5, r6, r7}
1a006742:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a006746:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00674a:	f022 0407 	bic.w	r4, r2, #7
1a00674e:	f07f 0700 	mvns.w	r7, #0
1a006752:	2300      	movs	r3, #0
1a006754:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a006758:	3c08      	subs	r4, #8
1a00675a:	ea85 0501 	eor.w	r5, r5, r1
1a00675e:	ea86 0601 	eor.w	r6, r6, r1
1a006762:	fa85 f547 	uadd8	r5, r5, r7
1a006766:	faa3 f587 	sel	r5, r3, r7
1a00676a:	fa86 f647 	uadd8	r6, r6, r7
1a00676e:	faa5 f687 	sel	r6, r5, r7
1a006772:	b98e      	cbnz	r6, 1a006798 <memchr+0x78>
1a006774:	d1ee      	bne.n	1a006754 <memchr+0x34>
1a006776:	bcf0      	pop	{r4, r5, r6, r7}
1a006778:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00677c:	f002 0207 	and.w	r2, r2, #7
1a006780:	b132      	cbz	r2, 1a006790 <memchr+0x70>
1a006782:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006786:	3a01      	subs	r2, #1
1a006788:	ea83 0301 	eor.w	r3, r3, r1
1a00678c:	b113      	cbz	r3, 1a006794 <memchr+0x74>
1a00678e:	d1f8      	bne.n	1a006782 <memchr+0x62>
1a006790:	2000      	movs	r0, #0
1a006792:	4770      	bx	lr
1a006794:	3801      	subs	r0, #1
1a006796:	4770      	bx	lr
1a006798:	2d00      	cmp	r5, #0
1a00679a:	bf06      	itte	eq
1a00679c:	4635      	moveq	r5, r6
1a00679e:	3803      	subeq	r0, #3
1a0067a0:	3807      	subne	r0, #7
1a0067a2:	f015 0f01 	tst.w	r5, #1
1a0067a6:	d107      	bne.n	1a0067b8 <memchr+0x98>
1a0067a8:	3001      	adds	r0, #1
1a0067aa:	f415 7f80 	tst.w	r5, #256	; 0x100
1a0067ae:	bf02      	ittt	eq
1a0067b0:	3001      	addeq	r0, #1
1a0067b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a0067b6:	3001      	addeq	r0, #1
1a0067b8:	bcf0      	pop	{r4, r5, r6, r7}
1a0067ba:	3801      	subs	r0, #1
1a0067bc:	4770      	bx	lr
1a0067be:	bf00      	nop
1a0067c0:	75657551 	.word	0x75657551
1a0067c4:	68732065 	.word	0x68732065
1a0067c8:	646c756f 	.word	0x646c756f
1a0067cc:	76616820 	.word	0x76616820
1a0067d0:	65622065 	.word	0x65622065
1a0067d4:	65206e65 	.word	0x65206e65
1a0067d8:	7974706d 	.word	0x7974706d
1a0067dc:	000a0d21 	.word	0x000a0d21
1a0067e0:	706d6554 	.word	0x706d6554
1a0067e4:	74617265 	.word	0x74617265
1a0067e8:	3a617275 	.word	0x3a617275
1a0067ec:	00000020 	.word	0x00000020
1a0067f0:	61726720 	.word	0x61726720
1a0067f4:	20736f64 	.word	0x20736f64
1a0067f8:	000a0d43 	.word	0x000a0d43
1a0067fc:	6c756f43 	.word	0x6c756f43
1a006800:	6f6e2064 	.word	0x6f6e2064
1a006804:	65722074 	.word	0x65722074
1a006808:	76696563 	.word	0x76696563
1a00680c:	72662065 	.word	0x72662065
1a006810:	74206d6f 	.word	0x74206d6f
1a006814:	71206568 	.word	0x71206568
1a006818:	65756575 	.word	0x65756575
1a00681c:	000a0d2e 	.word	0x000a0d2e
1a006820:	6c756f43 	.word	0x6c756f43
1a006824:	6f6e2064 	.word	0x6f6e2064
1a006828:	65732074 	.word	0x65732074
1a00682c:	7420646e 	.word	0x7420646e
1a006830:	6874206f 	.word	0x6874206f
1a006834:	75712065 	.word	0x75712065
1a006838:	2e657565 	.word	0x2e657565
1a00683c:	ff000a0d 	.word	0xff000a0d
1a006840:	32656d62 	.word	0x32656d62
1a006844:	00003038 	.word	0x00003038
1a006848:	33326d61 	.word	0x33326d61
1a00684c:	00003130 	.word	0x00003130
1a006850:	646e6553 	.word	0x646e6553
1a006854:	00327265 	.word	0x00327265
1a006858:	65636552 	.word	0x65636552
1a00685c:	72657669 	.word	0x72657669
1a006860:	ffffff00 	.word	0xffffff00
1a006864:	706d6554 	.word	0x706d6554
1a006868:	74617265 	.word	0x74617265
1a00686c:	3a657275 	.word	0x3a657275
1a006870:	00000020 	.word	0x00000020
1a006874:	6172470d 	.word	0x6172470d
1a006878:	20736f64 	.word	0x20736f64
1a00687c:	00000043 	.word	0x00000043
1a006880:	696d7548 	.word	0x696d7548
1a006884:	79746964 	.word	0x79746964
1a006888:	0000203a 	.word	0x0000203a
1a00688c:	0000250d 	.word	0x0000250d
1a006890:	73657250 	.word	0x73657250
1a006894:	65727573 	.word	0x65727573
1a006898:	0000203a 	.word	0x0000203a
1a00689c:	0061500d 	.word	0x0061500d
1a0068a0:	6c707041 	.word	0x6c707041
1a0068a4:	74616369 	.word	0x74616369
1a0068a8:	206e6f69 	.word	0x206e6f69
1a0068ac:	6c6c614d 	.word	0x6c6c614d
1a0068b0:	4620636f 	.word	0x4620636f
1a0068b4:	656c6961 	.word	0x656c6961
1a0068b8:	6f482064 	.word	0x6f482064
1a0068bc:	0d216b6f 	.word	0x0d216b6f
1a0068c0:	00000000 	.word	0x00000000
1a0068c4:	7362696c 	.word	0x7362696c
1a0068c8:	6572662f 	.word	0x6572662f
1a0068cc:	6f747265 	.word	0x6f747265
1a0068d0:	6f732f73 	.word	0x6f732f73
1a0068d4:	65637275 	.word	0x65637275
1a0068d8:	6f6f682f 	.word	0x6f6f682f
1a0068dc:	632e736b 	.word	0x632e736b
1a0068e0:	ffffff00 	.word	0xffffff00
1a0068e4:	70410a0d 	.word	0x70410a0d
1a0068e8:	63696c70 	.word	0x63696c70
1a0068ec:	6f697461 	.word	0x6f697461
1a0068f0:	7453206e 	.word	0x7453206e
1a0068f4:	206b6361 	.word	0x206b6361
1a0068f8:	7265764f 	.word	0x7265764f
1a0068fc:	776f6c66 	.word	0x776f6c66
1a006900:	6f202121 	.word	0x6f202121
1a006904:	6154206e 	.word	0x6154206e
1a006908:	203a6b73 	.word	0x203a6b73
1a00690c:	0a0d7325 	.word	0x0a0d7325
1a006910:	ffffff00 	.word	0xffffff00
1a006914:	41760a0d 	.word	0x41760a0d
1a006918:	72657373 	.word	0x72657373
1a00691c:	6c614374 	.word	0x6c614374
1a006920:	2864656c 	.word	0x2864656c
1a006924:	200a0d29 	.word	0x200a0d29
1a006928:	4c4c2020 	.word	0x4c4c2020
1a00692c:	20656e69 	.word	0x20656e69
1a006930:	626d754e 	.word	0x626d754e
1a006934:	3d207265 	.word	0x3d207265
1a006938:	0d642520 	.word	0x0d642520
1a00693c:	2020200a 	.word	0x2020200a
1a006940:	656c6946 	.word	0x656c6946
1a006944:	6d614e20 	.word	0x6d614e20
1a006948:	203d2065 	.word	0x203d2065
1a00694c:	0a0d7325 	.word	0x0a0d7325
1a006950:	ff000a0d 	.word	0xff000a0d
1a006954:	454c4449 	.word	0x454c4449
1a006958:	ffffff00 	.word	0xffffff00
1a00695c:	51726d54 	.word	0x51726d54
1a006960:	ffffff00 	.word	0xffffff00
1a006964:	20726d54 	.word	0x20726d54
1a006968:	00637653 	.word	0x00637653

1a00696c <keys>:
1a00696c:	27262524 ff007325                       $%&'%s..

1a006974 <ExtRateIn>:
1a006974:	00000000                                ....

1a006978 <GpioButtons>:
1a006978:	08000400 09010900                       ........

1a006980 <GpioLeds>:
1a006980:	01050005 0e000205 0c010b01              ............

1a00698c <GpioPorts>:
1a00698c:	03030003 0f050403 05031005 07030603     ................
1a00699c:	ffff0802                                ....

1a0069a0 <OscRateIn>:
1a0069a0:	00b71b00                                ....

1a0069a4 <InitClkStates>:
1a0069a4:	01010f01                                ....

1a0069a8 <pinmuxing>:
1a0069a8:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0069b8:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0069c8:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0069d8:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0069e8:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0069f8:	00d50301 00d50401 00160107 00560207     ..............V.
1a006a08:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a006a18:	00570206                                ..W.

1a006a1c <UART_BClock>:
1a006a1c:	01a201c2 01620182                       ......b.

1a006a24 <UART_PClock>:
1a006a24:	00820081 00a200a1 08040201 0f0f0f03     ................
1a006a34:	000000ff                                ....

1a006a38 <periph_to_base>:
1a006a38:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a006a48:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a006a58:	000100e0 01000100 01200003 00060120     .......... . ...
1a006a68:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a006a78:	01820013 00120182 01a201a2 01c20011     ................
1a006a88:	001001c2 01e201e2 0202000f 000e0202     ................
1a006a98:	02220222 0223000d 001c0223              "."...#.#...

1a006aa4 <InitClkStates>:
1a006aa4:	00010100 00010909 0001090a 01010701     ................
1a006ab4:	00010902 00010906 0101090c 0001090d     ................
1a006ac4:	0001090e 0001090f 00010910 00010911     ................
1a006ad4:	00010912 00010913 00011114 00011119     ................
1a006ae4:	0001111a 0001111b                       ........

1a006aec <lpcUarts>:
1a006aec:	40081000 06020406 00180205 40081000     ...@...........@
1a006afc:	09070509 00180706 40082000 00000000     ......... .@....
1a006b0c:	00190000 400c1000 07060107 001a0602     .......@........
1a006b1c:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a006b2c:	02020302 001b0204                       ........

1a006b34 <gpioPinsInit>:
1a006b34:	02000104 00050701 05010d03 04080100     ................
1a006b44:	02020002 02000304 00000403 04070002     ................
1a006b54:	030c0300 09050402 05040103 04030208     ................
1a006b64:	04020305 06040504 0802000c 03000b06     ................
1a006b74:	00090607 07060503 060f0504 03030004     ................
1a006b84:	02000404 00050404 06040502 04060200     ................
1a006b94:	0c050408 05040a04 0003010e 14010a00     ................
1a006ba4:	010f0000 0d000012 00001101 0010010c     ................
1a006bb4:	07070300 000f0300 01000001 00000000     ................
1a006bc4:	000a0600 08060603 06100504 04030005     ................
1a006bd4:	03000106 04090400 04010d05 010b0000     ................
1a006be4:	0200000f 00000001 00010104 02010800     ................
1a006bf4:	01090000 09010006 05040002 04010200     ................
1a006c04:	02020105 02020504 0e00000a 01000b02     ................
1a006c14:	000c020b ffff0c01 ffffffff              ............

1a006c20 <rounders>:
1a006c20:	00000000 3fe00000 9999999a 3fa99999     .......?.......?
1a006c30:	47ae147b 3f747ae1 d2f1a9fc 3f40624d     {..G.zt?....Mb@?
1a006c40:	eb1c432d 3f0a36e2 88e368f1 3ed4f8b5     -C...6.?.h.....>
1a006c50:	a0b5ed8d 3ea0c6f7 9abcaf48 3e6ad7f2     .......>H.....j>
1a006c60:	e2308c3a 3e35798e e826d695 3e012e0b     :.0..y5>..&....>
1a006c70:	d9d7bdbb 3dcb7cdf                       .....|.=

1a006c78 <__sf_fake_stderr>:
	...

1a006c98 <__sf_fake_stdin>:
	...

1a006cb8 <__sf_fake_stdout>:
	...

1a006cd8 <_global_impure_ptr>:
1a006cd8:	10000054 2b302d23 6c680020 6665004c     T...#-0+ .hlL.ef
1a006ce8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a006cf8:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a006d08:	64636261 ff006665                       abcdef..
